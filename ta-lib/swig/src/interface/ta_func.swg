/* TA-LIB Copyright (c) 1999-2008, Mario Fortier
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 *
 * - Neither name of author nor the names of its contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* DO NOT MODIFY this file.
 * This file is automatically generated by gen_code.
 *
 * If you are not re-building an interface with SWIG (which is most
 * likely the case), just ignore this file.
 */
 

/*
 * TA_ACCBANDS - Acceleration Bands
 * 
 * Input  = High, Low, Close
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ACCBANDS( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        const double *IN_ARRAY /* inClose */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outRealUpperBand */,
                        double       *OUT_ARRAY /* outRealMiddleBand */,
                        double       *OUT_ARRAY /* outRealLowerBand */ );

int TA_ACCBANDS_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_ACCBANDS_State { int memory_size;
int current_idx;                                                          const double inHigh[];
                                                          const double inLow[];
                                                          const double inClose[];
                                                          int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_ACCBANDS_StateInit( TA_ACCBANDS_State*& _state,
                         int           optInTimePeriod );  /* From 2 to 100000 */


int TA_ACCBANDS_State( TA_ACCBANDS_State*& _state,
                     const double inHigh,
                     const double inLow,
                     const double inClose,
                     int           optInTimePeriod, /* From 2 to 100000 */
                     double        &outRealUpperBand,
                     double        &outRealMiddleBand,
                     double        &outRealLowerBand );

int TA_ACCBANDS_StateFree( TA_ACCBANDS_State*& _state );


/*
 * TA_ACOS - Vector Trigonometric ACos
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_ACOS( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ACOS_Lookback( void );


struct TA_ACOS_State { int memory_size;
int current_idx;                                                      const double inReal[];
}


int TA_ACOS_StateInit( TA_ACOS_State*& _state );


int TA_ACOS_State( TA_ACOS_State*& _state,
                 const double inReal,
                 double        &outReal );

int TA_ACOS_StateFree( TA_ACOS_State*& _state );


/*
 * TA_AD - Chaikin A/D Line
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 */
TA_RetCode TA_AD( int           START_IDX,
                  int           END_IDX,
                  const double *IN_ARRAY /* inHigh */,
                  const double *IN_ARRAY /* inLow */,
                  const double *IN_ARRAY /* inClose */,
                  const double *IN_ARRAY /* inVolume */,
                  int          *BEG_IDX,
                  int          *OUT_SIZE,
                  double       *OUT_ARRAY /* outReal */ );

int TA_AD_Lookback( void );


struct TA_AD_State { int memory_size;
int current_idx;                                                    const double inHigh[];
                                                    const double inLow[];
                                                    const double inClose[];
                                                    const double inVolume[];
}


int TA_AD_StateInit( TA_AD_State*& _state );


int TA_AD_State( TA_AD_State*& _state,
               const double inHigh,
               const double inLow,
               const double inClose,
               const double inVolume,
               double        &outReal );

int TA_AD_StateFree( TA_AD_State*& _state );


/*
 * TA_ADD - Vector Arithmetic Add
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_RetCode TA_ADD( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal0 */,
                   const double *IN_ARRAY /* inReal1 */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_ADD_Lookback( void );


struct TA_ADD_State { int memory_size;
int current_idx;                                                     const double inReal0[];
                                                     const double inReal1[];
}


int TA_ADD_StateInit( TA_ADD_State*& _state );


int TA_ADD_State( TA_ADD_State*& _state,
                const double inReal0,
                const double inReal1,
                double        &outReal );

int TA_ADD_StateFree( TA_ADD_State*& _state );


/*
 * TA_ADOSC - Chaikin A/D Oscillator
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * 
 */
TA_RetCode TA_ADOSC( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inHigh */,
                     const double *IN_ARRAY /* inLow */,
                     const double *IN_ARRAY /* inClose */,
                     const double *IN_ARRAY /* inVolume */,
                     int           OPT_INT /* optInFastPeriod */, /* From 2 to 100000 */
                     int           OPT_INT /* optInSlowPeriod */, /* From 2 to 100000 */
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outReal */ );

int TA_ADOSC_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                     int           optInSlowPeriod );  /* From 2 to 100000 */


struct TA_ADOSC_State { int memory_size;
int current_idx;                                                       const double inHigh[];
                                                       const double inLow[];
                                                       const double inClose[];
                                                       const double inVolume[];
                                                       int           optInFastPeriod; /* From 2 to 100000 */
                                                       int           optInSlowPeriod; /* From 2 to 100000 */
}


int TA_ADOSC_StateInit( TA_ADOSC_State*& _state,
                      int           optInFastPeriod, /* From 2 to 100000 */
                      int           optInSlowPeriod );  /* From 2 to 100000 */


int TA_ADOSC_State( TA_ADOSC_State*& _state,
                  const double inHigh,
                  const double inLow,
                  const double inClose,
                  const double inVolume,
                  int           optInFastPeriod, /* From 2 to 100000 */
                  int           optInSlowPeriod, /* From 2 to 100000 */
                  double        &outReal );

int TA_ADOSC_StateFree( TA_ADOSC_State*& _state );


/*
 * TA_ADX - Average Directional Movement Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ADX( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   const double *IN_ARRAY /* inClose */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_ADX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_ADX_State { int memory_size;
int current_idx;                                                     const double inHigh[];
                                                     const double inLow[];
                                                     const double inClose[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_ADX_StateInit( TA_ADX_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_ADX_State( TA_ADX_State*& _state,
                const double inHigh,
                const double inLow,
                const double inClose,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_ADX_StateFree( TA_ADX_State*& _state );


/*
 * TA_ADXR - Average Directional Movement Index Rating
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ADXR( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inHigh */,
                    const double *IN_ARRAY /* inLow */,
                    const double *IN_ARRAY /* inClose */,
                    int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ADXR_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_ADXR_State { int memory_size;
int current_idx;                                                      const double inHigh[];
                                                      const double inLow[];
                                                      const double inClose[];
                                                      int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_ADXR_StateInit( TA_ADXR_State*& _state,
                     int           optInTimePeriod );  /* From 2 to 100000 */


int TA_ADXR_State( TA_ADXR_State*& _state,
                 const double inHigh,
                 const double inLow,
                 const double inClose,
                 int           optInTimePeriod, /* From 2 to 100000 */
                 double        &outReal );

int TA_ADXR_StateFree( TA_ADXR_State*& _state );


/*
 * TA_APO - Absolute Price Oscillator
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_APO( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInFastPeriod */, /* From 2 to 100000 */
                   int           OPT_INT /* optInSlowPeriod */, /* From 2 to 100000 */
                   TA_MAType     OPT_MATYPE /* optInMAType */,                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_APO_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                   int           optInSlowPeriod, /* From 2 to 100000 */
                   TA_MAType     optInMAType ); 

struct TA_APO_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInFastPeriod; /* From 2 to 100000 */
                                                     int           optInSlowPeriod; /* From 2 to 100000 */
                                                     TA_MAType     optInMAType;}


int TA_APO_StateInit( TA_APO_State*& _state,
                    int           optInFastPeriod, /* From 2 to 100000 */
                    int           optInSlowPeriod, /* From 2 to 100000 */
                    TA_MAType     optInMAType ); 

int TA_APO_State( TA_APO_State*& _state,
                const double inReal,
                int           optInFastPeriod, /* From 2 to 100000 */
                int           optInSlowPeriod, /* From 2 to 100000 */
                TA_MAType     optInMAType,                double        &outReal );

int TA_APO_StateFree( TA_APO_State*& _state );


/*
 * TA_AROON - Aroon
 * 
 * Input  = High, Low
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_AROON( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inHigh */,
                     const double *IN_ARRAY /* inLow */,
                     int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outAroonDown */,
                     double       *OUT_ARRAY /* outAroonUp */ );

int TA_AROON_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_AROON_State { int memory_size;
int current_idx;                                                       const double inHigh[];
                                                       const double inLow[];
                                                       int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_AROON_StateInit( TA_AROON_State*& _state,
                      int           optInTimePeriod );  /* From 2 to 100000 */


int TA_AROON_State( TA_AROON_State*& _state,
                  const double inHigh,
                  const double inLow,
                  int           optInTimePeriod, /* From 2 to 100000 */
                  double        &outAroonDown,
                  double        &outAroonUp );

int TA_AROON_StateFree( TA_AROON_State*& _state );


/*
 * TA_AROONOSC - Aroon Oscillator
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_AROONOSC( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_AROONOSC_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_AROONOSC_State { int memory_size;
int current_idx;                                                          const double inHigh[];
                                                          const double inLow[];
                                                          int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_AROONOSC_StateInit( TA_AROONOSC_State*& _state,
                         int           optInTimePeriod );  /* From 2 to 100000 */


int TA_AROONOSC_State( TA_AROONOSC_State*& _state,
                     const double inHigh,
                     const double inLow,
                     int           optInTimePeriod, /* From 2 to 100000 */
                     double        &outReal );

int TA_AROONOSC_StateFree( TA_AROONOSC_State*& _state );


/*
 * TA_ASIN - Vector Trigonometric ASin
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_ASIN( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ASIN_Lookback( void );


struct TA_ASIN_State { int memory_size;
int current_idx;                                                      const double inReal[];
}


int TA_ASIN_StateInit( TA_ASIN_State*& _state );


int TA_ASIN_State( TA_ASIN_State*& _state,
                 const double inReal,
                 double        &outReal );

int TA_ASIN_StateFree( TA_ASIN_State*& _state );


/*
 * TA_ATAN - Vector Trigonometric ATan
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_ATAN( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ATAN_Lookback( void );


struct TA_ATAN_State { int memory_size;
int current_idx;                                                      const double inReal[];
}


int TA_ATAN_StateInit( TA_ATAN_State*& _state );


int TA_ATAN_State( TA_ATAN_State*& _state,
                 const double inReal,
                 double        &outReal );

int TA_ATAN_StateFree( TA_ATAN_State*& _state );


/*
 * TA_ATR - Average True Range
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ATR( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   const double *IN_ARRAY /* inClose */,
                   int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_ATR_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_ATR_State { int memory_size;
int current_idx;                                                     const double inHigh[];
                                                     const double inLow[];
                                                     const double inClose[];
                                                     int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_ATR_StateInit( TA_ATR_State*& _state,
                    int           optInTimePeriod );  /* From 1 to 100000 */


int TA_ATR_State( TA_ATR_State*& _state,
                const double inHigh,
                const double inLow,
                const double inClose,
                int           optInTimePeriod, /* From 1 to 100000 */
                double        &outReal );

int TA_ATR_StateFree( TA_ATR_State*& _state );


/*
 * TA_AVGPRICE - Average Price
 * 
 * Input  = Open, High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_AVGPRICE( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inOpen */,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        const double *IN_ARRAY /* inClose */,
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_AVGPRICE_Lookback( void );


struct TA_AVGPRICE_State { int memory_size;
int current_idx;                                                          const double inOpen[];
                                                          const double inHigh[];
                                                          const double inLow[];
                                                          const double inClose[];
}


int TA_AVGPRICE_StateInit( TA_AVGPRICE_State*& _state );


int TA_AVGPRICE_State( TA_AVGPRICE_State*& _state,
                     const double inOpen,
                     const double inHigh,
                     const double inLow,
                     const double inClose,
                     double        &outReal );

int TA_AVGPRICE_StateFree( TA_AVGPRICE_State*& _state );


/*
 * TA_AVGDEV - Average Deviation
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_AVGDEV( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inReal */,
                      int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_AVGDEV_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_AVGDEV_State { int memory_size;
int current_idx;                                                        const double inReal[];
                                                        int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_AVGDEV_StateInit( TA_AVGDEV_State*& _state,
                       int           optInTimePeriod );  /* From 2 to 100000 */


int TA_AVGDEV_State( TA_AVGDEV_State*& _state,
                   const double inReal,
                   int           optInTimePeriod, /* From 2 to 100000 */
                   double        &outReal );

int TA_AVGDEV_StateFree( TA_AVGDEV_State*& _state );


/*
 * TA_BBANDS - Bollinger Bands
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * optInNbDevUp:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Deviation multiplier for upper band
 * 
 * optInNbDevDn:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Deviation multiplier for lower band
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_BBANDS( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inReal */,
                      int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                      double        OPT_REAL /* optInNbDevUp */, /* From TA_REAL_MIN to TA_REAL_MAX */
                      double        OPT_REAL /* optInNbDevDn */, /* From TA_REAL_MIN to TA_REAL_MAX */
                      TA_MAType     OPT_MATYPE /* optInMAType */,                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outRealUpperBand */,
                      double       *OUT_ARRAY /* outRealMiddleBand */,
                      double       *OUT_ARRAY /* outRealLowerBand */ );

int TA_BBANDS_Lookback( int           optInTimePeriod, /* From 2 to 100000 */
                      double        optInNbDevUp, /* From TA_REAL_MIN to TA_REAL_MAX */
                      double        optInNbDevDn, /* From TA_REAL_MIN to TA_REAL_MAX */
                      TA_MAType     optInMAType ); 

struct TA_BBANDS_State { int memory_size;
int current_idx;                                                        const double inReal[];
                                                        int           optInTimePeriod; /* From 2 to 100000 */
                                                        double        optInNbDevUp; /* From TA_REAL_MIN to TA_REAL_MAX */
                                                        double        optInNbDevDn; /* From TA_REAL_MIN to TA_REAL_MAX */
                                                        TA_MAType     optInMAType;}


int TA_BBANDS_StateInit( TA_BBANDS_State*& _state,
                       int           optInTimePeriod, /* From 2 to 100000 */
                       double        optInNbDevUp, /* From TA_REAL_MIN to TA_REAL_MAX */
                       double        optInNbDevDn, /* From TA_REAL_MIN to TA_REAL_MAX */
                       TA_MAType     optInMAType ); 

int TA_BBANDS_State( TA_BBANDS_State*& _state,
                   const double inReal,
                   int           optInTimePeriod, /* From 2 to 100000 */
                   double        optInNbDevUp, /* From TA_REAL_MIN to TA_REAL_MAX */
                   double        optInNbDevDn, /* From TA_REAL_MIN to TA_REAL_MAX */
                   TA_MAType     optInMAType,                   double        &outRealUpperBand,
                   double        &outRealMiddleBand,
                   double        &outRealLowerBand );

int TA_BBANDS_StateFree( TA_BBANDS_State*& _state );


/*
 * TA_BETA - Beta
 * 
 * Input  = double, double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_BETA( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal0 */,
                    const double *IN_ARRAY /* inReal1 */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_BETA_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_BETA_State { int memory_size;
int current_idx;                                                      const double inReal0[];
                                                      const double inReal1[];
                                                      int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_BETA_StateInit( TA_BETA_State*& _state,
                     int           optInTimePeriod );  /* From 1 to 100000 */


int TA_BETA_State( TA_BETA_State*& _state,
                 const double inReal0,
                 const double inReal1,
                 int           optInTimePeriod, /* From 1 to 100000 */
                 double        &outReal );

int TA_BETA_StateFree( TA_BETA_State*& _state );


/*
 * TA_BOP - Balance Of Power
 * 
 * Input  = Open, High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_BOP( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inOpen */,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   const double *IN_ARRAY /* inClose */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_BOP_Lookback( void );


struct TA_BOP_State { int memory_size;
int current_idx;                                                     const double inOpen[];
                                                     const double inHigh[];
                                                     const double inLow[];
                                                     const double inClose[];
}


int TA_BOP_StateInit( TA_BOP_State*& _state );


int TA_BOP_State( TA_BOP_State*& _state,
                const double inOpen,
                const double inHigh,
                const double inLow,
                const double inClose,
                double        &outReal );

int TA_BOP_StateFree( TA_BOP_State*& _state );


/*
 * TA_CCI - Commodity Channel Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_CCI( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   const double *IN_ARRAY /* inClose */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_CCI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_CCI_State { int memory_size;
int current_idx;                                                     const double inHigh[];
                                                     const double inLow[];
                                                     const double inClose[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_CCI_StateInit( TA_CCI_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_CCI_State( TA_CCI_State*& _state,
                const double inHigh,
                const double inLow,
                const double inClose,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_CCI_StateFree( TA_CCI_State*& _state );


/*
 * TA_CDL2CROWS - Two Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL2CROWS( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDL2CROWS_Lookback( void );


struct TA_CDL2CROWS_State { int memory_size;
int current_idx;                                                           const double inOpen[];
                                                           const double inHigh[];
                                                           const double inLow[];
                                                           const double inClose[];
}


int TA_CDL2CROWS_StateInit( TA_CDL2CROWS_State*& _state );


int TA_CDL2CROWS_State( TA_CDL2CROWS_State*& _state,
                      const double inOpen,
                      const double inHigh,
                      const double inLow,
                      const double inClose,
                      int           &outInteger );

int TA_CDL2CROWS_StateFree( TA_CDL2CROWS_State*& _state );


/*
 * TA_CDL3BLACKCROWS - Three Black Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3BLACKCROWS( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3BLACKCROWS_Lookback( void );


struct TA_CDL3BLACKCROWS_State { int memory_size;
int current_idx;                                                                const double inOpen[];
                                                                const double inHigh[];
                                                                const double inLow[];
                                                                const double inClose[];
}


int TA_CDL3BLACKCROWS_StateInit( TA_CDL3BLACKCROWS_State*& _state );


int TA_CDL3BLACKCROWS_State( TA_CDL3BLACKCROWS_State*& _state,
                           const double inOpen,
                           const double inHigh,
                           const double inLow,
                           const double inClose,
                           int           &outInteger );

int TA_CDL3BLACKCROWS_StateFree( TA_CDL3BLACKCROWS_State*& _state );


/*
 * TA_CDL3INSIDE - Three Inside Up/Down
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3INSIDE( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inOpen */,
                          const double *IN_ARRAY /* inHigh */,
                          const double *IN_ARRAY /* inLow */,
                          const double *IN_ARRAY /* inClose */,
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3INSIDE_Lookback( void );


struct TA_CDL3INSIDE_State { int memory_size;
int current_idx;                                                            const double inOpen[];
                                                            const double inHigh[];
                                                            const double inLow[];
                                                            const double inClose[];
}


int TA_CDL3INSIDE_StateInit( TA_CDL3INSIDE_State*& _state );


int TA_CDL3INSIDE_State( TA_CDL3INSIDE_State*& _state,
                       const double inOpen,
                       const double inHigh,
                       const double inLow,
                       const double inClose,
                       int           &outInteger );

int TA_CDL3INSIDE_StateFree( TA_CDL3INSIDE_State*& _state );


/*
 * TA_CDL3LINESTRIKE - Three-Line Strike 
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3LINESTRIKE( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3LINESTRIKE_Lookback( void );


struct TA_CDL3LINESTRIKE_State { int memory_size;
int current_idx;                                                                const double inOpen[];
                                                                const double inHigh[];
                                                                const double inLow[];
                                                                const double inClose[];
}


int TA_CDL3LINESTRIKE_StateInit( TA_CDL3LINESTRIKE_State*& _state );


int TA_CDL3LINESTRIKE_State( TA_CDL3LINESTRIKE_State*& _state,
                           const double inOpen,
                           const double inHigh,
                           const double inLow,
                           const double inClose,
                           int           &outInteger );

int TA_CDL3LINESTRIKE_StateFree( TA_CDL3LINESTRIKE_State*& _state );


/*
 * TA_CDL3OUTSIDE - Three Outside Up/Down
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3OUTSIDE( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3OUTSIDE_Lookback( void );


struct TA_CDL3OUTSIDE_State { int memory_size;
int current_idx;                                                             const double inOpen[];
                                                             const double inHigh[];
                                                             const double inLow[];
                                                             const double inClose[];
}


int TA_CDL3OUTSIDE_StateInit( TA_CDL3OUTSIDE_State*& _state );


int TA_CDL3OUTSIDE_State( TA_CDL3OUTSIDE_State*& _state,
                        const double inOpen,
                        const double inHigh,
                        const double inLow,
                        const double inClose,
                        int           &outInteger );

int TA_CDL3OUTSIDE_StateFree( TA_CDL3OUTSIDE_State*& _state );


/*
 * TA_CDL3STARSINSOUTH - Three Stars In The South
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3STARSINSOUTH( int           START_IDX,
                                int           END_IDX,
                                const double *IN_ARRAY /* inOpen */,
                                const double *IN_ARRAY /* inHigh */,
                                const double *IN_ARRAY /* inLow */,
                                const double *IN_ARRAY /* inClose */,
                                int          *BEG_IDX,
                                int          *OUT_SIZE,
                                int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3STARSINSOUTH_Lookback( void );


struct TA_CDL3STARSINSOUTH_State { int memory_size;
int current_idx;                                                                  const double inOpen[];
                                                                  const double inHigh[];
                                                                  const double inLow[];
                                                                  const double inClose[];
}


int TA_CDL3STARSINSOUTH_StateInit( TA_CDL3STARSINSOUTH_State*& _state );


int TA_CDL3STARSINSOUTH_State( TA_CDL3STARSINSOUTH_State*& _state,
                             const double inOpen,
                             const double inHigh,
                             const double inLow,
                             const double inClose,
                             int           &outInteger );

int TA_CDL3STARSINSOUTH_StateFree( TA_CDL3STARSINSOUTH_State*& _state );


/*
 * TA_CDL3WHITESOLDIERS - Three Advancing White Soldiers
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3WHITESOLDIERS( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3WHITESOLDIERS_Lookback( void );


struct TA_CDL3WHITESOLDIERS_State { int memory_size;
int current_idx;                                                                   const double inOpen[];
                                                                   const double inHigh[];
                                                                   const double inLow[];
                                                                   const double inClose[];
}


int TA_CDL3WHITESOLDIERS_StateInit( TA_CDL3WHITESOLDIERS_State*& _state );


int TA_CDL3WHITESOLDIERS_State( TA_CDL3WHITESOLDIERS_State*& _state,
                              const double inOpen,
                              const double inHigh,
                              const double inLow,
                              const double inClose,
                              int           &outInteger );

int TA_CDL3WHITESOLDIERS_StateFree( TA_CDL3WHITESOLDIERS_State*& _state );


/*
 * TA_CDLABANDONEDBABY - Abandoned Baby
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLABANDONEDBABY( int           START_IDX,
                                int           END_IDX,
                                const double *IN_ARRAY /* inOpen */,
                                const double *IN_ARRAY /* inHigh */,
                                const double *IN_ARRAY /* inLow */,
                                const double *IN_ARRAY /* inClose */,
                                double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                                int          *BEG_IDX,
                                int          *OUT_SIZE,
                                int          *OUT_ARRAY /* outInteger */ );

int TA_CDLABANDONEDBABY_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLABANDONEDBABY_State { int memory_size;
int current_idx;                                                                  const double inOpen[];
                                                                  const double inHigh[];
                                                                  const double inLow[];
                                                                  const double inClose[];
                                                                  double        optInPenetration; /* From 0 to TA_REAL_MAX */
}


int TA_CDLABANDONEDBABY_StateInit( TA_CDLABANDONEDBABY_State*& _state,
                                 double        optInPenetration );  /* From 0 to TA_REAL_MAX */


int TA_CDLABANDONEDBABY_State( TA_CDLABANDONEDBABY_State*& _state,
                             const double inOpen,
                             const double inHigh,
                             const double inLow,
                             const double inClose,
                             double        optInPenetration, /* From 0 to TA_REAL_MAX */
                             int           &outInteger );

int TA_CDLABANDONEDBABY_StateFree( TA_CDLABANDONEDBABY_State*& _state );


/*
 * TA_CDLADVANCEBLOCK - Advance Block
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLADVANCEBLOCK( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inOpen */,
                               const double *IN_ARRAY /* inHigh */,
                               const double *IN_ARRAY /* inLow */,
                               const double *IN_ARRAY /* inClose */,
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               int          *OUT_ARRAY /* outInteger */ );

int TA_CDLADVANCEBLOCK_Lookback( void );


struct TA_CDLADVANCEBLOCK_State { int memory_size;
int current_idx;                                                                 const double inOpen[];
                                                                 const double inHigh[];
                                                                 const double inLow[];
                                                                 const double inClose[];
}


int TA_CDLADVANCEBLOCK_StateInit( TA_CDLADVANCEBLOCK_State*& _state );


int TA_CDLADVANCEBLOCK_State( TA_CDLADVANCEBLOCK_State*& _state,
                            const double inOpen,
                            const double inHigh,
                            const double inLow,
                            const double inClose,
                            int           &outInteger );

int TA_CDLADVANCEBLOCK_StateFree( TA_CDLADVANCEBLOCK_State*& _state );


/*
 * TA_CDLBELTHOLD - Belt-hold
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLBELTHOLD( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLBELTHOLD_Lookback( void );


struct TA_CDLBELTHOLD_State { int memory_size;
int current_idx;                                                             const double inOpen[];
                                                             const double inHigh[];
                                                             const double inLow[];
                                                             const double inClose[];
}


int TA_CDLBELTHOLD_StateInit( TA_CDLBELTHOLD_State*& _state );


int TA_CDLBELTHOLD_State( TA_CDLBELTHOLD_State*& _state,
                        const double inOpen,
                        const double inHigh,
                        const double inLow,
                        const double inClose,
                        int           &outInteger );

int TA_CDLBELTHOLD_StateFree( TA_CDLBELTHOLD_State*& _state );


/*
 * TA_CDLBREAKAWAY - Breakaway
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLBREAKAWAY( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inOpen */,
                            const double *IN_ARRAY /* inHigh */,
                            const double *IN_ARRAY /* inLow */,
                            const double *IN_ARRAY /* inClose */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_CDLBREAKAWAY_Lookback( void );


struct TA_CDLBREAKAWAY_State { int memory_size;
int current_idx;                                                              const double inOpen[];
                                                              const double inHigh[];
                                                              const double inLow[];
                                                              const double inClose[];
}


int TA_CDLBREAKAWAY_StateInit( TA_CDLBREAKAWAY_State*& _state );


int TA_CDLBREAKAWAY_State( TA_CDLBREAKAWAY_State*& _state,
                         const double inOpen,
                         const double inHigh,
                         const double inLow,
                         const double inClose,
                         int           &outInteger );

int TA_CDLBREAKAWAY_StateFree( TA_CDLBREAKAWAY_State*& _state );


/*
 * TA_CDLCLOSINGMARUBOZU - Closing Marubozu
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLCLOSINGMARUBOZU( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLCLOSINGMARUBOZU_Lookback( void );


struct TA_CDLCLOSINGMARUBOZU_State { int memory_size;
int current_idx;                                                                    const double inOpen[];
                                                                    const double inHigh[];
                                                                    const double inLow[];
                                                                    const double inClose[];
}


int TA_CDLCLOSINGMARUBOZU_StateInit( TA_CDLCLOSINGMARUBOZU_State*& _state );


int TA_CDLCLOSINGMARUBOZU_State( TA_CDLCLOSINGMARUBOZU_State*& _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           &outInteger );

int TA_CDLCLOSINGMARUBOZU_StateFree( TA_CDLCLOSINGMARUBOZU_State*& _state );


/*
 * TA_CDLCONCEALBABYSWALL - Concealing Baby Swallow
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLCONCEALBABYSWALL( int           START_IDX,
                                   int           END_IDX,
                                   const double *IN_ARRAY /* inOpen */,
                                   const double *IN_ARRAY /* inHigh */,
                                   const double *IN_ARRAY /* inLow */,
                                   const double *IN_ARRAY /* inClose */,
                                   int          *BEG_IDX,
                                   int          *OUT_SIZE,
                                   int          *OUT_ARRAY /* outInteger */ );

int TA_CDLCONCEALBABYSWALL_Lookback( void );


struct TA_CDLCONCEALBABYSWALL_State { int memory_size;
int current_idx;                                                                     const double inOpen[];
                                                                     const double inHigh[];
                                                                     const double inLow[];
                                                                     const double inClose[];
}


int TA_CDLCONCEALBABYSWALL_StateInit( TA_CDLCONCEALBABYSWALL_State*& _state );


int TA_CDLCONCEALBABYSWALL_State( TA_CDLCONCEALBABYSWALL_State*& _state,
                                const double inOpen,
                                const double inHigh,
                                const double inLow,
                                const double inClose,
                                int           &outInteger );

int TA_CDLCONCEALBABYSWALL_StateFree( TA_CDLCONCEALBABYSWALL_State*& _state );


/*
 * TA_CDLCOUNTERATTACK - Counterattack
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLCOUNTERATTACK( int           START_IDX,
                                int           END_IDX,
                                const double *IN_ARRAY /* inOpen */,
                                const double *IN_ARRAY /* inHigh */,
                                const double *IN_ARRAY /* inLow */,
                                const double *IN_ARRAY /* inClose */,
                                int          *BEG_IDX,
                                int          *OUT_SIZE,
                                int          *OUT_ARRAY /* outInteger */ );

int TA_CDLCOUNTERATTACK_Lookback( void );


struct TA_CDLCOUNTERATTACK_State { int memory_size;
int current_idx;                                                                  const double inOpen[];
                                                                  const double inHigh[];
                                                                  const double inLow[];
                                                                  const double inClose[];
}


int TA_CDLCOUNTERATTACK_StateInit( TA_CDLCOUNTERATTACK_State*& _state );


int TA_CDLCOUNTERATTACK_State( TA_CDLCOUNTERATTACK_State*& _state,
                             const double inOpen,
                             const double inHigh,
                             const double inLow,
                             const double inClose,
                             int           &outInteger );

int TA_CDLCOUNTERATTACK_StateFree( TA_CDLCOUNTERATTACK_State*& _state );


/*
 * TA_CDLDARKCLOUDCOVER - Dark Cloud Cover
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLDARKCLOUDCOVER( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDLDARKCLOUDCOVER_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLDARKCLOUDCOVER_State { int memory_size;
int current_idx;                                                                   const double inOpen[];
                                                                   const double inHigh[];
                                                                   const double inLow[];
                                                                   const double inClose[];
                                                                   double        optInPenetration; /* From 0 to TA_REAL_MAX */
}


int TA_CDLDARKCLOUDCOVER_StateInit( TA_CDLDARKCLOUDCOVER_State*& _state,
                                  double        optInPenetration );  /* From 0 to TA_REAL_MAX */


int TA_CDLDARKCLOUDCOVER_State( TA_CDLDARKCLOUDCOVER_State*& _state,
                              const double inOpen,
                              const double inHigh,
                              const double inLow,
                              const double inClose,
                              double        optInPenetration, /* From 0 to TA_REAL_MAX */
                              int           &outInteger );

int TA_CDLDARKCLOUDCOVER_StateFree( TA_CDLDARKCLOUDCOVER_State*& _state );


/*
 * TA_CDLDOJI - Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLDOJI( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inOpen */,
                       const double *IN_ARRAY /* inHigh */,
                       const double *IN_ARRAY /* inLow */,
                       const double *IN_ARRAY /* inClose */,
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       int          *OUT_ARRAY /* outInteger */ );

int TA_CDLDOJI_Lookback( void );


struct TA_CDLDOJI_State { int memory_size;
int current_idx;                                                         const double inOpen[];
                                                         const double inHigh[];
                                                         const double inLow[];
                                                         const double inClose[];
}


int TA_CDLDOJI_StateInit( TA_CDLDOJI_State*& _state );


int TA_CDLDOJI_State( TA_CDLDOJI_State*& _state,
                    const double inOpen,
                    const double inHigh,
                    const double inLow,
                    const double inClose,
                    int           &outInteger );

int TA_CDLDOJI_StateFree( TA_CDLDOJI_State*& _state );


/*
 * TA_CDLDOJISTAR - Doji Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLDOJISTAR( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLDOJISTAR_Lookback( void );


struct TA_CDLDOJISTAR_State { int memory_size;
int current_idx;                                                             const double inOpen[];
                                                             const double inHigh[];
                                                             const double inLow[];
                                                             const double inClose[];
}


int TA_CDLDOJISTAR_StateInit( TA_CDLDOJISTAR_State*& _state );


int TA_CDLDOJISTAR_State( TA_CDLDOJISTAR_State*& _state,
                        const double inOpen,
                        const double inHigh,
                        const double inLow,
                        const double inClose,
                        int           &outInteger );

int TA_CDLDOJISTAR_StateFree( TA_CDLDOJISTAR_State*& _state );


/*
 * TA_CDLDRAGONFLYDOJI - Dragonfly Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLDRAGONFLYDOJI( int           START_IDX,
                                int           END_IDX,
                                const double *IN_ARRAY /* inOpen */,
                                const double *IN_ARRAY /* inHigh */,
                                const double *IN_ARRAY /* inLow */,
                                const double *IN_ARRAY /* inClose */,
                                int          *BEG_IDX,
                                int          *OUT_SIZE,
                                int          *OUT_ARRAY /* outInteger */ );

int TA_CDLDRAGONFLYDOJI_Lookback( void );


struct TA_CDLDRAGONFLYDOJI_State { int memory_size;
int current_idx;                                                                  const double inOpen[];
                                                                  const double inHigh[];
                                                                  const double inLow[];
                                                                  const double inClose[];
}


int TA_CDLDRAGONFLYDOJI_StateInit( TA_CDLDRAGONFLYDOJI_State*& _state );


int TA_CDLDRAGONFLYDOJI_State( TA_CDLDRAGONFLYDOJI_State*& _state,
                             const double inOpen,
                             const double inHigh,
                             const double inLow,
                             const double inClose,
                             int           &outInteger );

int TA_CDLDRAGONFLYDOJI_StateFree( TA_CDLDRAGONFLYDOJI_State*& _state );


/*
 * TA_CDLENGULFING - Engulfing Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLENGULFING( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inOpen */,
                            const double *IN_ARRAY /* inHigh */,
                            const double *IN_ARRAY /* inLow */,
                            const double *IN_ARRAY /* inClose */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_CDLENGULFING_Lookback( void );


struct TA_CDLENGULFING_State { int memory_size;
int current_idx;                                                              const double inOpen[];
                                                              const double inHigh[];
                                                              const double inLow[];
                                                              const double inClose[];
}


int TA_CDLENGULFING_StateInit( TA_CDLENGULFING_State*& _state );


int TA_CDLENGULFING_State( TA_CDLENGULFING_State*& _state,
                         const double inOpen,
                         const double inHigh,
                         const double inLow,
                         const double inClose,
                         int           &outInteger );

int TA_CDLENGULFING_StateFree( TA_CDLENGULFING_State*& _state );


/*
 * TA_CDLEVENINGDOJISTAR - Evening Doji Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLEVENINGDOJISTAR( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLEVENINGDOJISTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLEVENINGDOJISTAR_State { int memory_size;
int current_idx;                                                                    const double inOpen[];
                                                                    const double inHigh[];
                                                                    const double inLow[];
                                                                    const double inClose[];
                                                                    double        optInPenetration; /* From 0 to TA_REAL_MAX */
}


int TA_CDLEVENINGDOJISTAR_StateInit( TA_CDLEVENINGDOJISTAR_State*& _state,
                                   double        optInPenetration );  /* From 0 to TA_REAL_MAX */


int TA_CDLEVENINGDOJISTAR_State( TA_CDLEVENINGDOJISTAR_State*& _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               double        optInPenetration, /* From 0 to TA_REAL_MAX */
                               int           &outInteger );

int TA_CDLEVENINGDOJISTAR_StateFree( TA_CDLEVENINGDOJISTAR_State*& _state );


/*
 * TA_CDLEVENINGSTAR - Evening Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLEVENINGSTAR( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLEVENINGSTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLEVENINGSTAR_State { int memory_size;
int current_idx;                                                                const double inOpen[];
                                                                const double inHigh[];
                                                                const double inLow[];
                                                                const double inClose[];
                                                                double        optInPenetration; /* From 0 to TA_REAL_MAX */
}


int TA_CDLEVENINGSTAR_StateInit( TA_CDLEVENINGSTAR_State*& _state,
                               double        optInPenetration );  /* From 0 to TA_REAL_MAX */


int TA_CDLEVENINGSTAR_State( TA_CDLEVENINGSTAR_State*& _state,
                           const double inOpen,
                           const double inHigh,
                           const double inLow,
                           const double inClose,
                           double        optInPenetration, /* From 0 to TA_REAL_MAX */
                           int           &outInteger );

int TA_CDLEVENINGSTAR_StateFree( TA_CDLEVENINGSTAR_State*& _state );


/*
 * TA_CDLGAPSIDESIDEWHITE - Up/Down-gap side-by-side white lines
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLGAPSIDESIDEWHITE( int           START_IDX,
                                   int           END_IDX,
                                   const double *IN_ARRAY /* inOpen */,
                                   const double *IN_ARRAY /* inHigh */,
                                   const double *IN_ARRAY /* inLow */,
                                   const double *IN_ARRAY /* inClose */,
                                   int          *BEG_IDX,
                                   int          *OUT_SIZE,
                                   int          *OUT_ARRAY /* outInteger */ );

int TA_CDLGAPSIDESIDEWHITE_Lookback( void );


struct TA_CDLGAPSIDESIDEWHITE_State { int memory_size;
int current_idx;                                                                     const double inOpen[];
                                                                     const double inHigh[];
                                                                     const double inLow[];
                                                                     const double inClose[];
}


int TA_CDLGAPSIDESIDEWHITE_StateInit( TA_CDLGAPSIDESIDEWHITE_State*& _state );


int TA_CDLGAPSIDESIDEWHITE_State( TA_CDLGAPSIDESIDEWHITE_State*& _state,
                                const double inOpen,
                                const double inHigh,
                                const double inLow,
                                const double inClose,
                                int           &outInteger );

int TA_CDLGAPSIDESIDEWHITE_StateFree( TA_CDLGAPSIDESIDEWHITE_State*& _state );


/*
 * TA_CDLGRAVESTONEDOJI - Gravestone Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLGRAVESTONEDOJI( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDLGRAVESTONEDOJI_Lookback( void );


struct TA_CDLGRAVESTONEDOJI_State { int memory_size;
int current_idx;                                                                   const double inOpen[];
                                                                   const double inHigh[];
                                                                   const double inLow[];
                                                                   const double inClose[];
}


int TA_CDLGRAVESTONEDOJI_StateInit( TA_CDLGRAVESTONEDOJI_State*& _state );


int TA_CDLGRAVESTONEDOJI_State( TA_CDLGRAVESTONEDOJI_State*& _state,
                              const double inOpen,
                              const double inHigh,
                              const double inLow,
                              const double inClose,
                              int           &outInteger );

int TA_CDLGRAVESTONEDOJI_StateFree( TA_CDLGRAVESTONEDOJI_State*& _state );


/*
 * TA_CDLHAMMER - Hammer
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHAMMER( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHAMMER_Lookback( void );


struct TA_CDLHAMMER_State { int memory_size;
int current_idx;                                                           const double inOpen[];
                                                           const double inHigh[];
                                                           const double inLow[];
                                                           const double inClose[];
}


int TA_CDLHAMMER_StateInit( TA_CDLHAMMER_State*& _state );


int TA_CDLHAMMER_State( TA_CDLHAMMER_State*& _state,
                      const double inOpen,
                      const double inHigh,
                      const double inLow,
                      const double inClose,
                      int           &outInteger );

int TA_CDLHAMMER_StateFree( TA_CDLHAMMER_State*& _state );


/*
 * TA_CDLHANGINGMAN - Hanging Man
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHANGINGMAN( int           START_IDX,
                             int           END_IDX,
                             const double *IN_ARRAY /* inOpen */,
                             const double *IN_ARRAY /* inHigh */,
                             const double *IN_ARRAY /* inLow */,
                             const double *IN_ARRAY /* inClose */,
                             int          *BEG_IDX,
                             int          *OUT_SIZE,
                             int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHANGINGMAN_Lookback( void );


struct TA_CDLHANGINGMAN_State { int memory_size;
int current_idx;                                                               const double inOpen[];
                                                               const double inHigh[];
                                                               const double inLow[];
                                                               const double inClose[];
}


int TA_CDLHANGINGMAN_StateInit( TA_CDLHANGINGMAN_State*& _state );


int TA_CDLHANGINGMAN_State( TA_CDLHANGINGMAN_State*& _state,
                          const double inOpen,
                          const double inHigh,
                          const double inLow,
                          const double inClose,
                          int           &outInteger );

int TA_CDLHANGINGMAN_StateFree( TA_CDLHANGINGMAN_State*& _state );


/*
 * TA_CDLHARAMI - Harami Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHARAMI( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHARAMI_Lookback( void );


struct TA_CDLHARAMI_State { int memory_size;
int current_idx;                                                           const double inOpen[];
                                                           const double inHigh[];
                                                           const double inLow[];
                                                           const double inClose[];
}


int TA_CDLHARAMI_StateInit( TA_CDLHARAMI_State*& _state );


int TA_CDLHARAMI_State( TA_CDLHARAMI_State*& _state,
                      const double inOpen,
                      const double inHigh,
                      const double inLow,
                      const double inClose,
                      int           &outInteger );

int TA_CDLHARAMI_StateFree( TA_CDLHARAMI_State*& _state );


/*
 * TA_CDLHARAMICROSS - Harami Cross Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHARAMICROSS( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHARAMICROSS_Lookback( void );


struct TA_CDLHARAMICROSS_State { int memory_size;
int current_idx;                                                                const double inOpen[];
                                                                const double inHigh[];
                                                                const double inLow[];
                                                                const double inClose[];
}


int TA_CDLHARAMICROSS_StateInit( TA_CDLHARAMICROSS_State*& _state );


int TA_CDLHARAMICROSS_State( TA_CDLHARAMICROSS_State*& _state,
                           const double inOpen,
                           const double inHigh,
                           const double inLow,
                           const double inClose,
                           int           &outInteger );

int TA_CDLHARAMICROSS_StateFree( TA_CDLHARAMICROSS_State*& _state );


/*
 * TA_CDLHIGHWAVE - High-Wave Candle
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHIGHWAVE( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHIGHWAVE_Lookback( void );


struct TA_CDLHIGHWAVE_State { int memory_size;
int current_idx;                                                             const double inOpen[];
                                                             const double inHigh[];
                                                             const double inLow[];
                                                             const double inClose[];
}


int TA_CDLHIGHWAVE_StateInit( TA_CDLHIGHWAVE_State*& _state );


int TA_CDLHIGHWAVE_State( TA_CDLHIGHWAVE_State*& _state,
                        const double inOpen,
                        const double inHigh,
                        const double inLow,
                        const double inClose,
                        int           &outInteger );

int TA_CDLHIGHWAVE_StateFree( TA_CDLHIGHWAVE_State*& _state );


/*
 * TA_CDLHIKKAKE - Hikkake Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHIKKAKE( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inOpen */,
                          const double *IN_ARRAY /* inHigh */,
                          const double *IN_ARRAY /* inLow */,
                          const double *IN_ARRAY /* inClose */,
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHIKKAKE_Lookback( void );


struct TA_CDLHIKKAKE_State { int memory_size;
int current_idx;                                                            const double inOpen[];
                                                            const double inHigh[];
                                                            const double inLow[];
                                                            const double inClose[];
}


int TA_CDLHIKKAKE_StateInit( TA_CDLHIKKAKE_State*& _state );


int TA_CDLHIKKAKE_State( TA_CDLHIKKAKE_State*& _state,
                       const double inOpen,
                       const double inHigh,
                       const double inLow,
                       const double inClose,
                       int           &outInteger );

int TA_CDLHIKKAKE_StateFree( TA_CDLHIKKAKE_State*& _state );


/*
 * TA_CDLHIKKAKEMOD - Modified Hikkake Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHIKKAKEMOD( int           START_IDX,
                             int           END_IDX,
                             const double *IN_ARRAY /* inOpen */,
                             const double *IN_ARRAY /* inHigh */,
                             const double *IN_ARRAY /* inLow */,
                             const double *IN_ARRAY /* inClose */,
                             int          *BEG_IDX,
                             int          *OUT_SIZE,
                             int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHIKKAKEMOD_Lookback( void );


struct TA_CDLHIKKAKEMOD_State { int memory_size;
int current_idx;                                                               const double inOpen[];
                                                               const double inHigh[];
                                                               const double inLow[];
                                                               const double inClose[];
}


int TA_CDLHIKKAKEMOD_StateInit( TA_CDLHIKKAKEMOD_State*& _state );


int TA_CDLHIKKAKEMOD_State( TA_CDLHIKKAKEMOD_State*& _state,
                          const double inOpen,
                          const double inHigh,
                          const double inLow,
                          const double inClose,
                          int           &outInteger );

int TA_CDLHIKKAKEMOD_StateFree( TA_CDLHIKKAKEMOD_State*& _state );


/*
 * TA_CDLHOMINGPIGEON - Homing Pigeon
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHOMINGPIGEON( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inOpen */,
                               const double *IN_ARRAY /* inHigh */,
                               const double *IN_ARRAY /* inLow */,
                               const double *IN_ARRAY /* inClose */,
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHOMINGPIGEON_Lookback( void );


struct TA_CDLHOMINGPIGEON_State { int memory_size;
int current_idx;                                                                 const double inOpen[];
                                                                 const double inHigh[];
                                                                 const double inLow[];
                                                                 const double inClose[];
}


int TA_CDLHOMINGPIGEON_StateInit( TA_CDLHOMINGPIGEON_State*& _state );


int TA_CDLHOMINGPIGEON_State( TA_CDLHOMINGPIGEON_State*& _state,
                            const double inOpen,
                            const double inHigh,
                            const double inLow,
                            const double inClose,
                            int           &outInteger );

int TA_CDLHOMINGPIGEON_StateFree( TA_CDLHOMINGPIGEON_State*& _state );


/*
 * TA_CDLIDENTICAL3CROWS - Identical Three Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLIDENTICAL3CROWS( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLIDENTICAL3CROWS_Lookback( void );


struct TA_CDLIDENTICAL3CROWS_State { int memory_size;
int current_idx;                                                                    const double inOpen[];
                                                                    const double inHigh[];
                                                                    const double inLow[];
                                                                    const double inClose[];
}


int TA_CDLIDENTICAL3CROWS_StateInit( TA_CDLIDENTICAL3CROWS_State*& _state );


int TA_CDLIDENTICAL3CROWS_State( TA_CDLIDENTICAL3CROWS_State*& _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           &outInteger );

int TA_CDLIDENTICAL3CROWS_StateFree( TA_CDLIDENTICAL3CROWS_State*& _state );


/*
 * TA_CDLINNECK - In-Neck Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLINNECK( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDLINNECK_Lookback( void );


struct TA_CDLINNECK_State { int memory_size;
int current_idx;                                                           const double inOpen[];
                                                           const double inHigh[];
                                                           const double inLow[];
                                                           const double inClose[];
}


int TA_CDLINNECK_StateInit( TA_CDLINNECK_State*& _state );


int TA_CDLINNECK_State( TA_CDLINNECK_State*& _state,
                      const double inOpen,
                      const double inHigh,
                      const double inLow,
                      const double inClose,
                      int           &outInteger );

int TA_CDLINNECK_StateFree( TA_CDLINNECK_State*& _state );


/*
 * TA_CDLINVERTEDHAMMER - Inverted Hammer
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLINVERTEDHAMMER( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDLINVERTEDHAMMER_Lookback( void );


struct TA_CDLINVERTEDHAMMER_State { int memory_size;
int current_idx;                                                                   const double inOpen[];
                                                                   const double inHigh[];
                                                                   const double inLow[];
                                                                   const double inClose[];
}


int TA_CDLINVERTEDHAMMER_StateInit( TA_CDLINVERTEDHAMMER_State*& _state );


int TA_CDLINVERTEDHAMMER_State( TA_CDLINVERTEDHAMMER_State*& _state,
                              const double inOpen,
                              const double inHigh,
                              const double inLow,
                              const double inClose,
                              int           &outInteger );

int TA_CDLINVERTEDHAMMER_StateFree( TA_CDLINVERTEDHAMMER_State*& _state );


/*
 * TA_CDLKICKING - Kicking
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLKICKING( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inOpen */,
                          const double *IN_ARRAY /* inHigh */,
                          const double *IN_ARRAY /* inLow */,
                          const double *IN_ARRAY /* inClose */,
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          int          *OUT_ARRAY /* outInteger */ );

int TA_CDLKICKING_Lookback( void );


struct TA_CDLKICKING_State { int memory_size;
int current_idx;                                                            const double inOpen[];
                                                            const double inHigh[];
                                                            const double inLow[];
                                                            const double inClose[];
}


int TA_CDLKICKING_StateInit( TA_CDLKICKING_State*& _state );


int TA_CDLKICKING_State( TA_CDLKICKING_State*& _state,
                       const double inOpen,
                       const double inHigh,
                       const double inLow,
                       const double inClose,
                       int           &outInteger );

int TA_CDLKICKING_StateFree( TA_CDLKICKING_State*& _state );


/*
 * TA_CDLKICKINGBYLENGTH - Kicking - bull/bear determined by the longer marubozu
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLKICKINGBYLENGTH( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLKICKINGBYLENGTH_Lookback( void );


struct TA_CDLKICKINGBYLENGTH_State { int memory_size;
int current_idx;                                                                    const double inOpen[];
                                                                    const double inHigh[];
                                                                    const double inLow[];
                                                                    const double inClose[];
}


int TA_CDLKICKINGBYLENGTH_StateInit( TA_CDLKICKINGBYLENGTH_State*& _state );


int TA_CDLKICKINGBYLENGTH_State( TA_CDLKICKINGBYLENGTH_State*& _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           &outInteger );

int TA_CDLKICKINGBYLENGTH_StateFree( TA_CDLKICKINGBYLENGTH_State*& _state );


/*
 * TA_CDLLADDERBOTTOM - Ladder Bottom
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLLADDERBOTTOM( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inOpen */,
                               const double *IN_ARRAY /* inHigh */,
                               const double *IN_ARRAY /* inLow */,
                               const double *IN_ARRAY /* inClose */,
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               int          *OUT_ARRAY /* outInteger */ );

int TA_CDLLADDERBOTTOM_Lookback( void );


struct TA_CDLLADDERBOTTOM_State { int memory_size;
int current_idx;                                                                 const double inOpen[];
                                                                 const double inHigh[];
                                                                 const double inLow[];
                                                                 const double inClose[];
}


int TA_CDLLADDERBOTTOM_StateInit( TA_CDLLADDERBOTTOM_State*& _state );


int TA_CDLLADDERBOTTOM_State( TA_CDLLADDERBOTTOM_State*& _state,
                            const double inOpen,
                            const double inHigh,
                            const double inLow,
                            const double inClose,
                            int           &outInteger );

int TA_CDLLADDERBOTTOM_StateFree( TA_CDLLADDERBOTTOM_State*& _state );


/*
 * TA_CDLLONGLEGGEDDOJI - Long Legged Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLLONGLEGGEDDOJI( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDLLONGLEGGEDDOJI_Lookback( void );


struct TA_CDLLONGLEGGEDDOJI_State { int memory_size;
int current_idx;                                                                   const double inOpen[];
                                                                   const double inHigh[];
                                                                   const double inLow[];
                                                                   const double inClose[];
}


int TA_CDLLONGLEGGEDDOJI_StateInit( TA_CDLLONGLEGGEDDOJI_State*& _state );


int TA_CDLLONGLEGGEDDOJI_State( TA_CDLLONGLEGGEDDOJI_State*& _state,
                              const double inOpen,
                              const double inHigh,
                              const double inLow,
                              const double inClose,
                              int           &outInteger );

int TA_CDLLONGLEGGEDDOJI_StateFree( TA_CDLLONGLEGGEDDOJI_State*& _state );


/*
 * TA_CDLLONGLINE - Long Line Candle
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLLONGLINE( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLLONGLINE_Lookback( void );


struct TA_CDLLONGLINE_State { int memory_size;
int current_idx;                                                             const double inOpen[];
                                                             const double inHigh[];
                                                             const double inLow[];
                                                             const double inClose[];
}


int TA_CDLLONGLINE_StateInit( TA_CDLLONGLINE_State*& _state );


int TA_CDLLONGLINE_State( TA_CDLLONGLINE_State*& _state,
                        const double inOpen,
                        const double inHigh,
                        const double inLow,
                        const double inClose,
                        int           &outInteger );

int TA_CDLLONGLINE_StateFree( TA_CDLLONGLINE_State*& _state );


/*
 * TA_CDLMARUBOZU - Marubozu
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLMARUBOZU( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLMARUBOZU_Lookback( void );


struct TA_CDLMARUBOZU_State { int memory_size;
int current_idx;                                                             const double inOpen[];
                                                             const double inHigh[];
                                                             const double inLow[];
                                                             const double inClose[];
}


int TA_CDLMARUBOZU_StateInit( TA_CDLMARUBOZU_State*& _state );


int TA_CDLMARUBOZU_State( TA_CDLMARUBOZU_State*& _state,
                        const double inOpen,
                        const double inHigh,
                        const double inLow,
                        const double inClose,
                        int           &outInteger );

int TA_CDLMARUBOZU_StateFree( TA_CDLMARUBOZU_State*& _state );


/*
 * TA_CDLMATCHINGLOW - Matching Low
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLMATCHINGLOW( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLMATCHINGLOW_Lookback( void );


struct TA_CDLMATCHINGLOW_State { int memory_size;
int current_idx;                                                                const double inOpen[];
                                                                const double inHigh[];
                                                                const double inLow[];
                                                                const double inClose[];
}


int TA_CDLMATCHINGLOW_StateInit( TA_CDLMATCHINGLOW_State*& _state );


int TA_CDLMATCHINGLOW_State( TA_CDLMATCHINGLOW_State*& _state,
                           const double inOpen,
                           const double inHigh,
                           const double inLow,
                           const double inClose,
                           int           &outInteger );

int TA_CDLMATCHINGLOW_StateFree( TA_CDLMATCHINGLOW_State*& _state );


/*
 * TA_CDLMATHOLD - Mat Hold
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLMATHOLD( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inOpen */,
                          const double *IN_ARRAY /* inHigh */,
                          const double *IN_ARRAY /* inLow */,
                          const double *IN_ARRAY /* inClose */,
                          double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          int          *OUT_ARRAY /* outInteger */ );

int TA_CDLMATHOLD_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLMATHOLD_State { int memory_size;
int current_idx;                                                            const double inOpen[];
                                                            const double inHigh[];
                                                            const double inLow[];
                                                            const double inClose[];
                                                            double        optInPenetration; /* From 0 to TA_REAL_MAX */
}


int TA_CDLMATHOLD_StateInit( TA_CDLMATHOLD_State*& _state,
                           double        optInPenetration );  /* From 0 to TA_REAL_MAX */


int TA_CDLMATHOLD_State( TA_CDLMATHOLD_State*& _state,
                       const double inOpen,
                       const double inHigh,
                       const double inLow,
                       const double inClose,
                       double        optInPenetration, /* From 0 to TA_REAL_MAX */
                       int           &outInteger );

int TA_CDLMATHOLD_StateFree( TA_CDLMATHOLD_State*& _state );


/*
 * TA_CDLMORNINGDOJISTAR - Morning Doji Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLMORNINGDOJISTAR( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLMORNINGDOJISTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLMORNINGDOJISTAR_State { int memory_size;
int current_idx;                                                                    const double inOpen[];
                                                                    const double inHigh[];
                                                                    const double inLow[];
                                                                    const double inClose[];
                                                                    double        optInPenetration; /* From 0 to TA_REAL_MAX */
}


int TA_CDLMORNINGDOJISTAR_StateInit( TA_CDLMORNINGDOJISTAR_State*& _state,
                                   double        optInPenetration );  /* From 0 to TA_REAL_MAX */


int TA_CDLMORNINGDOJISTAR_State( TA_CDLMORNINGDOJISTAR_State*& _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               double        optInPenetration, /* From 0 to TA_REAL_MAX */
                               int           &outInteger );

int TA_CDLMORNINGDOJISTAR_StateFree( TA_CDLMORNINGDOJISTAR_State*& _state );


/*
 * TA_CDLMORNINGSTAR - Morning Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLMORNINGSTAR( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLMORNINGSTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLMORNINGSTAR_State { int memory_size;
int current_idx;                                                                const double inOpen[];
                                                                const double inHigh[];
                                                                const double inLow[];
                                                                const double inClose[];
                                                                double        optInPenetration; /* From 0 to TA_REAL_MAX */
}


int TA_CDLMORNINGSTAR_StateInit( TA_CDLMORNINGSTAR_State*& _state,
                               double        optInPenetration );  /* From 0 to TA_REAL_MAX */


int TA_CDLMORNINGSTAR_State( TA_CDLMORNINGSTAR_State*& _state,
                           const double inOpen,
                           const double inHigh,
                           const double inLow,
                           const double inClose,
                           double        optInPenetration, /* From 0 to TA_REAL_MAX */
                           int           &outInteger );

int TA_CDLMORNINGSTAR_StateFree( TA_CDLMORNINGSTAR_State*& _state );


/*
 * TA_CDLONNECK - On-Neck Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLONNECK( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDLONNECK_Lookback( void );


struct TA_CDLONNECK_State { int memory_size;
int current_idx;                                                           const double inOpen[];
                                                           const double inHigh[];
                                                           const double inLow[];
                                                           const double inClose[];
}


int TA_CDLONNECK_StateInit( TA_CDLONNECK_State*& _state );


int TA_CDLONNECK_State( TA_CDLONNECK_State*& _state,
                      const double inOpen,
                      const double inHigh,
                      const double inLow,
                      const double inClose,
                      int           &outInteger );

int TA_CDLONNECK_StateFree( TA_CDLONNECK_State*& _state );


/*
 * TA_CDLPIERCING - Piercing Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLPIERCING( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLPIERCING_Lookback( void );


struct TA_CDLPIERCING_State { int memory_size;
int current_idx;                                                             const double inOpen[];
                                                             const double inHigh[];
                                                             const double inLow[];
                                                             const double inClose[];
}


int TA_CDLPIERCING_StateInit( TA_CDLPIERCING_State*& _state );


int TA_CDLPIERCING_State( TA_CDLPIERCING_State*& _state,
                        const double inOpen,
                        const double inHigh,
                        const double inLow,
                        const double inClose,
                        int           &outInteger );

int TA_CDLPIERCING_StateFree( TA_CDLPIERCING_State*& _state );


/*
 * TA_CDLRICKSHAWMAN - Rickshaw Man
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLRICKSHAWMAN( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLRICKSHAWMAN_Lookback( void );


struct TA_CDLRICKSHAWMAN_State { int memory_size;
int current_idx;                                                                const double inOpen[];
                                                                const double inHigh[];
                                                                const double inLow[];
                                                                const double inClose[];
}


int TA_CDLRICKSHAWMAN_StateInit( TA_CDLRICKSHAWMAN_State*& _state );


int TA_CDLRICKSHAWMAN_State( TA_CDLRICKSHAWMAN_State*& _state,
                           const double inOpen,
                           const double inHigh,
                           const double inLow,
                           const double inClose,
                           int           &outInteger );

int TA_CDLRICKSHAWMAN_StateFree( TA_CDLRICKSHAWMAN_State*& _state );


/*
 * TA_CDLRISEFALL3METHODS - Rising/Falling Three Methods
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLRISEFALL3METHODS( int           START_IDX,
                                   int           END_IDX,
                                   const double *IN_ARRAY /* inOpen */,
                                   const double *IN_ARRAY /* inHigh */,
                                   const double *IN_ARRAY /* inLow */,
                                   const double *IN_ARRAY /* inClose */,
                                   int          *BEG_IDX,
                                   int          *OUT_SIZE,
                                   int          *OUT_ARRAY /* outInteger */ );

int TA_CDLRISEFALL3METHODS_Lookback( void );


struct TA_CDLRISEFALL3METHODS_State { int memory_size;
int current_idx;                                                                     const double inOpen[];
                                                                     const double inHigh[];
                                                                     const double inLow[];
                                                                     const double inClose[];
}


int TA_CDLRISEFALL3METHODS_StateInit( TA_CDLRISEFALL3METHODS_State*& _state );


int TA_CDLRISEFALL3METHODS_State( TA_CDLRISEFALL3METHODS_State*& _state,
                                const double inOpen,
                                const double inHigh,
                                const double inLow,
                                const double inClose,
                                int           &outInteger );

int TA_CDLRISEFALL3METHODS_StateFree( TA_CDLRISEFALL3METHODS_State*& _state );


/*
 * TA_CDLSEPARATINGLINES - Separating Lines
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSEPARATINGLINES( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSEPARATINGLINES_Lookback( void );


struct TA_CDLSEPARATINGLINES_State { int memory_size;
int current_idx;                                                                    const double inOpen[];
                                                                    const double inHigh[];
                                                                    const double inLow[];
                                                                    const double inClose[];
}


int TA_CDLSEPARATINGLINES_StateInit( TA_CDLSEPARATINGLINES_State*& _state );


int TA_CDLSEPARATINGLINES_State( TA_CDLSEPARATINGLINES_State*& _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           &outInteger );

int TA_CDLSEPARATINGLINES_StateFree( TA_CDLSEPARATINGLINES_State*& _state );


/*
 * TA_CDLSHOOTINGSTAR - Shooting Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSHOOTINGSTAR( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inOpen */,
                               const double *IN_ARRAY /* inHigh */,
                               const double *IN_ARRAY /* inLow */,
                               const double *IN_ARRAY /* inClose */,
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSHOOTINGSTAR_Lookback( void );


struct TA_CDLSHOOTINGSTAR_State { int memory_size;
int current_idx;                                                                 const double inOpen[];
                                                                 const double inHigh[];
                                                                 const double inLow[];
                                                                 const double inClose[];
}


int TA_CDLSHOOTINGSTAR_StateInit( TA_CDLSHOOTINGSTAR_State*& _state );


int TA_CDLSHOOTINGSTAR_State( TA_CDLSHOOTINGSTAR_State*& _state,
                            const double inOpen,
                            const double inHigh,
                            const double inLow,
                            const double inClose,
                            int           &outInteger );

int TA_CDLSHOOTINGSTAR_StateFree( TA_CDLSHOOTINGSTAR_State*& _state );


/*
 * TA_CDLSHORTLINE - Short Line Candle
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSHORTLINE( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inOpen */,
                            const double *IN_ARRAY /* inHigh */,
                            const double *IN_ARRAY /* inLow */,
                            const double *IN_ARRAY /* inClose */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSHORTLINE_Lookback( void );


struct TA_CDLSHORTLINE_State { int memory_size;
int current_idx;                                                              const double inOpen[];
                                                              const double inHigh[];
                                                              const double inLow[];
                                                              const double inClose[];
}


int TA_CDLSHORTLINE_StateInit( TA_CDLSHORTLINE_State*& _state );


int TA_CDLSHORTLINE_State( TA_CDLSHORTLINE_State*& _state,
                         const double inOpen,
                         const double inHigh,
                         const double inLow,
                         const double inClose,
                         int           &outInteger );

int TA_CDLSHORTLINE_StateFree( TA_CDLSHORTLINE_State*& _state );


/*
 * TA_CDLSPINNINGTOP - Spinning Top
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSPINNINGTOP( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSPINNINGTOP_Lookback( void );


struct TA_CDLSPINNINGTOP_State { int memory_size;
int current_idx;                                                                const double inOpen[];
                                                                const double inHigh[];
                                                                const double inLow[];
                                                                const double inClose[];
}


int TA_CDLSPINNINGTOP_StateInit( TA_CDLSPINNINGTOP_State*& _state );


int TA_CDLSPINNINGTOP_State( TA_CDLSPINNINGTOP_State*& _state,
                           const double inOpen,
                           const double inHigh,
                           const double inLow,
                           const double inClose,
                           int           &outInteger );

int TA_CDLSPINNINGTOP_StateFree( TA_CDLSPINNINGTOP_State*& _state );


/*
 * TA_CDLSTALLEDPATTERN - Stalled Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSTALLEDPATTERN( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSTALLEDPATTERN_Lookback( void );


struct TA_CDLSTALLEDPATTERN_State { int memory_size;
int current_idx;                                                                   const double inOpen[];
                                                                   const double inHigh[];
                                                                   const double inLow[];
                                                                   const double inClose[];
}


int TA_CDLSTALLEDPATTERN_StateInit( TA_CDLSTALLEDPATTERN_State*& _state );


int TA_CDLSTALLEDPATTERN_State( TA_CDLSTALLEDPATTERN_State*& _state,
                              const double inOpen,
                              const double inHigh,
                              const double inLow,
                              const double inClose,
                              int           &outInteger );

int TA_CDLSTALLEDPATTERN_StateFree( TA_CDLSTALLEDPATTERN_State*& _state );


/*
 * TA_CDLSTICKSANDWICH - Stick Sandwich
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSTICKSANDWICH( int           START_IDX,
                                int           END_IDX,
                                const double *IN_ARRAY /* inOpen */,
                                const double *IN_ARRAY /* inHigh */,
                                const double *IN_ARRAY /* inLow */,
                                const double *IN_ARRAY /* inClose */,
                                int          *BEG_IDX,
                                int          *OUT_SIZE,
                                int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSTICKSANDWICH_Lookback( void );


struct TA_CDLSTICKSANDWICH_State { int memory_size;
int current_idx;                                                                  const double inOpen[];
                                                                  const double inHigh[];
                                                                  const double inLow[];
                                                                  const double inClose[];
}


int TA_CDLSTICKSANDWICH_StateInit( TA_CDLSTICKSANDWICH_State*& _state );


int TA_CDLSTICKSANDWICH_State( TA_CDLSTICKSANDWICH_State*& _state,
                             const double inOpen,
                             const double inHigh,
                             const double inLow,
                             const double inClose,
                             int           &outInteger );

int TA_CDLSTICKSANDWICH_StateFree( TA_CDLSTICKSANDWICH_State*& _state );


/*
 * TA_CDLTAKURI - Takuri (Dragonfly Doji with very long lower shadow)
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLTAKURI( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDLTAKURI_Lookback( void );


struct TA_CDLTAKURI_State { int memory_size;
int current_idx;                                                           const double inOpen[];
                                                           const double inHigh[];
                                                           const double inLow[];
                                                           const double inClose[];
}


int TA_CDLTAKURI_StateInit( TA_CDLTAKURI_State*& _state );


int TA_CDLTAKURI_State( TA_CDLTAKURI_State*& _state,
                      const double inOpen,
                      const double inHigh,
                      const double inLow,
                      const double inClose,
                      int           &outInteger );

int TA_CDLTAKURI_StateFree( TA_CDLTAKURI_State*& _state );


/*
 * TA_CDLTASUKIGAP - Tasuki Gap
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLTASUKIGAP( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inOpen */,
                            const double *IN_ARRAY /* inHigh */,
                            const double *IN_ARRAY /* inLow */,
                            const double *IN_ARRAY /* inClose */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_CDLTASUKIGAP_Lookback( void );


struct TA_CDLTASUKIGAP_State { int memory_size;
int current_idx;                                                              const double inOpen[];
                                                              const double inHigh[];
                                                              const double inLow[];
                                                              const double inClose[];
}


int TA_CDLTASUKIGAP_StateInit( TA_CDLTASUKIGAP_State*& _state );


int TA_CDLTASUKIGAP_State( TA_CDLTASUKIGAP_State*& _state,
                         const double inOpen,
                         const double inHigh,
                         const double inLow,
                         const double inClose,
                         int           &outInteger );

int TA_CDLTASUKIGAP_StateFree( TA_CDLTASUKIGAP_State*& _state );


/*
 * TA_CDLTHRUSTING - Thrusting Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLTHRUSTING( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inOpen */,
                            const double *IN_ARRAY /* inHigh */,
                            const double *IN_ARRAY /* inLow */,
                            const double *IN_ARRAY /* inClose */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_CDLTHRUSTING_Lookback( void );


struct TA_CDLTHRUSTING_State { int memory_size;
int current_idx;                                                              const double inOpen[];
                                                              const double inHigh[];
                                                              const double inLow[];
                                                              const double inClose[];
}


int TA_CDLTHRUSTING_StateInit( TA_CDLTHRUSTING_State*& _state );


int TA_CDLTHRUSTING_State( TA_CDLTHRUSTING_State*& _state,
                         const double inOpen,
                         const double inHigh,
                         const double inLow,
                         const double inClose,
                         int           &outInteger );

int TA_CDLTHRUSTING_StateFree( TA_CDLTHRUSTING_State*& _state );


/*
 * TA_CDLTRISTAR - Tristar Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLTRISTAR( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inOpen */,
                          const double *IN_ARRAY /* inHigh */,
                          const double *IN_ARRAY /* inLow */,
                          const double *IN_ARRAY /* inClose */,
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          int          *OUT_ARRAY /* outInteger */ );

int TA_CDLTRISTAR_Lookback( void );


struct TA_CDLTRISTAR_State { int memory_size;
int current_idx;                                                            const double inOpen[];
                                                            const double inHigh[];
                                                            const double inLow[];
                                                            const double inClose[];
}


int TA_CDLTRISTAR_StateInit( TA_CDLTRISTAR_State*& _state );


int TA_CDLTRISTAR_State( TA_CDLTRISTAR_State*& _state,
                       const double inOpen,
                       const double inHigh,
                       const double inLow,
                       const double inClose,
                       int           &outInteger );

int TA_CDLTRISTAR_StateFree( TA_CDLTRISTAR_State*& _state );


/*
 * TA_CDLUNIQUE3RIVER - Unique 3 River
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLUNIQUE3RIVER( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inOpen */,
                               const double *IN_ARRAY /* inHigh */,
                               const double *IN_ARRAY /* inLow */,
                               const double *IN_ARRAY /* inClose */,
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               int          *OUT_ARRAY /* outInteger */ );

int TA_CDLUNIQUE3RIVER_Lookback( void );


struct TA_CDLUNIQUE3RIVER_State { int memory_size;
int current_idx;                                                                 const double inOpen[];
                                                                 const double inHigh[];
                                                                 const double inLow[];
                                                                 const double inClose[];
}


int TA_CDLUNIQUE3RIVER_StateInit( TA_CDLUNIQUE3RIVER_State*& _state );


int TA_CDLUNIQUE3RIVER_State( TA_CDLUNIQUE3RIVER_State*& _state,
                            const double inOpen,
                            const double inHigh,
                            const double inLow,
                            const double inClose,
                            int           &outInteger );

int TA_CDLUNIQUE3RIVER_StateFree( TA_CDLUNIQUE3RIVER_State*& _state );


/*
 * TA_CDLUPSIDEGAP2CROWS - Upside Gap Two Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLUPSIDEGAP2CROWS( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLUPSIDEGAP2CROWS_Lookback( void );


struct TA_CDLUPSIDEGAP2CROWS_State { int memory_size;
int current_idx;                                                                    const double inOpen[];
                                                                    const double inHigh[];
                                                                    const double inLow[];
                                                                    const double inClose[];
}


int TA_CDLUPSIDEGAP2CROWS_StateInit( TA_CDLUPSIDEGAP2CROWS_State*& _state );


int TA_CDLUPSIDEGAP2CROWS_State( TA_CDLUPSIDEGAP2CROWS_State*& _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           &outInteger );

int TA_CDLUPSIDEGAP2CROWS_StateFree( TA_CDLUPSIDEGAP2CROWS_State*& _state );


/*
 * TA_CDLXSIDEGAP3METHODS - Upside/Downside Gap Three Methods
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLXSIDEGAP3METHODS( int           START_IDX,
                                   int           END_IDX,
                                   const double *IN_ARRAY /* inOpen */,
                                   const double *IN_ARRAY /* inHigh */,
                                   const double *IN_ARRAY /* inLow */,
                                   const double *IN_ARRAY /* inClose */,
                                   int          *BEG_IDX,
                                   int          *OUT_SIZE,
                                   int          *OUT_ARRAY /* outInteger */ );

int TA_CDLXSIDEGAP3METHODS_Lookback( void );


struct TA_CDLXSIDEGAP3METHODS_State { int memory_size;
int current_idx;                                                                     const double inOpen[];
                                                                     const double inHigh[];
                                                                     const double inLow[];
                                                                     const double inClose[];
}


int TA_CDLXSIDEGAP3METHODS_StateInit( TA_CDLXSIDEGAP3METHODS_State*& _state );


int TA_CDLXSIDEGAP3METHODS_State( TA_CDLXSIDEGAP3METHODS_State*& _state,
                                const double inOpen,
                                const double inHigh,
                                const double inLow,
                                const double inClose,
                                int           &outInteger );

int TA_CDLXSIDEGAP3METHODS_StateFree( TA_CDLXSIDEGAP3METHODS_State*& _state );


/*
 * TA_CEIL - Vector Ceil
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_CEIL( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_CEIL_Lookback( void );


struct TA_CEIL_State { int memory_size;
int current_idx;                                                      const double inReal[];
}


int TA_CEIL_StateInit( TA_CEIL_State*& _state );


int TA_CEIL_State( TA_CEIL_State*& _state,
                 const double inReal,
                 double        &outReal );

int TA_CEIL_StateFree( TA_CEIL_State*& _state );


/*
 * TA_CMO - Chande Momentum Oscillator
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_CMO( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_CMO_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_CMO_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_CMO_StateInit( TA_CMO_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_CMO_State( TA_CMO_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_CMO_StateFree( TA_CMO_State*& _state );


/*
 * TA_CORREL - Pearson's Correlation Coefficient (r)
 * 
 * Input  = double, double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_CORREL( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inReal0 */,
                      const double *IN_ARRAY /* inReal1 */,
                      int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_CORREL_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_CORREL_State { int memory_size;
int current_idx;                                                        const double inReal0[];
                                                        const double inReal1[];
                                                        int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_CORREL_StateInit( TA_CORREL_State*& _state,
                       int           optInTimePeriod );  /* From 1 to 100000 */


int TA_CORREL_State( TA_CORREL_State*& _state,
                   const double inReal0,
                   const double inReal1,
                   int           optInTimePeriod, /* From 1 to 100000 */
                   double        &outReal );

int TA_CORREL_StateFree( TA_CORREL_State*& _state );


/*
 * TA_COS - Vector Trigonometric Cos
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_COS( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_COS_Lookback( void );


struct TA_COS_State { int memory_size;
int current_idx;                                                     const double inReal[];
}


int TA_COS_StateInit( TA_COS_State*& _state );


int TA_COS_State( TA_COS_State*& _state,
                const double inReal,
                double        &outReal );

int TA_COS_StateFree( TA_COS_State*& _state );


/*
 * TA_COSH - Vector Trigonometric Cosh
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_COSH( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_COSH_Lookback( void );


struct TA_COSH_State { int memory_size;
int current_idx;                                                      const double inReal[];
}


int TA_COSH_StateInit( TA_COSH_State*& _state );


int TA_COSH_State( TA_COSH_State*& _state,
                 const double inReal,
                 double        &outReal );

int TA_COSH_StateFree( TA_COSH_State*& _state );


/*
 * TA_DEMA - Double Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_DEMA( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_DEMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_DEMA_State { int memory_size;
int current_idx;                                                      const double inReal[];
                                                      int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_DEMA_StateInit( TA_DEMA_State*& _state,
                     int           optInTimePeriod );  /* From 2 to 100000 */


int TA_DEMA_State( TA_DEMA_State*& _state,
                 const double inReal,
                 int           optInTimePeriod, /* From 2 to 100000 */
                 double        &outReal );

int TA_DEMA_StateFree( TA_DEMA_State*& _state );


/*
 * TA_DIV - Vector Arithmetic Div
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_RetCode TA_DIV( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal0 */,
                   const double *IN_ARRAY /* inReal1 */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_DIV_Lookback( void );


struct TA_DIV_State { int memory_size;
int current_idx;                                                     const double inReal0[];
                                                     const double inReal1[];
}


int TA_DIV_StateInit( TA_DIV_State*& _state );


int TA_DIV_State( TA_DIV_State*& _state,
                const double inReal0,
                const double inReal1,
                double        &outReal );

int TA_DIV_StateFree( TA_DIV_State*& _state );


/*
 * TA_DX - Directional Movement Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_DX( int           START_IDX,
                  int           END_IDX,
                  const double *IN_ARRAY /* inHigh */,
                  const double *IN_ARRAY /* inLow */,
                  const double *IN_ARRAY /* inClose */,
                  int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                  int          *BEG_IDX,
                  int          *OUT_SIZE,
                  double       *OUT_ARRAY /* outReal */ );

int TA_DX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_DX_State { int memory_size;
int current_idx;                                                    const double inHigh[];
                                                    const double inLow[];
                                                    const double inClose[];
                                                    int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_DX_StateInit( TA_DX_State*& _state,
                   int           optInTimePeriod );  /* From 2 to 100000 */


int TA_DX_State( TA_DX_State*& _state,
               const double inHigh,
               const double inLow,
               const double inClose,
               int           optInTimePeriod, /* From 2 to 100000 */
               double        &outReal );

int TA_DX_StateFree( TA_DX_State*& _state );


/*
 * TA_EMA - Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_EMA( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_EMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_EMA_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_EMA_StateInit( TA_EMA_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_EMA_State( TA_EMA_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_EMA_StateFree( TA_EMA_State*& _state );


/*
 * TA_EXP - Vector Arithmetic Exp
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_EXP( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_EXP_Lookback( void );


struct TA_EXP_State { int memory_size;
int current_idx;                                                     const double inReal[];
}


int TA_EXP_StateInit( TA_EXP_State*& _state );


int TA_EXP_State( TA_EXP_State*& _state,
                const double inReal,
                double        &outReal );

int TA_EXP_StateFree( TA_EXP_State*& _state );


/*
 * TA_FLOOR - Vector Floor
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_FLOOR( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inReal */,
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outReal */ );

int TA_FLOOR_Lookback( void );


struct TA_FLOOR_State { int memory_size;
int current_idx;                                                       const double inReal[];
}


int TA_FLOOR_StateInit( TA_FLOOR_State*& _state );


int TA_FLOOR_State( TA_FLOOR_State*& _state,
                  const double inReal,
                  double        &outReal );

int TA_FLOOR_StateFree( TA_FLOOR_State*& _state );


/*
 * TA_HT_DCPERIOD - Hilbert Transform - Dominant Cycle Period
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_HT_DCPERIOD( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inReal */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           double       *OUT_ARRAY /* outReal */ );

int TA_HT_DCPERIOD_Lookback( void );


struct TA_HT_DCPERIOD_State { int memory_size;
int current_idx;                                                             const double inReal[];
}


int TA_HT_DCPERIOD_StateInit( TA_HT_DCPERIOD_State*& _state );


int TA_HT_DCPERIOD_State( TA_HT_DCPERIOD_State*& _state,
                        const double inReal,
                        double        &outReal );

int TA_HT_DCPERIOD_StateFree( TA_HT_DCPERIOD_State*& _state );


/*
 * TA_HT_DCPHASE - Hilbert Transform - Dominant Cycle Phase
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_HT_DCPHASE( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inReal */,
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          double       *OUT_ARRAY /* outReal */ );

int TA_HT_DCPHASE_Lookback( void );


struct TA_HT_DCPHASE_State { int memory_size;
int current_idx;                                                            const double inReal[];
}


int TA_HT_DCPHASE_StateInit( TA_HT_DCPHASE_State*& _state );


int TA_HT_DCPHASE_State( TA_HT_DCPHASE_State*& _state,
                       const double inReal,
                       double        &outReal );

int TA_HT_DCPHASE_StateFree( TA_HT_DCPHASE_State*& _state );


/*
 * TA_HT_PHASOR - Hilbert Transform - Phasor Components
 * 
 * Input  = double
 * Output = double, double
 * 
 */
TA_RetCode TA_HT_PHASOR( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inReal */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         double       *OUT_ARRAY /* outInPhase */,
                         double       *OUT_ARRAY /* outQuadrature */ );

int TA_HT_PHASOR_Lookback( void );


struct TA_HT_PHASOR_State { int memory_size;
int current_idx;                                                           const double inReal[];
}


int TA_HT_PHASOR_StateInit( TA_HT_PHASOR_State*& _state );


int TA_HT_PHASOR_State( TA_HT_PHASOR_State*& _state,
                      const double inReal,
                      double        &outInPhase,
                      double        &outQuadrature );

int TA_HT_PHASOR_StateFree( TA_HT_PHASOR_State*& _state );


/*
 * TA_HT_SINE - Hilbert Transform - SineWave
 * 
 * Input  = double
 * Output = double, double
 * 
 */
TA_RetCode TA_HT_SINE( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inReal */,
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outSine */,
                       double       *OUT_ARRAY /* outLeadSine */ );

int TA_HT_SINE_Lookback( void );


struct TA_HT_SINE_State { int memory_size;
int current_idx;                                                         const double inReal[];
}


int TA_HT_SINE_StateInit( TA_HT_SINE_State*& _state );


int TA_HT_SINE_State( TA_HT_SINE_State*& _state,
                    const double inReal,
                    double        &outSine,
                    double        &outLeadSine );

int TA_HT_SINE_StateFree( TA_HT_SINE_State*& _state );


/*
 * TA_HT_TRENDLINE - Hilbert Transform - Instantaneous Trendline
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_HT_TRENDLINE( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inReal */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            double       *OUT_ARRAY /* outReal */ );

int TA_HT_TRENDLINE_Lookback( void );


struct TA_HT_TRENDLINE_State { int memory_size;
int current_idx;                                                              const double inReal[];
}


int TA_HT_TRENDLINE_StateInit( TA_HT_TRENDLINE_State*& _state );


int TA_HT_TRENDLINE_State( TA_HT_TRENDLINE_State*& _state,
                         const double inReal,
                         double        &outReal );

int TA_HT_TRENDLINE_StateFree( TA_HT_TRENDLINE_State*& _state );


/*
 * TA_HT_TRENDMODE - Hilbert Transform - Trend vs Cycle Mode
 * 
 * Input  = double
 * Output = int
 * 
 */
TA_RetCode TA_HT_TRENDMODE( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inReal */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_HT_TRENDMODE_Lookback( void );


struct TA_HT_TRENDMODE_State { int memory_size;
int current_idx;                                                              const double inReal[];
}


int TA_HT_TRENDMODE_StateInit( TA_HT_TRENDMODE_State*& _state );


int TA_HT_TRENDMODE_State( TA_HT_TRENDMODE_State*& _state,
                         const double inReal,
                         int           &outInteger );

int TA_HT_TRENDMODE_StateFree( TA_HT_TRENDMODE_State*& _state );


/*
 * TA_IMI - Intraday Momentum Index
 * 
 * Input  = Open, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_IMI( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inOpen */,
                   const double *IN_ARRAY /* inClose */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_IMI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_IMI_State { int memory_size;
int current_idx;                                                     const double inOpen[];
                                                     const double inClose[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_IMI_StateInit( TA_IMI_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_IMI_State( TA_IMI_State*& _state,
                const double inOpen,
                const double inClose,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_IMI_StateFree( TA_IMI_State*& _state );


/*
 * TA_KAMA - Kaufman Adaptive Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_KAMA( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_KAMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_KAMA_State { int memory_size;
int current_idx;                                                      const double inReal[];
                                                      int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_KAMA_StateInit( TA_KAMA_State*& _state,
                     int           optInTimePeriod );  /* From 2 to 100000 */


int TA_KAMA_State( TA_KAMA_State*& _state,
                 const double inReal,
                 int           optInTimePeriod, /* From 2 to 100000 */
                 double        &outReal );

int TA_KAMA_StateFree( TA_KAMA_State*& _state );


/*
 * TA_LINEARREG - Linear Regression
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inReal */,
                         int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         double       *OUT_ARRAY /* outReal */ );

int TA_LINEARREG_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_LINEARREG_State { int memory_size;
int current_idx;                                                           const double inReal[];
                                                           int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_LINEARREG_StateInit( TA_LINEARREG_State*& _state,
                          int           optInTimePeriod );  /* From 2 to 100000 */


int TA_LINEARREG_State( TA_LINEARREG_State*& _state,
                      const double inReal,
                      int           optInTimePeriod, /* From 2 to 100000 */
                      double        &outReal );

int TA_LINEARREG_StateFree( TA_LINEARREG_State*& _state );


/*
 * TA_LINEARREG_ANGLE - Linear Regression Angle
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG_ANGLE( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inReal */,
                               int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               double       *OUT_ARRAY /* outReal */ );

int TA_LINEARREG_ANGLE_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_LINEARREG_ANGLE_State { int memory_size;
int current_idx;                                                                 const double inReal[];
                                                                 int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_LINEARREG_ANGLE_StateInit( TA_LINEARREG_ANGLE_State*& _state,
                                int           optInTimePeriod );  /* From 2 to 100000 */


int TA_LINEARREG_ANGLE_State( TA_LINEARREG_ANGLE_State*& _state,
                            const double inReal,
                            int           optInTimePeriod, /* From 2 to 100000 */
                            double        &outReal );

int TA_LINEARREG_ANGLE_StateFree( TA_LINEARREG_ANGLE_State*& _state );


/*
 * TA_LINEARREG_INTERCEPT - Linear Regression Intercept
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG_INTERCEPT( int           START_IDX,
                                   int           END_IDX,
                                   const double *IN_ARRAY /* inReal */,
                                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                                   int          *BEG_IDX,
                                   int          *OUT_SIZE,
                                   double       *OUT_ARRAY /* outReal */ );

int TA_LINEARREG_INTERCEPT_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_LINEARREG_INTERCEPT_State { int memory_size;
int current_idx;                                                                     const double inReal[];
                                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_LINEARREG_INTERCEPT_StateInit( TA_LINEARREG_INTERCEPT_State*& _state,
                                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_LINEARREG_INTERCEPT_State( TA_LINEARREG_INTERCEPT_State*& _state,
                                const double inReal,
                                int           optInTimePeriod, /* From 2 to 100000 */
                                double        &outReal );

int TA_LINEARREG_INTERCEPT_StateFree( TA_LINEARREG_INTERCEPT_State*& _state );


/*
 * TA_LINEARREG_SLOPE - Linear Regression Slope
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG_SLOPE( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inReal */,
                               int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               double       *OUT_ARRAY /* outReal */ );

int TA_LINEARREG_SLOPE_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_LINEARREG_SLOPE_State { int memory_size;
int current_idx;                                                                 const double inReal[];
                                                                 int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_LINEARREG_SLOPE_StateInit( TA_LINEARREG_SLOPE_State*& _state,
                                int           optInTimePeriod );  /* From 2 to 100000 */


int TA_LINEARREG_SLOPE_State( TA_LINEARREG_SLOPE_State*& _state,
                            const double inReal,
                            int           optInTimePeriod, /* From 2 to 100000 */
                            double        &outReal );

int TA_LINEARREG_SLOPE_StateFree( TA_LINEARREG_SLOPE_State*& _state );


/*
 * TA_LN - Vector Log Natural
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_LN( int           START_IDX,
                  int           END_IDX,
                  const double *IN_ARRAY /* inReal */,
                  int          *BEG_IDX,
                  int          *OUT_SIZE,
                  double       *OUT_ARRAY /* outReal */ );

int TA_LN_Lookback( void );


struct TA_LN_State { int memory_size;
int current_idx;                                                    const double inReal[];
}


int TA_LN_StateInit( TA_LN_State*& _state );


int TA_LN_State( TA_LN_State*& _state,
               const double inReal,
               double        &outReal );

int TA_LN_StateFree( TA_LN_State*& _state );


/*
 * TA_LOG10 - Vector Log10
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_LOG10( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inReal */,
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outReal */ );

int TA_LOG10_Lookback( void );


struct TA_LOG10_State { int memory_size;
int current_idx;                                                       const double inReal[];
}


int TA_LOG10_StateInit( TA_LOG10_State*& _state );


int TA_LOG10_State( TA_LOG10_State*& _state,
                  const double inReal,
                  double        &outReal );

int TA_LOG10_StateFree( TA_LOG10_State*& _state );


/*
 * TA_MA - Moving average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_MA( int           START_IDX,
                  int           END_IDX,
                  const double *IN_ARRAY /* inReal */,
                  int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                  TA_MAType     OPT_MATYPE /* optInMAType */,                  int          *BEG_IDX,
                  int          *OUT_SIZE,
                  double       *OUT_ARRAY /* outReal */ );

int TA_MA_Lookback( int           optInTimePeriod, /* From 1 to 100000 */
                  TA_MAType     optInMAType ); 

struct TA_MA_State { int memory_size;
int current_idx;                                                    const double inReal[];
                                                    int           optInTimePeriod; /* From 1 to 100000 */
                                                    TA_MAType     optInMAType;}


int TA_MA_StateInit( TA_MA_State*& _state,
                   int           optInTimePeriod, /* From 1 to 100000 */
                   TA_MAType     optInMAType ); 

int TA_MA_State( TA_MA_State*& _state,
               const double inReal,
               int           optInTimePeriod, /* From 1 to 100000 */
               TA_MAType     optInMAType,               double        &outReal );

int TA_MA_StateFree( TA_MA_State*& _state );


/*
 * TA_MACD - Moving Average Convergence/Divergence
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInSignalPeriod:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * 
 */
TA_RetCode TA_MACD( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInFastPeriod */, /* From 2 to 100000 */
                    int           OPT_INT /* optInSlowPeriod */, /* From 2 to 100000 */
                    int           OPT_INT /* optInSignalPeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outMACD */,
                    double       *OUT_ARRAY /* outMACDSignal */,
                    double       *OUT_ARRAY /* outMACDHist */ );

int TA_MACD_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                    int           optInSlowPeriod, /* From 2 to 100000 */
                    int           optInSignalPeriod );  /* From 1 to 100000 */


struct TA_MACD_State { int memory_size;
int current_idx;                                                      const double inReal[];
                                                      int           optInFastPeriod; /* From 2 to 100000 */
                                                      int           optInSlowPeriod; /* From 2 to 100000 */
                                                      int           optInSignalPeriod; /* From 1 to 100000 */
}


int TA_MACD_StateInit( TA_MACD_State*& _state,
                     int           optInFastPeriod, /* From 2 to 100000 */
                     int           optInSlowPeriod, /* From 2 to 100000 */
                     int           optInSignalPeriod );  /* From 1 to 100000 */


int TA_MACD_State( TA_MACD_State*& _state,
                 const double inReal,
                 int           optInFastPeriod, /* From 2 to 100000 */
                 int           optInSlowPeriod, /* From 2 to 100000 */
                 int           optInSignalPeriod, /* From 1 to 100000 */
                 double        &outMACD,
                 double        &outMACDSignal,
                 double        &outMACDHist );

int TA_MACD_StateFree( TA_MACD_State*& _state );


/*
 * TA_MACDEXT - MACD with controllable MA type
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInFastMAType:
 *    Type of Moving Average for fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInSlowMAType:
 *    Type of Moving Average for slow MA
 * 
 * optInSignalPeriod:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * optInSignalMAType:
 *    Type of Moving Average for signal line
 * 
 * 
 */
TA_RetCode TA_MACDEXT( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inReal */,
                       int           OPT_INT /* optInFastPeriod */, /* From 2 to 100000 */
                       TA_MAType     OPT_MATYPE /* optInFastMAType */,                       int           OPT_INT /* optInSlowPeriod */, /* From 2 to 100000 */
                       TA_MAType     OPT_MATYPE /* optInSlowMAType */,                       int           OPT_INT /* optInSignalPeriod */, /* From 1 to 100000 */
                       TA_MAType     OPT_MATYPE /* optInSignalMAType */,                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outMACD */,
                       double       *OUT_ARRAY /* outMACDSignal */,
                       double       *OUT_ARRAY /* outMACDHist */ );

int TA_MACDEXT_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                       TA_MAType     optInFastMAType,                       int           optInSlowPeriod, /* From 2 to 100000 */
                       TA_MAType     optInSlowMAType,                       int           optInSignalPeriod, /* From 1 to 100000 */
                       TA_MAType     optInSignalMAType ); 

struct TA_MACDEXT_State { int memory_size;
int current_idx;                                                         const double inReal[];
                                                         int           optInFastPeriod; /* From 2 to 100000 */
                                                         TA_MAType     optInFastMAType;                                                         int           optInSlowPeriod; /* From 2 to 100000 */
                                                         TA_MAType     optInSlowMAType;                                                         int           optInSignalPeriod; /* From 1 to 100000 */
                                                         TA_MAType     optInSignalMAType;}


int TA_MACDEXT_StateInit( TA_MACDEXT_State*& _state,
                        int           optInFastPeriod, /* From 2 to 100000 */
                        TA_MAType     optInFastMAType,                        int           optInSlowPeriod, /* From 2 to 100000 */
                        TA_MAType     optInSlowMAType,                        int           optInSignalPeriod, /* From 1 to 100000 */
                        TA_MAType     optInSignalMAType ); 

int TA_MACDEXT_State( TA_MACDEXT_State*& _state,
                    const double inReal,
                    int           optInFastPeriod, /* From 2 to 100000 */
                    TA_MAType     optInFastMAType,                    int           optInSlowPeriod, /* From 2 to 100000 */
                    TA_MAType     optInSlowMAType,                    int           optInSignalPeriod, /* From 1 to 100000 */
                    TA_MAType     optInSignalMAType,                    double        &outMACD,
                    double        &outMACDSignal,
                    double        &outMACDHist );

int TA_MACDEXT_StateFree( TA_MACDEXT_State*& _state );


/*
 * TA_MACDFIX - Moving Average Convergence/Divergence Fix 12/26
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInSignalPeriod:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * 
 */
TA_RetCode TA_MACDFIX( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inReal */,
                       int           OPT_INT /* optInSignalPeriod */, /* From 1 to 100000 */
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outMACD */,
                       double       *OUT_ARRAY /* outMACDSignal */,
                       double       *OUT_ARRAY /* outMACDHist */ );

int TA_MACDFIX_Lookback( int           optInSignalPeriod );  /* From 1 to 100000 */


struct TA_MACDFIX_State { int memory_size;
int current_idx;                                                         const double inReal[];
                                                         int           optInSignalPeriod; /* From 1 to 100000 */
}


int TA_MACDFIX_StateInit( TA_MACDFIX_State*& _state,
                        int           optInSignalPeriod );  /* From 1 to 100000 */


int TA_MACDFIX_State( TA_MACDFIX_State*& _state,
                    const double inReal,
                    int           optInSignalPeriod, /* From 1 to 100000 */
                    double        &outMACD,
                    double        &outMACDSignal,
                    double        &outMACDHist );

int TA_MACDFIX_StateFree( TA_MACDFIX_State*& _state );


/*
 * TA_MAMA - MESA Adaptive Moving Average
 * 
 * Input  = double
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastLimit:(From 0.01 to 0.99)
 *    Upper limit use in the adaptive algorithm
 * 
 * optInSlowLimit:(From 0.01 to 0.99)
 *    Lower limit use in the adaptive algorithm
 * 
 * 
 */
TA_RetCode TA_MAMA( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    double        OPT_REAL /* optInFastLimit */, /* From 0.01 to 0.99 */
                    double        OPT_REAL /* optInSlowLimit */, /* From 0.01 to 0.99 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outMAMA */,
                    double       *OUT_ARRAY /* outFAMA */ );

int TA_MAMA_Lookback( double        optInFastLimit, /* From 0.01 to 0.99 */
                    double        optInSlowLimit );  /* From 0.01 to 0.99 */


struct TA_MAMA_State { int memory_size;
int current_idx;                                                      const double inReal[];
                                                      double        optInFastLimit; /* From 0.01 to 0.99 */
                                                      double        optInSlowLimit; /* From 0.01 to 0.99 */
}


int TA_MAMA_StateInit( TA_MAMA_State*& _state,
                     double        optInFastLimit, /* From 0.01 to 0.99 */
                     double        optInSlowLimit );  /* From 0.01 to 0.99 */


int TA_MAMA_State( TA_MAMA_State*& _state,
                 const double inReal,
                 double        optInFastLimit, /* From 0.01 to 0.99 */
                 double        optInSlowLimit, /* From 0.01 to 0.99 */
                 double        &outMAMA,
                 double        &outFAMA );

int TA_MAMA_StateFree( TA_MAMA_State*& _state );


/*
 * TA_MAVP - Moving average with variable period
 * 
 * Input  = double, double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInMinPeriod:(From 2 to 100000)
 *    Value less than minimum will be changed to Minimum period
 * 
 * optInMaxPeriod:(From 2 to 100000)
 *    Value higher than maximum will be changed to Maximum period
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_MAVP( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    const double *IN_ARRAY /* inPeriods */,
                    int           OPT_INT /* optInMinPeriod */, /* From 2 to 100000 */
                    int           OPT_INT /* optInMaxPeriod */, /* From 2 to 100000 */
                    TA_MAType     OPT_MATYPE /* optInMAType */,                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_MAVP_Lookback( int           optInMinPeriod, /* From 2 to 100000 */
                    int           optInMaxPeriod, /* From 2 to 100000 */
                    TA_MAType     optInMAType ); 

struct TA_MAVP_State { int memory_size;
int current_idx;                                                      const double inReal[];
                                                      const double inPeriods[];
                                                      int           optInMinPeriod; /* From 2 to 100000 */
                                                      int           optInMaxPeriod; /* From 2 to 100000 */
                                                      TA_MAType     optInMAType;}


int TA_MAVP_StateInit( TA_MAVP_State*& _state,
                     int           optInMinPeriod, /* From 2 to 100000 */
                     int           optInMaxPeriod, /* From 2 to 100000 */
                     TA_MAType     optInMAType ); 

int TA_MAVP_State( TA_MAVP_State*& _state,
                 const double inReal,
                 const double inPeriods,
                 int           optInMinPeriod, /* From 2 to 100000 */
                 int           optInMaxPeriod, /* From 2 to 100000 */
                 TA_MAType     optInMAType,                 double        &outReal );

int TA_MAVP_StateFree( TA_MAVP_State*& _state );


/*
 * TA_MAX - Highest value over a specified period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MAX( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_MAX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MAX_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_MAX_StateInit( TA_MAX_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_MAX_State( TA_MAX_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_MAX_StateFree( TA_MAX_State*& _state );


/*
 * TA_MAXINDEX - Index of highest value over a specified period
 * 
 * Input  = double
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MAXINDEX( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inReal */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        int          *OUT_ARRAY /* outInteger */ );

int TA_MAXINDEX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MAXINDEX_State { int memory_size;
int current_idx;                                                          const double inReal[];
                                                          int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_MAXINDEX_StateInit( TA_MAXINDEX_State*& _state,
                         int           optInTimePeriod );  /* From 2 to 100000 */


int TA_MAXINDEX_State( TA_MAXINDEX_State*& _state,
                     const double inReal,
                     int           optInTimePeriod, /* From 2 to 100000 */
                     int           &outInteger );

int TA_MAXINDEX_StateFree( TA_MAXINDEX_State*& _state );


/*
 * TA_MEDPRICE - Median Price
 * 
 * Input  = High, Low
 * Output = double
 * 
 */
TA_RetCode TA_MEDPRICE( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_MEDPRICE_Lookback( void );


struct TA_MEDPRICE_State { int memory_size;
int current_idx;                                                          const double inHigh[];
                                                          const double inLow[];
}


int TA_MEDPRICE_StateInit( TA_MEDPRICE_State*& _state );


int TA_MEDPRICE_State( TA_MEDPRICE_State*& _state,
                     const double inHigh,
                     const double inLow,
                     double        &outReal );

int TA_MEDPRICE_StateFree( TA_MEDPRICE_State*& _state );


/*
 * TA_MFI - Money Flow Index
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MFI( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   const double *IN_ARRAY /* inClose */,
                   const double *IN_ARRAY /* inVolume */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_MFI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MFI_State { int memory_size;
int current_idx;                                                     const double inHigh[];
                                                     const double inLow[];
                                                     const double inClose[];
                                                     const double inVolume[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_MFI_StateInit( TA_MFI_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_MFI_State( TA_MFI_State*& _state,
                const double inHigh,
                const double inLow,
                const double inClose,
                const double inVolume,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_MFI_StateFree( TA_MFI_State*& _state );


/*
 * TA_MIDPOINT - MidPoint over period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIDPOINT( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inReal */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_MIDPOINT_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MIDPOINT_State { int memory_size;
int current_idx;                                                          const double inReal[];
                                                          int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_MIDPOINT_StateInit( TA_MIDPOINT_State*& _state,
                         int           optInTimePeriod );  /* From 2 to 100000 */


int TA_MIDPOINT_State( TA_MIDPOINT_State*& _state,
                     const double inReal,
                     int           optInTimePeriod, /* From 2 to 100000 */
                     double        &outReal );

int TA_MIDPOINT_StateFree( TA_MIDPOINT_State*& _state );


/*
 * TA_MIDPRICE - Midpoint Price over period
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIDPRICE( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_MIDPRICE_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MIDPRICE_State { int memory_size;
int current_idx;                                                          const double inHigh[];
                                                          const double inLow[];
                                                          int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_MIDPRICE_StateInit( TA_MIDPRICE_State*& _state,
                         int           optInTimePeriod );  /* From 2 to 100000 */


int TA_MIDPRICE_State( TA_MIDPRICE_State*& _state,
                     const double inHigh,
                     const double inLow,
                     int           optInTimePeriod, /* From 2 to 100000 */
                     double        &outReal );

int TA_MIDPRICE_StateFree( TA_MIDPRICE_State*& _state );


/*
 * TA_MIN - Lowest value over a specified period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIN( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_MIN_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MIN_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_MIN_StateInit( TA_MIN_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_MIN_State( TA_MIN_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_MIN_StateFree( TA_MIN_State*& _state );


/*
 * TA_MININDEX - Index of lowest value over a specified period
 * 
 * Input  = double
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MININDEX( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inReal */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        int          *OUT_ARRAY /* outInteger */ );

int TA_MININDEX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MININDEX_State { int memory_size;
int current_idx;                                                          const double inReal[];
                                                          int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_MININDEX_StateInit( TA_MININDEX_State*& _state,
                         int           optInTimePeriod );  /* From 2 to 100000 */


int TA_MININDEX_State( TA_MININDEX_State*& _state,
                     const double inReal,
                     int           optInTimePeriod, /* From 2 to 100000 */
                     int           &outInteger );

int TA_MININDEX_StateFree( TA_MININDEX_State*& _state );


/*
 * TA_MINMAX - Lowest and highest values over a specified period
 * 
 * Input  = double
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINMAX( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inReal */,
                      int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outMin */,
                      double       *OUT_ARRAY /* outMax */ );

int TA_MINMAX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MINMAX_State { int memory_size;
int current_idx;                                                        const double inReal[];
                                                        int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_MINMAX_StateInit( TA_MINMAX_State*& _state,
                       int           optInTimePeriod );  /* From 2 to 100000 */


int TA_MINMAX_State( TA_MINMAX_State*& _state,
                   const double inReal,
                   int           optInTimePeriod, /* From 2 to 100000 */
                   double        &outMin,
                   double        &outMax );

int TA_MINMAX_StateFree( TA_MINMAX_State*& _state );


/*
 * TA_MINMAXINDEX - Indexes of lowest and highest values over a specified period
 * 
 * Input  = double
 * Output = int, int
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINMAXINDEX( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inReal */,
                           int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outMinIdx */,
                           int          *OUT_ARRAY /* outMaxIdx */ );

int TA_MINMAXINDEX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MINMAXINDEX_State { int memory_size;
int current_idx;                                                             const double inReal[];
                                                             int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_MINMAXINDEX_StateInit( TA_MINMAXINDEX_State*& _state,
                            int           optInTimePeriod );  /* From 2 to 100000 */


int TA_MINMAXINDEX_State( TA_MINMAXINDEX_State*& _state,
                        const double inReal,
                        int           optInTimePeriod, /* From 2 to 100000 */
                        int           &outMinIdx,
                        int           &outMaxIdx );

int TA_MINMAXINDEX_StateFree( TA_MINMAXINDEX_State*& _state );


/*
 * TA_MINUS_DI - Minus Directional Indicator
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINUS_DI( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        const double *IN_ARRAY /* inClose */,
                        int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_MINUS_DI_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_MINUS_DI_State { int memory_size;
int current_idx;                                                          const double inHigh[];
                                                          const double inLow[];
                                                          const double inClose[];
                                                          int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_MINUS_DI_StateInit( TA_MINUS_DI_State*& _state,
                         int           optInTimePeriod );  /* From 1 to 100000 */


int TA_MINUS_DI_State( TA_MINUS_DI_State*& _state,
                     const double inHigh,
                     const double inLow,
                     const double inClose,
                     int           optInTimePeriod, /* From 1 to 100000 */
                     double        &outReal );

int TA_MINUS_DI_StateFree( TA_MINUS_DI_State*& _state );


/*
 * TA_MINUS_DM - Minus Directional Movement
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINUS_DM( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_MINUS_DM_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_MINUS_DM_State { int memory_size;
int current_idx;                                                          const double inHigh[];
                                                          const double inLow[];
                                                          int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_MINUS_DM_StateInit( TA_MINUS_DM_State*& _state,
                         int           optInTimePeriod );  /* From 1 to 100000 */


int TA_MINUS_DM_State( TA_MINUS_DM_State*& _state,
                     const double inHigh,
                     const double inLow,
                     int           optInTimePeriod, /* From 1 to 100000 */
                     double        &outReal );

int TA_MINUS_DM_StateFree( TA_MINUS_DM_State*& _state );


/*
 * TA_MOM - Momentum
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MOM( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_MOM_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_MOM_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_MOM_StateInit( TA_MOM_State*& _state,
                    int           optInTimePeriod );  /* From 1 to 100000 */


int TA_MOM_State( TA_MOM_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 1 to 100000 */
                double        &outReal );

int TA_MOM_StateFree( TA_MOM_State*& _state );


/*
 * TA_MULT - Vector Arithmetic Mult
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_RetCode TA_MULT( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal0 */,
                    const double *IN_ARRAY /* inReal1 */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_MULT_Lookback( void );


struct TA_MULT_State { int memory_size;
int current_idx;                                                      const double inReal0[];
                                                      const double inReal1[];
}


int TA_MULT_StateInit( TA_MULT_State*& _state );


int TA_MULT_State( TA_MULT_State*& _state,
                 const double inReal0,
                 const double inReal1,
                 double        &outReal );

int TA_MULT_StateFree( TA_MULT_State*& _state );


/*
 * TA_NATR - Normalized Average True Range
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_NATR( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inHigh */,
                    const double *IN_ARRAY /* inLow */,
                    const double *IN_ARRAY /* inClose */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_NATR_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_NATR_State { int memory_size;
int current_idx;                                                      const double inHigh[];
                                                      const double inLow[];
                                                      const double inClose[];
                                                      int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_NATR_StateInit( TA_NATR_State*& _state,
                     int           optInTimePeriod );  /* From 1 to 100000 */


int TA_NATR_State( TA_NATR_State*& _state,
                 const double inHigh,
                 const double inLow,
                 const double inClose,
                 int           optInTimePeriod, /* From 1 to 100000 */
                 double        &outReal );

int TA_NATR_StateFree( TA_NATR_State*& _state );


/*
 * TA_OBV - On Balance Volume
 * 
 * Input  = double, Volume
 * Output = double
 * 
 */
TA_RetCode TA_OBV( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   const double *IN_ARRAY /* inVolume */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_OBV_Lookback( void );


struct TA_OBV_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     const double inVolume[];
}


int TA_OBV_StateInit( TA_OBV_State*& _state );


int TA_OBV_State( TA_OBV_State*& _state,
                const double inReal,
                const double inVolume,
                double        &outReal );

int TA_OBV_StateFree( TA_OBV_State*& _state );


/*
 * TA_PLUS_DI - Plus Directional Indicator
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_PLUS_DI( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inHigh */,
                       const double *IN_ARRAY /* inLow */,
                       const double *IN_ARRAY /* inClose */,
                       int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outReal */ );

int TA_PLUS_DI_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_PLUS_DI_State { int memory_size;
int current_idx;                                                         const double inHigh[];
                                                         const double inLow[];
                                                         const double inClose[];
                                                         int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_PLUS_DI_StateInit( TA_PLUS_DI_State*& _state,
                        int           optInTimePeriod );  /* From 1 to 100000 */


int TA_PLUS_DI_State( TA_PLUS_DI_State*& _state,
                    const double inHigh,
                    const double inLow,
                    const double inClose,
                    int           optInTimePeriod, /* From 1 to 100000 */
                    double        &outReal );

int TA_PLUS_DI_StateFree( TA_PLUS_DI_State*& _state );


/*
 * TA_PLUS_DM - Plus Directional Movement
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_PLUS_DM( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inHigh */,
                       const double *IN_ARRAY /* inLow */,
                       int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outReal */ );

int TA_PLUS_DM_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_PLUS_DM_State { int memory_size;
int current_idx;                                                         const double inHigh[];
                                                         const double inLow[];
                                                         int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_PLUS_DM_StateInit( TA_PLUS_DM_State*& _state,
                        int           optInTimePeriod );  /* From 1 to 100000 */


int TA_PLUS_DM_State( TA_PLUS_DM_State*& _state,
                    const double inHigh,
                    const double inLow,
                    int           optInTimePeriod, /* From 1 to 100000 */
                    double        &outReal );

int TA_PLUS_DM_StateFree( TA_PLUS_DM_State*& _state );


/*
 * TA_PPO - Percentage Price Oscillator
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_PPO( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInFastPeriod */, /* From 2 to 100000 */
                   int           OPT_INT /* optInSlowPeriod */, /* From 2 to 100000 */
                   TA_MAType     OPT_MATYPE /* optInMAType */,                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_PPO_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                   int           optInSlowPeriod, /* From 2 to 100000 */
                   TA_MAType     optInMAType ); 

struct TA_PPO_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInFastPeriod; /* From 2 to 100000 */
                                                     int           optInSlowPeriod; /* From 2 to 100000 */
                                                     TA_MAType     optInMAType;}


int TA_PPO_StateInit( TA_PPO_State*& _state,
                    int           optInFastPeriod, /* From 2 to 100000 */
                    int           optInSlowPeriod, /* From 2 to 100000 */
                    TA_MAType     optInMAType ); 

int TA_PPO_State( TA_PPO_State*& _state,
                const double inReal,
                int           optInFastPeriod, /* From 2 to 100000 */
                int           optInSlowPeriod, /* From 2 to 100000 */
                TA_MAType     optInMAType,                double        &outReal );

int TA_PPO_StateFree( TA_PPO_State*& _state );


/*
 * TA_ROC - Rate of change : ((price/prevPrice)-1)*100
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROC( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_ROC_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_ROC_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_ROC_StateInit( TA_ROC_State*& _state,
                    int           optInTimePeriod );  /* From 1 to 100000 */


int TA_ROC_State( TA_ROC_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 1 to 100000 */
                double        &outReal );

int TA_ROC_StateFree( TA_ROC_State*& _state );


/*
 * TA_ROCP - Rate of change Percentage: (price-prevPrice)/prevPrice
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCP( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ROCP_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_ROCP_State { int memory_size;
int current_idx;                                                      const double inReal[];
                                                      int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_ROCP_StateInit( TA_ROCP_State*& _state,
                     int           optInTimePeriod );  /* From 1 to 100000 */


int TA_ROCP_State( TA_ROCP_State*& _state,
                 const double inReal,
                 int           optInTimePeriod, /* From 1 to 100000 */
                 double        &outReal );

int TA_ROCP_StateFree( TA_ROCP_State*& _state );


/*
 * TA_ROCR - Rate of change ratio: (price/prevPrice)
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCR( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ROCR_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_ROCR_State { int memory_size;
int current_idx;                                                      const double inReal[];
                                                      int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_ROCR_StateInit( TA_ROCR_State*& _state,
                     int           optInTimePeriod );  /* From 1 to 100000 */


int TA_ROCR_State( TA_ROCR_State*& _state,
                 const double inReal,
                 int           optInTimePeriod, /* From 1 to 100000 */
                 double        &outReal );

int TA_ROCR_StateFree( TA_ROCR_State*& _state );


/*
 * TA_ROCR100 - Rate of change ratio 100 scale: (price/prevPrice)*100
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCR100( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inReal */,
                       int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outReal */ );

int TA_ROCR100_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_ROCR100_State { int memory_size;
int current_idx;                                                         const double inReal[];
                                                         int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_ROCR100_StateInit( TA_ROCR100_State*& _state,
                        int           optInTimePeriod );  /* From 1 to 100000 */


int TA_ROCR100_State( TA_ROCR100_State*& _state,
                    const double inReal,
                    int           optInTimePeriod, /* From 1 to 100000 */
                    double        &outReal );

int TA_ROCR100_StateFree( TA_ROCR100_State*& _state );


/*
 * TA_RSI - Relative Strength Index
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_RSI( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_RSI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_RSI_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_RSI_StateInit( TA_RSI_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_RSI_State( TA_RSI_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_RSI_StateFree( TA_RSI_State*& _state );


/*
 * TA_SAR - Parabolic SAR
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInAcceleration:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor used up to the Maximum value
 * 
 * optInMaximum:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor Maximum value
 * 
 * 
 */
TA_RetCode TA_SAR( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   double        OPT_REAL /* optInAcceleration */, /* From 0 to TA_REAL_MAX */
                   double        OPT_REAL /* optInMaximum */, /* From 0 to TA_REAL_MAX */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_SAR_Lookback( double        optInAcceleration, /* From 0 to TA_REAL_MAX */
                   double        optInMaximum );  /* From 0 to TA_REAL_MAX */


struct TA_SAR_State { int memory_size;
int current_idx;                                                     const double inHigh[];
                                                     const double inLow[];
                                                     double        optInAcceleration; /* From 0 to TA_REAL_MAX */
                                                     double        optInMaximum; /* From 0 to TA_REAL_MAX */
}


int TA_SAR_StateInit( TA_SAR_State*& _state,
                    double        optInAcceleration, /* From 0 to TA_REAL_MAX */
                    double        optInMaximum );  /* From 0 to TA_REAL_MAX */


int TA_SAR_State( TA_SAR_State*& _state,
                const double inHigh,
                const double inLow,
                double        optInAcceleration, /* From 0 to TA_REAL_MAX */
                double        optInMaximum, /* From 0 to TA_REAL_MAX */
                double        &outReal );

int TA_SAR_StateFree( TA_SAR_State*& _state );


/*
 * TA_SAREXT - Parabolic SAR - Extended
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInStartValue:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Start value and direction. 0 for Auto, >0 for Long, <0 for Short
 * 
 * optInOffsetOnReverse:(From 0 to TA_REAL_MAX)
 *    Percent offset added/removed to initial stop on short/long reversal
 * 
 * optInAccelerationInitLong:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor initial value for the Long direction
 * 
 * optInAccelerationLong:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor for the Long direction
 * 
 * optInAccelerationMaxLong:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor maximum value for the Long direction
 * 
 * optInAccelerationInitShort:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor initial value for the Short direction
 * 
 * optInAccelerationShort:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor for the Short direction
 * 
 * optInAccelerationMaxShort:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor maximum value for the Short direction
 * 
 * 
 */
TA_RetCode TA_SAREXT( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inHigh */,
                      const double *IN_ARRAY /* inLow */,
                      double        OPT_REAL /* optInStartValue */, /* From TA_REAL_MIN to TA_REAL_MAX */
                      double        OPT_REAL /* optInOffsetOnReverse */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationInitLong */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationLong */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationMaxLong */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationInitShort */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationShort */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationMaxShort */, /* From 0 to TA_REAL_MAX */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_SAREXT_Lookback( double        optInStartValue, /* From TA_REAL_MIN to TA_REAL_MAX */
                      double        optInOffsetOnReverse, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationInitLong, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationLong, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationMaxLong, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationInitShort, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationShort, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationMaxShort );  /* From 0 to TA_REAL_MAX */


struct TA_SAREXT_State { int memory_size;
int current_idx;                                                        const double inHigh[];
                                                        const double inLow[];
                                                        double        optInStartValue; /* From TA_REAL_MIN to TA_REAL_MAX */
                                                        double        optInOffsetOnReverse; /* From 0 to TA_REAL_MAX */
                                                        double        optInAccelerationInitLong; /* From 0 to TA_REAL_MAX */
                                                        double        optInAccelerationLong; /* From 0 to TA_REAL_MAX */
                                                        double        optInAccelerationMaxLong; /* From 0 to TA_REAL_MAX */
                                                        double        optInAccelerationInitShort; /* From 0 to TA_REAL_MAX */
                                                        double        optInAccelerationShort; /* From 0 to TA_REAL_MAX */
                                                        double        optInAccelerationMaxShort; /* From 0 to TA_REAL_MAX */
}


int TA_SAREXT_StateInit( TA_SAREXT_State*& _state,
                       double        optInStartValue, /* From TA_REAL_MIN to TA_REAL_MAX */
                       double        optInOffsetOnReverse, /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationInitLong, /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationLong, /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationMaxLong, /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationInitShort, /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationShort, /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationMaxShort );  /* From 0 to TA_REAL_MAX */


int TA_SAREXT_State( TA_SAREXT_State*& _state,
                   const double inHigh,
                   const double inLow,
                   double        optInStartValue, /* From TA_REAL_MIN to TA_REAL_MAX */
                   double        optInOffsetOnReverse, /* From 0 to TA_REAL_MAX */
                   double        optInAccelerationInitLong, /* From 0 to TA_REAL_MAX */
                   double        optInAccelerationLong, /* From 0 to TA_REAL_MAX */
                   double        optInAccelerationMaxLong, /* From 0 to TA_REAL_MAX */
                   double        optInAccelerationInitShort, /* From 0 to TA_REAL_MAX */
                   double        optInAccelerationShort, /* From 0 to TA_REAL_MAX */
                   double        optInAccelerationMaxShort, /* From 0 to TA_REAL_MAX */
                   double        &outReal );

int TA_SAREXT_StateFree( TA_SAREXT_State*& _state );


/*
 * TA_SIN - Vector Trigonometric Sin
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_SIN( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_SIN_Lookback( void );


struct TA_SIN_State { int memory_size;
int current_idx;                                                     const double inReal[];
}


int TA_SIN_StateInit( TA_SIN_State*& _state );


int TA_SIN_State( TA_SIN_State*& _state,
                const double inReal,
                double        &outReal );

int TA_SIN_StateFree( TA_SIN_State*& _state );


/*
 * TA_SINH - Vector Trigonometric Sinh
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_SINH( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_SINH_Lookback( void );


struct TA_SINH_State { int memory_size;
int current_idx;                                                      const double inReal[];
}


int TA_SINH_StateInit( TA_SINH_State*& _state );


int TA_SINH_State( TA_SINH_State*& _state,
                 const double inReal,
                 double        &outReal );

int TA_SINH_StateFree( TA_SINH_State*& _state );


/*
 * TA_SMA - Simple Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_SMA( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_SMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_SMA_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_SMA_StateInit( TA_SMA_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_SMA_State( TA_SMA_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_SMA_StateFree( TA_SMA_State*& _state );


/*
 * TA_SQRT - Vector Square Root
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_SQRT( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_SQRT_Lookback( void );


struct TA_SQRT_State { int memory_size;
int current_idx;                                                      const double inReal[];
}


int TA_SQRT_StateInit( TA_SQRT_State*& _state );


int TA_SQRT_State( TA_SQRT_State*& _state,
                 const double inReal,
                 double        &outReal );

int TA_SQRT_StateFree( TA_SQRT_State*& _state );


/*
 * TA_STDDEV - Standard Deviation
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * optInNbDev:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Nb of deviations
 * 
 * 
 */
TA_RetCode TA_STDDEV( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inReal */,
                      int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                      double        OPT_REAL /* optInNbDev */, /* From TA_REAL_MIN to TA_REAL_MAX */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_STDDEV_Lookback( int           optInTimePeriod, /* From 2 to 100000 */
                      double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


struct TA_STDDEV_State { int memory_size;
int current_idx;                                                        const double inReal[];
                                                        int           optInTimePeriod; /* From 2 to 100000 */
                                                        double        optInNbDev; /* From TA_REAL_MIN to TA_REAL_MAX */
}


int TA_STDDEV_StateInit( TA_STDDEV_State*& _state,
                       int           optInTimePeriod, /* From 2 to 100000 */
                       double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


int TA_STDDEV_State( TA_STDDEV_State*& _state,
                   const double inReal,
                   int           optInTimePeriod, /* From 2 to 100000 */
                   double        optInNbDev, /* From TA_REAL_MIN to TA_REAL_MAX */
                   double        &outReal );

int TA_STDDEV_StateFree( TA_STDDEV_State*& _state );


/*
 * TA_STOCH - Stochastic
 * 
 * Input  = High, Low, Close
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastK_Period:(From 1 to 100000)
 *    Time period for building the Fast-K line
 * 
 * optInSlowK_Period:(From 1 to 100000)
 *    Smoothing for making the Slow-K line. Usually set to 3
 * 
 * optInSlowK_MAType:
 *    Type of Moving Average for Slow-K
 * 
 * optInSlowD_Period:(From 1 to 100000)
 *    Smoothing for making the Slow-D line
 * 
 * optInSlowD_MAType:
 *    Type of Moving Average for Slow-D
 * 
 * 
 */
TA_RetCode TA_STOCH( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inHigh */,
                     const double *IN_ARRAY /* inLow */,
                     const double *IN_ARRAY /* inClose */,
                     int           OPT_INT /* optInFastK_Period */, /* From 1 to 100000 */
                     int           OPT_INT /* optInSlowK_Period */, /* From 1 to 100000 */
                     TA_MAType     OPT_MATYPE /* optInSlowK_MAType */,                     int           OPT_INT /* optInSlowD_Period */, /* From 1 to 100000 */
                     TA_MAType     OPT_MATYPE /* optInSlowD_MAType */,                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outSlowK */,
                     double       *OUT_ARRAY /* outSlowD */ );

int TA_STOCH_Lookback( int           optInFastK_Period, /* From 1 to 100000 */
                     int           optInSlowK_Period, /* From 1 to 100000 */
                     TA_MAType     optInSlowK_MAType,                     int           optInSlowD_Period, /* From 1 to 100000 */
                     TA_MAType     optInSlowD_MAType ); 

struct TA_STOCH_State { int memory_size;
int current_idx;                                                       const double inHigh[];
                                                       const double inLow[];
                                                       const double inClose[];
                                                       int           optInFastK_Period; /* From 1 to 100000 */
                                                       int           optInSlowK_Period; /* From 1 to 100000 */
                                                       TA_MAType     optInSlowK_MAType;                                                       int           optInSlowD_Period; /* From 1 to 100000 */
                                                       TA_MAType     optInSlowD_MAType;}


int TA_STOCH_StateInit( TA_STOCH_State*& _state,
                      int           optInFastK_Period, /* From 1 to 100000 */
                      int           optInSlowK_Period, /* From 1 to 100000 */
                      TA_MAType     optInSlowK_MAType,                      int           optInSlowD_Period, /* From 1 to 100000 */
                      TA_MAType     optInSlowD_MAType ); 

int TA_STOCH_State( TA_STOCH_State*& _state,
                  const double inHigh,
                  const double inLow,
                  const double inClose,
                  int           optInFastK_Period, /* From 1 to 100000 */
                  int           optInSlowK_Period, /* From 1 to 100000 */
                  TA_MAType     optInSlowK_MAType,                  int           optInSlowD_Period, /* From 1 to 100000 */
                  TA_MAType     optInSlowD_MAType,                  double        &outSlowK,
                  double        &outSlowD );

int TA_STOCH_StateFree( TA_STOCH_State*& _state );


/*
 * TA_STOCHF - Stochastic Fast
 * 
 * Input  = High, Low, Close
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastK_Period:(From 1 to 100000)
 *    Time period for building the Fast-K line
 * 
 * optInFastD_Period:(From 1 to 100000)
 *    Smoothing for making the Fast-D line. Usually set to 3
 * 
 * optInFastD_MAType:
 *    Type of Moving Average for Fast-D
 * 
 * 
 */
TA_RetCode TA_STOCHF( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inHigh */,
                      const double *IN_ARRAY /* inLow */,
                      const double *IN_ARRAY /* inClose */,
                      int           OPT_INT /* optInFastK_Period */, /* From 1 to 100000 */
                      int           OPT_INT /* optInFastD_Period */, /* From 1 to 100000 */
                      TA_MAType     OPT_MATYPE /* optInFastD_MAType */,                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outFastK */,
                      double       *OUT_ARRAY /* outFastD */ );

int TA_STOCHF_Lookback( int           optInFastK_Period, /* From 1 to 100000 */
                      int           optInFastD_Period, /* From 1 to 100000 */
                      TA_MAType     optInFastD_MAType ); 

struct TA_STOCHF_State { int memory_size;
int current_idx;                                                        const double inHigh[];
                                                        const double inLow[];
                                                        const double inClose[];
                                                        int           optInFastK_Period; /* From 1 to 100000 */
                                                        int           optInFastD_Period; /* From 1 to 100000 */
                                                        TA_MAType     optInFastD_MAType;}


int TA_STOCHF_StateInit( TA_STOCHF_State*& _state,
                       int           optInFastK_Period, /* From 1 to 100000 */
                       int           optInFastD_Period, /* From 1 to 100000 */
                       TA_MAType     optInFastD_MAType ); 

int TA_STOCHF_State( TA_STOCHF_State*& _state,
                   const double inHigh,
                   const double inLow,
                   const double inClose,
                   int           optInFastK_Period, /* From 1 to 100000 */
                   int           optInFastD_Period, /* From 1 to 100000 */
                   TA_MAType     optInFastD_MAType,                   double        &outFastK,
                   double        &outFastD );

int TA_STOCHF_StateFree( TA_STOCHF_State*& _state );


/*
 * TA_STOCHRSI - Stochastic Relative Strength Index
 * 
 * Input  = double
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * optInFastK_Period:(From 1 to 100000)
 *    Time period for building the Fast-K line
 * 
 * optInFastD_Period:(From 1 to 100000)
 *    Smoothing for making the Fast-D line. Usually set to 3
 * 
 * optInFastD_MAType:
 *    Type of Moving Average for Fast-D
 * 
 * 
 */
TA_RetCode TA_STOCHRSI( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inReal */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int           OPT_INT /* optInFastK_Period */, /* From 1 to 100000 */
                        int           OPT_INT /* optInFastD_Period */, /* From 1 to 100000 */
                        TA_MAType     OPT_MATYPE /* optInFastD_MAType */,                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outFastK */,
                        double       *OUT_ARRAY /* outFastD */ );

int TA_STOCHRSI_Lookback( int           optInTimePeriod, /* From 2 to 100000 */
                        int           optInFastK_Period, /* From 1 to 100000 */
                        int           optInFastD_Period, /* From 1 to 100000 */
                        TA_MAType     optInFastD_MAType ); 

struct TA_STOCHRSI_State { int memory_size;
int current_idx;                                                          const double inReal[];
                                                          int           optInTimePeriod; /* From 2 to 100000 */
                                                          int           optInFastK_Period; /* From 1 to 100000 */
                                                          int           optInFastD_Period; /* From 1 to 100000 */
                                                          TA_MAType     optInFastD_MAType;}


int TA_STOCHRSI_StateInit( TA_STOCHRSI_State*& _state,
                         int           optInTimePeriod, /* From 2 to 100000 */
                         int           optInFastK_Period, /* From 1 to 100000 */
                         int           optInFastD_Period, /* From 1 to 100000 */
                         TA_MAType     optInFastD_MAType ); 

int TA_STOCHRSI_State( TA_STOCHRSI_State*& _state,
                     const double inReal,
                     int           optInTimePeriod, /* From 2 to 100000 */
                     int           optInFastK_Period, /* From 1 to 100000 */
                     int           optInFastD_Period, /* From 1 to 100000 */
                     TA_MAType     optInFastD_MAType,                     double        &outFastK,
                     double        &outFastD );

int TA_STOCHRSI_StateFree( TA_STOCHRSI_State*& _state );


/*
 * TA_SUB - Vector Arithmetic Substraction
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_RetCode TA_SUB( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal0 */,
                   const double *IN_ARRAY /* inReal1 */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_SUB_Lookback( void );


struct TA_SUB_State { int memory_size;
int current_idx;                                                     const double inReal0[];
                                                     const double inReal1[];
}


int TA_SUB_StateInit( TA_SUB_State*& _state );


int TA_SUB_State( TA_SUB_State*& _state,
                const double inReal0,
                const double inReal1,
                double        &outReal );

int TA_SUB_StateFree( TA_SUB_State*& _state );


/*
 * TA_SUM - Summation
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_SUM( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_SUM_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_SUM_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_SUM_StateInit( TA_SUM_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_SUM_State( TA_SUM_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_SUM_StateFree( TA_SUM_State*& _state );


/*
 * TA_T3 - Triple Exponential Moving Average (T3)
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * optInVFactor:(From 0 to 1)
 *    Volume Factor
 * 
 * 
 */
TA_RetCode TA_T3( int           START_IDX,
                  int           END_IDX,
                  const double *IN_ARRAY /* inReal */,
                  int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                  double        OPT_REAL /* optInVFactor */, /* From 0 to 1 */
                  int          *BEG_IDX,
                  int          *OUT_SIZE,
                  double       *OUT_ARRAY /* outReal */ );

int TA_T3_Lookback( int           optInTimePeriod, /* From 2 to 100000 */
                  double        optInVFactor );  /* From 0 to 1 */


struct TA_T3_State { int memory_size;
int current_idx;                                                    const double inReal[];
                                                    int           optInTimePeriod; /* From 2 to 100000 */
                                                    double        optInVFactor; /* From 0 to 1 */
}


int TA_T3_StateInit( TA_T3_State*& _state,
                   int           optInTimePeriod, /* From 2 to 100000 */
                   double        optInVFactor );  /* From 0 to 1 */


int TA_T3_State( TA_T3_State*& _state,
               const double inReal,
               int           optInTimePeriod, /* From 2 to 100000 */
               double        optInVFactor, /* From 0 to 1 */
               double        &outReal );

int TA_T3_StateFree( TA_T3_State*& _state );


/*
 * TA_TAN - Vector Trigonometric Tan
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_TAN( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_TAN_Lookback( void );


struct TA_TAN_State { int memory_size;
int current_idx;                                                     const double inReal[];
}


int TA_TAN_StateInit( TA_TAN_State*& _state );


int TA_TAN_State( TA_TAN_State*& _state,
                const double inReal,
                double        &outReal );

int TA_TAN_StateFree( TA_TAN_State*& _state );


/*
 * TA_TANH - Vector Trigonometric Tanh
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_TANH( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_TANH_Lookback( void );


struct TA_TANH_State { int memory_size;
int current_idx;                                                      const double inReal[];
}


int TA_TANH_StateInit( TA_TANH_State*& _state );


int TA_TANH_State( TA_TANH_State*& _state,
                 const double inReal,
                 double        &outReal );

int TA_TANH_StateFree( TA_TANH_State*& _state );


/*
 * TA_TEMA - Triple Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TEMA( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_TEMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_TEMA_State { int memory_size;
int current_idx;                                                      const double inReal[];
                                                      int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_TEMA_StateInit( TA_TEMA_State*& _state,
                     int           optInTimePeriod );  /* From 2 to 100000 */


int TA_TEMA_State( TA_TEMA_State*& _state,
                 const double inReal,
                 int           optInTimePeriod, /* From 2 to 100000 */
                 double        &outReal );

int TA_TEMA_StateFree( TA_TEMA_State*& _state );


/*
 * TA_TRANGE - True Range
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_TRANGE( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inHigh */,
                      const double *IN_ARRAY /* inLow */,
                      const double *IN_ARRAY /* inClose */,
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_TRANGE_Lookback( void );


struct TA_TRANGE_State { int memory_size;
int current_idx;                                                        const double inHigh[];
                                                        const double inLow[];
                                                        const double inClose[];
}


int TA_TRANGE_StateInit( TA_TRANGE_State*& _state );


int TA_TRANGE_State( TA_TRANGE_State*& _state,
                   const double inHigh,
                   const double inLow,
                   const double inClose,
                   double        &outReal );

int TA_TRANGE_StateFree( TA_TRANGE_State*& _state );


/*
 * TA_TRIMA - Triangular Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TRIMA( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inReal */,
                     int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outReal */ );

int TA_TRIMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_TRIMA_State { int memory_size;
int current_idx;                                                       const double inReal[];
                                                       int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_TRIMA_StateInit( TA_TRIMA_State*& _state,
                      int           optInTimePeriod );  /* From 2 to 100000 */


int TA_TRIMA_State( TA_TRIMA_State*& _state,
                  const double inReal,
                  int           optInTimePeriod, /* From 2 to 100000 */
                  double        &outReal );

int TA_TRIMA_StateFree( TA_TRIMA_State*& _state );


/*
 * TA_TRIX - 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TRIX( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_TRIX_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_TRIX_State { int memory_size;
int current_idx;                                                      const double inReal[];
                                                      int           optInTimePeriod; /* From 1 to 100000 */
}


int TA_TRIX_StateInit( TA_TRIX_State*& _state,
                     int           optInTimePeriod );  /* From 1 to 100000 */


int TA_TRIX_State( TA_TRIX_State*& _state,
                 const double inReal,
                 int           optInTimePeriod, /* From 1 to 100000 */
                 double        &outReal );

int TA_TRIX_StateFree( TA_TRIX_State*& _state );


/*
 * TA_TSF - Time Series Forecast
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TSF( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_TSF_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_TSF_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_TSF_StateInit( TA_TSF_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_TSF_State( TA_TSF_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_TSF_StateFree( TA_TSF_State*& _state );


/*
 * TA_TYPPRICE - Typical Price
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_TYPPRICE( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        const double *IN_ARRAY /* inClose */,
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_TYPPRICE_Lookback( void );


struct TA_TYPPRICE_State { int memory_size;
int current_idx;                                                          const double inHigh[];
                                                          const double inLow[];
                                                          const double inClose[];
}


int TA_TYPPRICE_StateInit( TA_TYPPRICE_State*& _state );


int TA_TYPPRICE_State( TA_TYPPRICE_State*& _state,
                     const double inHigh,
                     const double inLow,
                     const double inClose,
                     double        &outReal );

int TA_TYPPRICE_StateFree( TA_TYPPRICE_State*& _state );


/*
 * TA_ULTOSC - Ultimate Oscillator
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod1:(From 1 to 100000)
 *    Number of bars for 1st period.
 * 
 * optInTimePeriod2:(From 1 to 100000)
 *    Number of bars fro 2nd period
 * 
 * optInTimePeriod3:(From 1 to 100000)
 *    Number of bars for 3rd period
 * 
 * 
 */
TA_RetCode TA_ULTOSC( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inHigh */,
                      const double *IN_ARRAY /* inLow */,
                      const double *IN_ARRAY /* inClose */,
                      int           OPT_INT /* optInTimePeriod1 */, /* From 1 to 100000 */
                      int           OPT_INT /* optInTimePeriod2 */, /* From 1 to 100000 */
                      int           OPT_INT /* optInTimePeriod3 */, /* From 1 to 100000 */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_ULTOSC_Lookback( int           optInTimePeriod1, /* From 1 to 100000 */
                      int           optInTimePeriod2, /* From 1 to 100000 */
                      int           optInTimePeriod3 );  /* From 1 to 100000 */


struct TA_ULTOSC_State { int memory_size;
int current_idx;                                                        const double inHigh[];
                                                        const double inLow[];
                                                        const double inClose[];
                                                        int           optInTimePeriod1; /* From 1 to 100000 */
                                                        int           optInTimePeriod2; /* From 1 to 100000 */
                                                        int           optInTimePeriod3; /* From 1 to 100000 */
}


int TA_ULTOSC_StateInit( TA_ULTOSC_State*& _state,
                       int           optInTimePeriod1, /* From 1 to 100000 */
                       int           optInTimePeriod2, /* From 1 to 100000 */
                       int           optInTimePeriod3 );  /* From 1 to 100000 */


int TA_ULTOSC_State( TA_ULTOSC_State*& _state,
                   const double inHigh,
                   const double inLow,
                   const double inClose,
                   int           optInTimePeriod1, /* From 1 to 100000 */
                   int           optInTimePeriod2, /* From 1 to 100000 */
                   int           optInTimePeriod3, /* From 1 to 100000 */
                   double        &outReal );

int TA_ULTOSC_StateFree( TA_ULTOSC_State*& _state );


/*
 * TA_VAR - Variance
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * optInNbDev:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Nb of deviations
 * 
 * 
 */
TA_RetCode TA_VAR( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                   double        OPT_REAL /* optInNbDev */, /* From TA_REAL_MIN to TA_REAL_MAX */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_VAR_Lookback( int           optInTimePeriod, /* From 1 to 100000 */
                   double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


struct TA_VAR_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 1 to 100000 */
                                                     double        optInNbDev; /* From TA_REAL_MIN to TA_REAL_MAX */
}


int TA_VAR_StateInit( TA_VAR_State*& _state,
                    int           optInTimePeriod, /* From 1 to 100000 */
                    double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


int TA_VAR_State( TA_VAR_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 1 to 100000 */
                double        optInNbDev, /* From TA_REAL_MIN to TA_REAL_MAX */
                double        &outReal );

int TA_VAR_StateFree( TA_VAR_State*& _state );


/*
 * TA_WCLPRICE - Weighted Close Price
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_WCLPRICE( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        const double *IN_ARRAY /* inClose */,
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_WCLPRICE_Lookback( void );


struct TA_WCLPRICE_State { int memory_size;
int current_idx;                                                          const double inHigh[];
                                                          const double inLow[];
                                                          const double inClose[];
}


int TA_WCLPRICE_StateInit( TA_WCLPRICE_State*& _state );


int TA_WCLPRICE_State( TA_WCLPRICE_State*& _state,
                     const double inHigh,
                     const double inLow,
                     const double inClose,
                     double        &outReal );

int TA_WCLPRICE_StateFree( TA_WCLPRICE_State*& _state );


/*
 * TA_WILLR - Williams' %R
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_WILLR( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inHigh */,
                     const double *IN_ARRAY /* inLow */,
                     const double *IN_ARRAY /* inClose */,
                     int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outReal */ );

int TA_WILLR_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_WILLR_State { int memory_size;
int current_idx;                                                       const double inHigh[];
                                                       const double inLow[];
                                                       const double inClose[];
                                                       int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_WILLR_StateInit( TA_WILLR_State*& _state,
                      int           optInTimePeriod );  /* From 2 to 100000 */


int TA_WILLR_State( TA_WILLR_State*& _state,
                  const double inHigh,
                  const double inLow,
                  const double inClose,
                  int           optInTimePeriod, /* From 2 to 100000 */
                  double        &outReal );

int TA_WILLR_StateFree( TA_WILLR_State*& _state );


/*
 * TA_WMA - Weighted Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_WMA( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_WMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_WMA_State { int memory_size;
int current_idx;                                                     const double inReal[];
                                                     int           optInTimePeriod; /* From 2 to 100000 */
}


int TA_WMA_StateInit( TA_WMA_State*& _state,
                    int           optInTimePeriod );  /* From 2 to 100000 */


int TA_WMA_State( TA_WMA_State*& _state,
                const double inReal,
                int           optInTimePeriod, /* From 2 to 100000 */
                double        &outReal );

int TA_WMA_StateFree( TA_WMA_State*& _state );


/* Some TA functions takes a certain amount of input data
 * before stabilizing and outputing meaningful data. This is
 * a behavior pertaining to the algo of some TA functions and
 * is not particular to the TA-Lib implementation.
 * TA-Lib allows you to automatically strip off these unstabl
 * data from your output and from any internal processing.
 * (See documentation for more info)
 *
 * Examples:
 *      TA_SetUnstablePeriod( TA_FUNC_UNST_EMA, 30 );
 *           Always strip off 30 price bar for the TA_EMA function.
 *
 *      TA_SetUnstablePeriod( TA_FUNC_UNST_ALL, 30 );
 *           Always strip off 30 price bar from ALL functions
 *           having an unstable period.
 *
 * See ta_defs.h for the enumeration TA_FuncUnstId
 */

TA_RetCode TA_SetUnstablePeriod( TA_FuncUnstId id,
                                 unsigned int  unstablePeriod );

unsigned int TA_GetUnstablePeriod( TA_FuncUnstId id );

/* You can change slightly the behavior of the TA functions
 * by requesting compatibiliy with some existing software.
 *
 * By default, the behavior is as close as the original 
 * author of the TA functions intend it to be.
 *
 * See ta_defs.h for the enumeration TA_Compatibility.
 */
TA_RetCode TA_SetCompatibility( TA_Compatibility value );
TA_Compatibility TA_GetCompatibility( void );

/* Candlesticks struct and functions
 * Because candlestick patterns are subjective, it is necessary 
 * to allow the user to specify what should be the meaning of 
 * 'long body', 'short shadows', etc.
 */

/* Call TA_SetCandleSettings to set that when comparing a candle 
 * basing on settingType it must be compared with the average 
 * of the last avgPeriod candles' rangeType multiplied by factor.
 * This setting is valid until TA_RestoreCandleDefaultSettings is called
 */
TA_RetCode TA_SetCandleSettings( TA_CandleSettingType settingType, 
                                 TA_RangeType rangeType, 
                                 int avgPeriod, 
                                 double factor );

/* Call TA_RestoreCandleDefaultSettings after using custom settings 
 * to restore the default settings for the specified settingType
 */
TA_RetCode TA_RestoreCandleDefaultSettings( TA_CandleSettingType settingType );

/***************
 * End of File *
 ***************/
