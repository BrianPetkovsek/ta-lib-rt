/* TA-LIB Copyright (c) 1999-2008, Mario Fortier
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 *
 * - Neither name of author nor the names of its contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef TA_FUNC_H
#define TA_FUNC_H

#ifndef TA_COMMON_H
   #include "ta_common.h"
#endif

/* This header contains the prototype of all the Technical Analysis
 * function provided by TA-LIB.
 */

/* TA-LIB Developer Note: Do not modify this file, it is automaticaly
 *                        generated by gen_code.
 */
#ifdef __cplusplus
extern "C" {
#endif

#ifndef TA_DEFS_H
   #include "ta_defs.h"
#endif


/*
 * TA_ACCBANDS - Acceleration Bands
 * 
 * Input  = High, Low, Close
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_ACCBANDS( int    startIdx,
                                   int    endIdx,
                                              const double inHigh[],
                                              const double inLow[],
                                              const double inClose[],
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outRealUpperBand[],
                                              double        outRealMiddleBand[],
                                              double        outRealLowerBand[] );

TA_LIB_API TA_RetCode TA_S_ACCBANDS( int    startIdx,
                                     int    endIdx,
                                                const float  inHigh[],
                                                const float  inLow[],
                                                const float  inClose[],
                                                int           optInTimePeriod, /* From 2 to 100000 */
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outRealUpperBand[],
                                                double        outRealMiddleBand[],
                                                double        outRealLowerBand[] );

TA_LIB_API int TA_ACCBANDS_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_ACCBANDS_Data {
                                              const double inHigh;
                                              const double inLow;
                                              const double inClose;
                                              };
TA_LIB_API struct TA_ACCBANDS_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_ACCBANDS_Data* memory;
                                     int           optInTimePeriod; /* From 2 to 100000 */
                                     };


TA_LIB_API int TA_ACCBANDS_StateInit( struct TA_ACCBANDS_State* _state,
                                               int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_ACCBANDS_State( struct TA_ACCBANDS_State* _state,
                                           const double inHigh,
                                           const double inLow,
                                           const double inClose,
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           double        &outRealUpperBand,
                                           double        &outRealMiddleBand,
                                           double        &outRealLowerBand );

TA_LIB_API int TA_ACCBANDS_StateFree( struct TA_ACCBANDS_State* _state );


/*
 * TA_ACOS - Vector Trigonometric ACos
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_ACOS( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ACOS( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_ACOS_Lookback( void );


TA_LIB_API struct TA_ACOS_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_ACOS_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_ACOS_Data* memory;
                                 };


TA_LIB_API int TA_ACOS_StateInit( struct TA_ACOS_State* _state );


TA_LIB_API int TA_ACOS_State( struct TA_ACOS_State* _state,
                                       const double inReal,
                                       double        &outReal );

TA_LIB_API int TA_ACOS_StateFree( struct TA_ACOS_State* _state );


/*
 * TA_AD - Chaikin A/D Line
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_AD( int    startIdx,
                             int    endIdx,
                                        const double inHigh[],
                                        const double inLow[],
                                        const double inClose[],
                                        const double inVolume[],
                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        double        outReal[] );

TA_LIB_API TA_RetCode TA_S_AD( int    startIdx,
                               int    endIdx,
                                          const float  inHigh[],
                                          const float  inLow[],
                                          const float  inClose[],
                                          const float  inVolume[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API int TA_AD_Lookback( void );


TA_LIB_API struct TA_AD_Data {
                                        const double inHigh;
                                        const double inLow;
                                        const double inClose;
                                        const double inVolume;
                                        };
TA_LIB_API struct TA_AD_Struct {
                               int mem_size;
                               int mem_index;
                               struct TA_AD_Data* memory;
                               };


TA_LIB_API int TA_AD_StateInit( struct TA_AD_State* _state );


TA_LIB_API int TA_AD_State( struct TA_AD_State* _state,
                                     const double inHigh,
                                     const double inLow,
                                     const double inClose,
                                     const double inVolume,
                                     double        &outReal );

TA_LIB_API int TA_AD_StateFree( struct TA_AD_State* _state );


/*
 * TA_ADD - Vector Arithmetic Add
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_ADD( int    startIdx,
                              int    endIdx,
                                         const double inReal0[],
                                         const double inReal1[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ADD( int    startIdx,
                                int    endIdx,
                                           const float  inReal0[],
                                           const float  inReal1[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_ADD_Lookback( void );


TA_LIB_API struct TA_ADD_Data {
                                         const double inReal0;
                                         const double inReal1;
                                         };
TA_LIB_API struct TA_ADD_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_ADD_Data* memory;
                                };


TA_LIB_API int TA_ADD_StateInit( struct TA_ADD_State* _state );


TA_LIB_API int TA_ADD_State( struct TA_ADD_State* _state,
                                      const double inReal0,
                                      const double inReal1,
                                      double        &outReal );

TA_LIB_API int TA_ADD_StateFree( struct TA_ADD_State* _state );


/*
 * TA_ADOSC - Chaikin A/D Oscillator
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_ADOSC( int    startIdx,
                                int    endIdx,
                                           const double inHigh[],
                                           const double inLow[],
                                           const double inClose[],
                                           const double inVolume[],
                                           int           optInFastPeriod, /* From 2 to 100000 */
                                           int           optInSlowPeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ADOSC( int    startIdx,
                                  int    endIdx,
                                             const float  inHigh[],
                                             const float  inLow[],
                                             const float  inClose[],
                                             const float  inVolume[],
                                             int           optInFastPeriod, /* From 2 to 100000 */
                                             int           optInSlowPeriod, /* From 2 to 100000 */
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outReal[] );

TA_LIB_API int TA_ADOSC_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                                           int           optInSlowPeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_ADOSC_Data {
                                           const double inHigh;
                                           const double inLow;
                                           const double inClose;
                                           const double inVolume;
                                           };
TA_LIB_API struct TA_ADOSC_Struct {
                                  int mem_size;
                                  int mem_index;
                                  struct TA_ADOSC_Data* memory;
                                  int           optInFastPeriod; /* From 2 to 100000 */
                                  int           optInSlowPeriod; /* From 2 to 100000 */
                                  };


TA_LIB_API int TA_ADOSC_StateInit( struct TA_ADOSC_State* _state,
                                            int           optInFastPeriod, /* From 2 to 100000 */
                                            int           optInSlowPeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_ADOSC_State( struct TA_ADOSC_State* _state,
                                        const double inHigh,
                                        const double inLow,
                                        const double inClose,
                                        const double inVolume,
                                        int           optInFastPeriod, /* From 2 to 100000 */
                                        int           optInSlowPeriod, /* From 2 to 100000 */
                                        double        &outReal );

TA_LIB_API int TA_ADOSC_StateFree( struct TA_ADOSC_State* _state );


/*
 * TA_ADX - Average Directional Movement Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_ADX( int    startIdx,
                              int    endIdx,
                                         const double inHigh[],
                                         const double inLow[],
                                         const double inClose[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ADX( int    startIdx,
                                int    endIdx,
                                           const float  inHigh[],
                                           const float  inLow[],
                                           const float  inClose[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_ADX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_ADX_Data {
                                         const double inHigh;
                                         const double inLow;
                                         const double inClose;
                                         };
TA_LIB_API struct TA_ADX_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_ADX_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_ADX_StateInit( struct TA_ADX_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_ADX_State( struct TA_ADX_State* _state,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_ADX_StateFree( struct TA_ADX_State* _state );


/*
 * TA_ADXR - Average Directional Movement Index Rating
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_ADXR( int    startIdx,
                               int    endIdx,
                                          const double inHigh[],
                                          const double inLow[],
                                          const double inClose[],
                                          int           optInTimePeriod, /* From 2 to 100000 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ADXR( int    startIdx,
                                 int    endIdx,
                                            const float  inHigh[],
                                            const float  inLow[],
                                            const float  inClose[],
                                            int           optInTimePeriod, /* From 2 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_ADXR_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_ADXR_Data {
                                          const double inHigh;
                                          const double inLow;
                                          const double inClose;
                                          };
TA_LIB_API struct TA_ADXR_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_ADXR_Data* memory;
                                 int           optInTimePeriod; /* From 2 to 100000 */
                                 };


TA_LIB_API int TA_ADXR_StateInit( struct TA_ADXR_State* _state,
                                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_ADXR_State( struct TA_ADXR_State* _state,
                                       const double inHigh,
                                       const double inLow,
                                       const double inClose,
                                       int           optInTimePeriod, /* From 2 to 100000 */
                                       double        &outReal );

TA_LIB_API int TA_ADXR_StateFree( struct TA_ADXR_State* _state );


/*
 * TA_APO - Absolute Price Oscillator
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_APO( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInFastPeriod, /* From 2 to 100000 */
                                         int           optInSlowPeriod, /* From 2 to 100000 */
                                         TA_MAType     optInMAType,                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_APO( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInFastPeriod, /* From 2 to 100000 */
                                           int           optInSlowPeriod, /* From 2 to 100000 */
                                           TA_MAType     optInMAType,                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_APO_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                                         int           optInSlowPeriod, /* From 2 to 100000 */
                                         TA_MAType     optInMAType ); 

TA_LIB_API struct TA_APO_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_APO_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_APO_Data* memory;
                                int           optInFastPeriod; /* From 2 to 100000 */
                                int           optInSlowPeriod; /* From 2 to 100000 */
                                TA_MAType     optInMAType;                                };


TA_LIB_API int TA_APO_StateInit( struct TA_APO_State* _state,
                                          int           optInFastPeriod, /* From 2 to 100000 */
                                          int           optInSlowPeriod, /* From 2 to 100000 */
                                          TA_MAType     optInMAType ); 

TA_LIB_API int TA_APO_State( struct TA_APO_State* _state,
                                      const double inReal,
                                      int           optInFastPeriod, /* From 2 to 100000 */
                                      int           optInSlowPeriod, /* From 2 to 100000 */
                                      TA_MAType     optInMAType,                                      double        &outReal );

TA_LIB_API int TA_APO_StateFree( struct TA_APO_State* _state );


/*
 * TA_AROON - Aroon
 * 
 * Input  = High, Low
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_AROON( int    startIdx,
                                int    endIdx,
                                           const double inHigh[],
                                           const double inLow[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outAroonDown[],
                                           double        outAroonUp[] );

TA_LIB_API TA_RetCode TA_S_AROON( int    startIdx,
                                  int    endIdx,
                                             const float  inHigh[],
                                             const float  inLow[],
                                             int           optInTimePeriod, /* From 2 to 100000 */
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outAroonDown[],
                                             double        outAroonUp[] );

TA_LIB_API int TA_AROON_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_AROON_Data {
                                           const double inHigh;
                                           const double inLow;
                                           };
TA_LIB_API struct TA_AROON_Struct {
                                  int mem_size;
                                  int mem_index;
                                  struct TA_AROON_Data* memory;
                                  int           optInTimePeriod; /* From 2 to 100000 */
                                  };


TA_LIB_API int TA_AROON_StateInit( struct TA_AROON_State* _state,
                                            int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_AROON_State( struct TA_AROON_State* _state,
                                        const double inHigh,
                                        const double inLow,
                                        int           optInTimePeriod, /* From 2 to 100000 */
                                        double        &outAroonDown,
                                        double        &outAroonUp );

TA_LIB_API int TA_AROON_StateFree( struct TA_AROON_State* _state );


/*
 * TA_AROONOSC - Aroon Oscillator
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_AROONOSC( int    startIdx,
                                   int    endIdx,
                                              const double inHigh[],
                                              const double inLow[],
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API TA_RetCode TA_S_AROONOSC( int    startIdx,
                                     int    endIdx,
                                                const float  inHigh[],
                                                const float  inLow[],
                                                int           optInTimePeriod, /* From 2 to 100000 */
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outReal[] );

TA_LIB_API int TA_AROONOSC_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_AROONOSC_Data {
                                              const double inHigh;
                                              const double inLow;
                                              };
TA_LIB_API struct TA_AROONOSC_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_AROONOSC_Data* memory;
                                     int           optInTimePeriod; /* From 2 to 100000 */
                                     };


TA_LIB_API int TA_AROONOSC_StateInit( struct TA_AROONOSC_State* _state,
                                               int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_AROONOSC_State( struct TA_AROONOSC_State* _state,
                                           const double inHigh,
                                           const double inLow,
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           double        &outReal );

TA_LIB_API int TA_AROONOSC_StateFree( struct TA_AROONOSC_State* _state );


/*
 * TA_ASIN - Vector Trigonometric ASin
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_ASIN( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ASIN( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_ASIN_Lookback( void );


TA_LIB_API struct TA_ASIN_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_ASIN_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_ASIN_Data* memory;
                                 };


TA_LIB_API int TA_ASIN_StateInit( struct TA_ASIN_State* _state );


TA_LIB_API int TA_ASIN_State( struct TA_ASIN_State* _state,
                                       const double inReal,
                                       double        &outReal );

TA_LIB_API int TA_ASIN_StateFree( struct TA_ASIN_State* _state );


/*
 * TA_ATAN - Vector Trigonometric ATan
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_ATAN( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ATAN( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_ATAN_Lookback( void );


TA_LIB_API struct TA_ATAN_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_ATAN_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_ATAN_Data* memory;
                                 };


TA_LIB_API int TA_ATAN_StateInit( struct TA_ATAN_State* _state );


TA_LIB_API int TA_ATAN_State( struct TA_ATAN_State* _state,
                                       const double inReal,
                                       double        &outReal );

TA_LIB_API int TA_ATAN_StateFree( struct TA_ATAN_State* _state );


/*
 * TA_ATR - Average True Range
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_ATR( int    startIdx,
                              int    endIdx,
                                         const double inHigh[],
                                         const double inLow[],
                                         const double inClose[],
                                         int           optInTimePeriod, /* From 1 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ATR( int    startIdx,
                                int    endIdx,
                                           const float  inHigh[],
                                           const float  inLow[],
                                           const float  inClose[],
                                           int           optInTimePeriod, /* From 1 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_ATR_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_ATR_Data {
                                         const double inHigh;
                                         const double inLow;
                                         const double inClose;
                                         };
TA_LIB_API struct TA_ATR_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_ATR_Data* memory;
                                int           optInTimePeriod; /* From 1 to 100000 */
                                };


TA_LIB_API int TA_ATR_StateInit( struct TA_ATR_State* _state,
                                          int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_ATR_State( struct TA_ATR_State* _state,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      int           optInTimePeriod, /* From 1 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_ATR_StateFree( struct TA_ATR_State* _state );


/*
 * TA_AVGPRICE - Average Price
 * 
 * Input  = Open, High, Low, Close
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_AVGPRICE( int    startIdx,
                                   int    endIdx,
                                              const double inOpen[],
                                              const double inHigh[],
                                              const double inLow[],
                                              const double inClose[],
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API TA_RetCode TA_S_AVGPRICE( int    startIdx,
                                     int    endIdx,
                                                const float  inOpen[],
                                                const float  inHigh[],
                                                const float  inLow[],
                                                const float  inClose[],
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outReal[] );

TA_LIB_API int TA_AVGPRICE_Lookback( void );


TA_LIB_API struct TA_AVGPRICE_Data {
                                              const double inOpen;
                                              const double inHigh;
                                              const double inLow;
                                              const double inClose;
                                              };
TA_LIB_API struct TA_AVGPRICE_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_AVGPRICE_Data* memory;
                                     };


TA_LIB_API int TA_AVGPRICE_StateInit( struct TA_AVGPRICE_State* _state );


TA_LIB_API int TA_AVGPRICE_State( struct TA_AVGPRICE_State* _state,
                                           const double inOpen,
                                           const double inHigh,
                                           const double inLow,
                                           const double inClose,
                                           double        &outReal );

TA_LIB_API int TA_AVGPRICE_StateFree( struct TA_AVGPRICE_State* _state );


/*
 * TA_AVGDEV - Average Deviation
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_AVGDEV( int    startIdx,
                                 int    endIdx,
                                            const double inReal[],
                                            int           optInTimePeriod, /* From 2 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API TA_RetCode TA_S_AVGDEV( int    startIdx,
                                   int    endIdx,
                                              const float  inReal[],
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API int TA_AVGDEV_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_AVGDEV_Data {
                                            const double inReal;
                                            };
TA_LIB_API struct TA_AVGDEV_Struct {
                                   int mem_size;
                                   int mem_index;
                                   struct TA_AVGDEV_Data* memory;
                                   int           optInTimePeriod; /* From 2 to 100000 */
                                   };


TA_LIB_API int TA_AVGDEV_StateInit( struct TA_AVGDEV_State* _state,
                                             int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_AVGDEV_State( struct TA_AVGDEV_State* _state,
                                         const double inReal,
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         double        &outReal );

TA_LIB_API int TA_AVGDEV_StateFree( struct TA_AVGDEV_State* _state );


/*
 * TA_BBANDS - Bollinger Bands
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * optInNbDevUp:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Deviation multiplier for upper band
 * 
 * optInNbDevDn:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Deviation multiplier for lower band
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_BBANDS( int    startIdx,
                                 int    endIdx,
                                            const double inReal[],
                                            int           optInTimePeriod, /* From 2 to 100000 */
                                            double        optInNbDevUp, /* From TA_REAL_MIN to TA_REAL_MAX */
                                            double        optInNbDevDn, /* From TA_REAL_MIN to TA_REAL_MAX */
                                            TA_MAType     optInMAType,                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outRealUpperBand[],
                                            double        outRealMiddleBand[],
                                            double        outRealLowerBand[] );

TA_LIB_API TA_RetCode TA_S_BBANDS( int    startIdx,
                                   int    endIdx,
                                              const float  inReal[],
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              double        optInNbDevUp, /* From TA_REAL_MIN to TA_REAL_MAX */
                                              double        optInNbDevDn, /* From TA_REAL_MIN to TA_REAL_MAX */
                                              TA_MAType     optInMAType,                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outRealUpperBand[],
                                              double        outRealMiddleBand[],
                                              double        outRealLowerBand[] );

TA_LIB_API int TA_BBANDS_Lookback( int           optInTimePeriod, /* From 2 to 100000 */
                                            double        optInNbDevUp, /* From TA_REAL_MIN to TA_REAL_MAX */
                                            double        optInNbDevDn, /* From TA_REAL_MIN to TA_REAL_MAX */
                                            TA_MAType     optInMAType ); 

TA_LIB_API struct TA_BBANDS_Data {
                                            const double inReal;
                                            };
TA_LIB_API struct TA_BBANDS_Struct {
                                   int mem_size;
                                   int mem_index;
                                   struct TA_BBANDS_Data* memory;
                                   int           optInTimePeriod; /* From 2 to 100000 */
                                   double        optInNbDevUp; /* From TA_REAL_MIN to TA_REAL_MAX */
                                   double        optInNbDevDn; /* From TA_REAL_MIN to TA_REAL_MAX */
                                   TA_MAType     optInMAType;                                   };


TA_LIB_API int TA_BBANDS_StateInit( struct TA_BBANDS_State* _state,
                                             int           optInTimePeriod, /* From 2 to 100000 */
                                             double        optInNbDevUp, /* From TA_REAL_MIN to TA_REAL_MAX */
                                             double        optInNbDevDn, /* From TA_REAL_MIN to TA_REAL_MAX */
                                             TA_MAType     optInMAType ); 

TA_LIB_API int TA_BBANDS_State( struct TA_BBANDS_State* _state,
                                         const double inReal,
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         double        optInNbDevUp, /* From TA_REAL_MIN to TA_REAL_MAX */
                                         double        optInNbDevDn, /* From TA_REAL_MIN to TA_REAL_MAX */
                                         TA_MAType     optInMAType,                                         double        &outRealUpperBand,
                                         double        &outRealMiddleBand,
                                         double        &outRealLowerBand );

TA_LIB_API int TA_BBANDS_StateFree( struct TA_BBANDS_State* _state );


/*
 * TA_BETA - Beta
 * 
 * Input  = double, double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_BETA( int    startIdx,
                               int    endIdx,
                                          const double inReal0[],
                                          const double inReal1[],
                                          int           optInTimePeriod, /* From 1 to 100000 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_BETA( int    startIdx,
                                 int    endIdx,
                                            const float  inReal0[],
                                            const float  inReal1[],
                                            int           optInTimePeriod, /* From 1 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_BETA_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_BETA_Data {
                                          const double inReal0;
                                          const double inReal1;
                                          };
TA_LIB_API struct TA_BETA_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_BETA_Data* memory;
                                 int           optInTimePeriod; /* From 1 to 100000 */
                                 };


TA_LIB_API int TA_BETA_StateInit( struct TA_BETA_State* _state,
                                           int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_BETA_State( struct TA_BETA_State* _state,
                                       const double inReal0,
                                       const double inReal1,
                                       int           optInTimePeriod, /* From 1 to 100000 */
                                       double        &outReal );

TA_LIB_API int TA_BETA_StateFree( struct TA_BETA_State* _state );


/*
 * TA_BOP - Balance Of Power
 * 
 * Input  = Open, High, Low, Close
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_BOP( int    startIdx,
                              int    endIdx,
                                         const double inOpen[],
                                         const double inHigh[],
                                         const double inLow[],
                                         const double inClose[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_BOP( int    startIdx,
                                int    endIdx,
                                           const float  inOpen[],
                                           const float  inHigh[],
                                           const float  inLow[],
                                           const float  inClose[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_BOP_Lookback( void );


TA_LIB_API struct TA_BOP_Data {
                                         const double inOpen;
                                         const double inHigh;
                                         const double inLow;
                                         const double inClose;
                                         };
TA_LIB_API struct TA_BOP_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_BOP_Data* memory;
                                };


TA_LIB_API int TA_BOP_StateInit( struct TA_BOP_State* _state );


TA_LIB_API int TA_BOP_State( struct TA_BOP_State* _state,
                                      const double inOpen,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      double        &outReal );

TA_LIB_API int TA_BOP_StateFree( struct TA_BOP_State* _state );


/*
 * TA_CCI - Commodity Channel Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_CCI( int    startIdx,
                              int    endIdx,
                                         const double inHigh[],
                                         const double inLow[],
                                         const double inClose[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_CCI( int    startIdx,
                                int    endIdx,
                                           const float  inHigh[],
                                           const float  inLow[],
                                           const float  inClose[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_CCI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_CCI_Data {
                                         const double inHigh;
                                         const double inLow;
                                         const double inClose;
                                         };
TA_LIB_API struct TA_CCI_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_CCI_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_CCI_StateInit( struct TA_CCI_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_CCI_State( struct TA_CCI_State* _state,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_CCI_StateFree( struct TA_CCI_State* _state );


/*
 * TA_CDL2CROWS - Two Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDL2CROWS( int    startIdx,
                                    int    endIdx,
                                               const double inOpen[],
                                               const double inHigh[],
                                               const double inLow[],
                                               const double inClose[],
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDL2CROWS( int    startIdx,
                                      int    endIdx,
                                                 const float  inOpen[],
                                                 const float  inHigh[],
                                                 const float  inLow[],
                                                 const float  inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API int TA_CDL2CROWS_Lookback( void );


TA_LIB_API struct TA_CDL2CROWS_Data {
                                               const double inOpen;
                                               const double inHigh;
                                               const double inLow;
                                               const double inClose;
                                               };
TA_LIB_API struct TA_CDL2CROWS_Struct {
                                      int mem_size;
                                      int mem_index;
                                      struct TA_CDL2CROWS_Data* memory;
                                      };


TA_LIB_API int TA_CDL2CROWS_StateInit( struct TA_CDL2CROWS_State* _state );


TA_LIB_API int TA_CDL2CROWS_State( struct TA_CDL2CROWS_State* _state,
                                            const double inOpen,
                                            const double inHigh,
                                            const double inLow,
                                            const double inClose,
                                            int           &outInteger );

TA_LIB_API int TA_CDL2CROWS_StateFree( struct TA_CDL2CROWS_State* _state );


/*
 * TA_CDL3BLACKCROWS - Three Black Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDL3BLACKCROWS( int    startIdx,
                                         int    endIdx,
                                                    const double inOpen[],
                                                    const double inHigh[],
                                                    const double inLow[],
                                                    const double inClose[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDL3BLACKCROWS( int    startIdx,
                                           int    endIdx,
                                                      const float  inOpen[],
                                                      const float  inHigh[],
                                                      const float  inLow[],
                                                      const float  inClose[],
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API int TA_CDL3BLACKCROWS_Lookback( void );


TA_LIB_API struct TA_CDL3BLACKCROWS_Data {
                                                    const double inOpen;
                                                    const double inHigh;
                                                    const double inLow;
                                                    const double inClose;
                                                    };
TA_LIB_API struct TA_CDL3BLACKCROWS_Struct {
                                           int mem_size;
                                           int mem_index;
                                           struct TA_CDL3BLACKCROWS_Data* memory;
                                           };


TA_LIB_API int TA_CDL3BLACKCROWS_StateInit( struct TA_CDL3BLACKCROWS_State* _state );


TA_LIB_API int TA_CDL3BLACKCROWS_State( struct TA_CDL3BLACKCROWS_State* _state,
                                                 const double inOpen,
                                                 const double inHigh,
                                                 const double inLow,
                                                 const double inClose,
                                                 int           &outInteger );

TA_LIB_API int TA_CDL3BLACKCROWS_StateFree( struct TA_CDL3BLACKCROWS_State* _state );


/*
 * TA_CDL3INSIDE - Three Inside Up/Down
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDL3INSIDE( int    startIdx,
                                     int    endIdx,
                                                const double inOpen[],
                                                const double inHigh[],
                                                const double inLow[],
                                                const double inClose[],
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDL3INSIDE( int    startIdx,
                                       int    endIdx,
                                                  const float  inOpen[],
                                                  const float  inHigh[],
                                                  const float  inLow[],
                                                  const float  inClose[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  int           outInteger[] );

TA_LIB_API int TA_CDL3INSIDE_Lookback( void );


TA_LIB_API struct TA_CDL3INSIDE_Data {
                                                const double inOpen;
                                                const double inHigh;
                                                const double inLow;
                                                const double inClose;
                                                };
TA_LIB_API struct TA_CDL3INSIDE_Struct {
                                       int mem_size;
                                       int mem_index;
                                       struct TA_CDL3INSIDE_Data* memory;
                                       };


TA_LIB_API int TA_CDL3INSIDE_StateInit( struct TA_CDL3INSIDE_State* _state );


TA_LIB_API int TA_CDL3INSIDE_State( struct TA_CDL3INSIDE_State* _state,
                                             const double inOpen,
                                             const double inHigh,
                                             const double inLow,
                                             const double inClose,
                                             int           &outInteger );

TA_LIB_API int TA_CDL3INSIDE_StateFree( struct TA_CDL3INSIDE_State* _state );


/*
 * TA_CDL3LINESTRIKE - Three-Line Strike 
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDL3LINESTRIKE( int    startIdx,
                                         int    endIdx,
                                                    const double inOpen[],
                                                    const double inHigh[],
                                                    const double inLow[],
                                                    const double inClose[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDL3LINESTRIKE( int    startIdx,
                                           int    endIdx,
                                                      const float  inOpen[],
                                                      const float  inHigh[],
                                                      const float  inLow[],
                                                      const float  inClose[],
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API int TA_CDL3LINESTRIKE_Lookback( void );


TA_LIB_API struct TA_CDL3LINESTRIKE_Data {
                                                    const double inOpen;
                                                    const double inHigh;
                                                    const double inLow;
                                                    const double inClose;
                                                    };
TA_LIB_API struct TA_CDL3LINESTRIKE_Struct {
                                           int mem_size;
                                           int mem_index;
                                           struct TA_CDL3LINESTRIKE_Data* memory;
                                           };


TA_LIB_API int TA_CDL3LINESTRIKE_StateInit( struct TA_CDL3LINESTRIKE_State* _state );


TA_LIB_API int TA_CDL3LINESTRIKE_State( struct TA_CDL3LINESTRIKE_State* _state,
                                                 const double inOpen,
                                                 const double inHigh,
                                                 const double inLow,
                                                 const double inClose,
                                                 int           &outInteger );

TA_LIB_API int TA_CDL3LINESTRIKE_StateFree( struct TA_CDL3LINESTRIKE_State* _state );


/*
 * TA_CDL3OUTSIDE - Three Outside Up/Down
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDL3OUTSIDE( int    startIdx,
                                      int    endIdx,
                                                 const double inOpen[],
                                                 const double inHigh[],
                                                 const double inLow[],
                                                 const double inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDL3OUTSIDE( int    startIdx,
                                        int    endIdx,
                                                   const float  inOpen[],
                                                   const float  inHigh[],
                                                   const float  inLow[],
                                                   const float  inClose[],
                                                   int          *outBegIdx,
                                                   int          *outNBElement,
                                                   int           outInteger[] );

TA_LIB_API int TA_CDL3OUTSIDE_Lookback( void );


TA_LIB_API struct TA_CDL3OUTSIDE_Data {
                                                 const double inOpen;
                                                 const double inHigh;
                                                 const double inLow;
                                                 const double inClose;
                                                 };
TA_LIB_API struct TA_CDL3OUTSIDE_Struct {
                                        int mem_size;
                                        int mem_index;
                                        struct TA_CDL3OUTSIDE_Data* memory;
                                        };


TA_LIB_API int TA_CDL3OUTSIDE_StateInit( struct TA_CDL3OUTSIDE_State* _state );


TA_LIB_API int TA_CDL3OUTSIDE_State( struct TA_CDL3OUTSIDE_State* _state,
                                              const double inOpen,
                                              const double inHigh,
                                              const double inLow,
                                              const double inClose,
                                              int           &outInteger );

TA_LIB_API int TA_CDL3OUTSIDE_StateFree( struct TA_CDL3OUTSIDE_State* _state );


/*
 * TA_CDL3STARSINSOUTH - Three Stars In The South
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDL3STARSINSOUTH( int    startIdx,
                                           int    endIdx,
                                                      const double inOpen[],
                                                      const double inHigh[],
                                                      const double inLow[],
                                                      const double inClose[],
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDL3STARSINSOUTH( int    startIdx,
                                             int    endIdx,
                                                        const float  inOpen[],
                                                        const float  inHigh[],
                                                        const float  inLow[],
                                                        const float  inClose[],
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API int TA_CDL3STARSINSOUTH_Lookback( void );


TA_LIB_API struct TA_CDL3STARSINSOUTH_Data {
                                                      const double inOpen;
                                                      const double inHigh;
                                                      const double inLow;
                                                      const double inClose;
                                                      };
TA_LIB_API struct TA_CDL3STARSINSOUTH_Struct {
                                             int mem_size;
                                             int mem_index;
                                             struct TA_CDL3STARSINSOUTH_Data* memory;
                                             };


TA_LIB_API int TA_CDL3STARSINSOUTH_StateInit( struct TA_CDL3STARSINSOUTH_State* _state );


TA_LIB_API int TA_CDL3STARSINSOUTH_State( struct TA_CDL3STARSINSOUTH_State* _state,
                                                   const double inOpen,
                                                   const double inHigh,
                                                   const double inLow,
                                                   const double inClose,
                                                   int           &outInteger );

TA_LIB_API int TA_CDL3STARSINSOUTH_StateFree( struct TA_CDL3STARSINSOUTH_State* _state );


/*
 * TA_CDL3WHITESOLDIERS - Three Advancing White Soldiers
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDL3WHITESOLDIERS( int    startIdx,
                                            int    endIdx,
                                                       const double inOpen[],
                                                       const double inHigh[],
                                                       const double inLow[],
                                                       const double inClose[],
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDL3WHITESOLDIERS( int    startIdx,
                                              int    endIdx,
                                                         const float  inOpen[],
                                                         const float  inHigh[],
                                                         const float  inLow[],
                                                         const float  inClose[],
                                                         int          *outBegIdx,
                                                         int          *outNBElement,
                                                         int           outInteger[] );

TA_LIB_API int TA_CDL3WHITESOLDIERS_Lookback( void );


TA_LIB_API struct TA_CDL3WHITESOLDIERS_Data {
                                                       const double inOpen;
                                                       const double inHigh;
                                                       const double inLow;
                                                       const double inClose;
                                                       };
TA_LIB_API struct TA_CDL3WHITESOLDIERS_Struct {
                                              int mem_size;
                                              int mem_index;
                                              struct TA_CDL3WHITESOLDIERS_Data* memory;
                                              };


TA_LIB_API int TA_CDL3WHITESOLDIERS_StateInit( struct TA_CDL3WHITESOLDIERS_State* _state );


TA_LIB_API int TA_CDL3WHITESOLDIERS_State( struct TA_CDL3WHITESOLDIERS_State* _state,
                                                    const double inOpen,
                                                    const double inHigh,
                                                    const double inLow,
                                                    const double inClose,
                                                    int           &outInteger );

TA_LIB_API int TA_CDL3WHITESOLDIERS_StateFree( struct TA_CDL3WHITESOLDIERS_State* _state );


/*
 * TA_CDLABANDONEDBABY - Abandoned Baby
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_CDLABANDONEDBABY( int    startIdx,
                                           int    endIdx,
                                                      const double inOpen[],
                                                      const double inHigh[],
                                                      const double inLow[],
                                                      const double inClose[],
                                                      double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLABANDONEDBABY( int    startIdx,
                                             int    endIdx,
                                                        const float  inOpen[],
                                                        const float  inHigh[],
                                                        const float  inLow[],
                                                        const float  inClose[],
                                                        double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API int TA_CDLABANDONEDBABY_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API struct TA_CDLABANDONEDBABY_Data {
                                                      const double inOpen;
                                                      const double inHigh;
                                                      const double inLow;
                                                      const double inClose;
                                                      };
TA_LIB_API struct TA_CDLABANDONEDBABY_Struct {
                                             int mem_size;
                                             int mem_index;
                                             struct TA_CDLABANDONEDBABY_Data* memory;
                                             double        optInPenetration; /* From 0 to TA_REAL_MAX */
                                             };


TA_LIB_API int TA_CDLABANDONEDBABY_StateInit( struct TA_CDLABANDONEDBABY_State* _state,
                                                       double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API int TA_CDLABANDONEDBABY_State( struct TA_CDLABANDONEDBABY_State* _state,
                                                   const double inOpen,
                                                   const double inHigh,
                                                   const double inLow,
                                                   const double inClose,
                                                   double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                   int           &outInteger );

TA_LIB_API int TA_CDLABANDONEDBABY_StateFree( struct TA_CDLABANDONEDBABY_State* _state );


/*
 * TA_CDLADVANCEBLOCK - Advance Block
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLADVANCEBLOCK( int    startIdx,
                                          int    endIdx,
                                                     const double inOpen[],
                                                     const double inHigh[],
                                                     const double inLow[],
                                                     const double inClose[],
                                                     int          *outBegIdx,
                                                     int          *outNBElement,
                                                     int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLADVANCEBLOCK( int    startIdx,
                                            int    endIdx,
                                                       const float  inOpen[],
                                                       const float  inHigh[],
                                                       const float  inLow[],
                                                       const float  inClose[],
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       int           outInteger[] );

TA_LIB_API int TA_CDLADVANCEBLOCK_Lookback( void );


TA_LIB_API struct TA_CDLADVANCEBLOCK_Data {
                                                     const double inOpen;
                                                     const double inHigh;
                                                     const double inLow;
                                                     const double inClose;
                                                     };
TA_LIB_API struct TA_CDLADVANCEBLOCK_Struct {
                                            int mem_size;
                                            int mem_index;
                                            struct TA_CDLADVANCEBLOCK_Data* memory;
                                            };


TA_LIB_API int TA_CDLADVANCEBLOCK_StateInit( struct TA_CDLADVANCEBLOCK_State* _state );


TA_LIB_API int TA_CDLADVANCEBLOCK_State( struct TA_CDLADVANCEBLOCK_State* _state,
                                                  const double inOpen,
                                                  const double inHigh,
                                                  const double inLow,
                                                  const double inClose,
                                                  int           &outInteger );

TA_LIB_API int TA_CDLADVANCEBLOCK_StateFree( struct TA_CDLADVANCEBLOCK_State* _state );


/*
 * TA_CDLBELTHOLD - Belt-hold
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLBELTHOLD( int    startIdx,
                                      int    endIdx,
                                                 const double inOpen[],
                                                 const double inHigh[],
                                                 const double inLow[],
                                                 const double inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLBELTHOLD( int    startIdx,
                                        int    endIdx,
                                                   const float  inOpen[],
                                                   const float  inHigh[],
                                                   const float  inLow[],
                                                   const float  inClose[],
                                                   int          *outBegIdx,
                                                   int          *outNBElement,
                                                   int           outInteger[] );

TA_LIB_API int TA_CDLBELTHOLD_Lookback( void );


TA_LIB_API struct TA_CDLBELTHOLD_Data {
                                                 const double inOpen;
                                                 const double inHigh;
                                                 const double inLow;
                                                 const double inClose;
                                                 };
TA_LIB_API struct TA_CDLBELTHOLD_Struct {
                                        int mem_size;
                                        int mem_index;
                                        struct TA_CDLBELTHOLD_Data* memory;
                                        };


TA_LIB_API int TA_CDLBELTHOLD_StateInit( struct TA_CDLBELTHOLD_State* _state );


TA_LIB_API int TA_CDLBELTHOLD_State( struct TA_CDLBELTHOLD_State* _state,
                                              const double inOpen,
                                              const double inHigh,
                                              const double inLow,
                                              const double inClose,
                                              int           &outInteger );

TA_LIB_API int TA_CDLBELTHOLD_StateFree( struct TA_CDLBELTHOLD_State* _state );


/*
 * TA_CDLBREAKAWAY - Breakaway
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLBREAKAWAY( int    startIdx,
                                       int    endIdx,
                                                  const double inOpen[],
                                                  const double inHigh[],
                                                  const double inLow[],
                                                  const double inClose[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLBREAKAWAY( int    startIdx,
                                         int    endIdx,
                                                    const float  inOpen[],
                                                    const float  inHigh[],
                                                    const float  inLow[],
                                                    const float  inClose[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API int TA_CDLBREAKAWAY_Lookback( void );


TA_LIB_API struct TA_CDLBREAKAWAY_Data {
                                                  const double inOpen;
                                                  const double inHigh;
                                                  const double inLow;
                                                  const double inClose;
                                                  };
TA_LIB_API struct TA_CDLBREAKAWAY_Struct {
                                         int mem_size;
                                         int mem_index;
                                         struct TA_CDLBREAKAWAY_Data* memory;
                                         };


TA_LIB_API int TA_CDLBREAKAWAY_StateInit( struct TA_CDLBREAKAWAY_State* _state );


TA_LIB_API int TA_CDLBREAKAWAY_State( struct TA_CDLBREAKAWAY_State* _state,
                                               const double inOpen,
                                               const double inHigh,
                                               const double inLow,
                                               const double inClose,
                                               int           &outInteger );

TA_LIB_API int TA_CDLBREAKAWAY_StateFree( struct TA_CDLBREAKAWAY_State* _state );


/*
 * TA_CDLCLOSINGMARUBOZU - Closing Marubozu
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLCLOSINGMARUBOZU( int    startIdx,
                                             int    endIdx,
                                                        const double inOpen[],
                                                        const double inHigh[],
                                                        const double inLow[],
                                                        const double inClose[],
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLCLOSINGMARUBOZU( int    startIdx,
                                               int    endIdx,
                                                          const float  inOpen[],
                                                          const float  inHigh[],
                                                          const float  inLow[],
                                                          const float  inClose[],
                                                          int          *outBegIdx,
                                                          int          *outNBElement,
                                                          int           outInteger[] );

TA_LIB_API int TA_CDLCLOSINGMARUBOZU_Lookback( void );


TA_LIB_API struct TA_CDLCLOSINGMARUBOZU_Data {
                                                        const double inOpen;
                                                        const double inHigh;
                                                        const double inLow;
                                                        const double inClose;
                                                        };
TA_LIB_API struct TA_CDLCLOSINGMARUBOZU_Struct {
                                               int mem_size;
                                               int mem_index;
                                               struct TA_CDLCLOSINGMARUBOZU_Data* memory;
                                               };


TA_LIB_API int TA_CDLCLOSINGMARUBOZU_StateInit( struct TA_CDLCLOSINGMARUBOZU_State* _state );


TA_LIB_API int TA_CDLCLOSINGMARUBOZU_State( struct TA_CDLCLOSINGMARUBOZU_State* _state,
                                                     const double inOpen,
                                                     const double inHigh,
                                                     const double inLow,
                                                     const double inClose,
                                                     int           &outInteger );

TA_LIB_API int TA_CDLCLOSINGMARUBOZU_StateFree( struct TA_CDLCLOSINGMARUBOZU_State* _state );


/*
 * TA_CDLCONCEALBABYSWALL - Concealing Baby Swallow
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLCONCEALBABYSWALL( int    startIdx,
                                              int    endIdx,
                                                         const double inOpen[],
                                                         const double inHigh[],
                                                         const double inLow[],
                                                         const double inClose[],
                                                         int          *outBegIdx,
                                                         int          *outNBElement,
                                                         int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLCONCEALBABYSWALL( int    startIdx,
                                                int    endIdx,
                                                           const float  inOpen[],
                                                           const float  inHigh[],
                                                           const float  inLow[],
                                                           const float  inClose[],
                                                           int          *outBegIdx,
                                                           int          *outNBElement,
                                                           int           outInteger[] );

TA_LIB_API int TA_CDLCONCEALBABYSWALL_Lookback( void );


TA_LIB_API struct TA_CDLCONCEALBABYSWALL_Data {
                                                         const double inOpen;
                                                         const double inHigh;
                                                         const double inLow;
                                                         const double inClose;
                                                         };
TA_LIB_API struct TA_CDLCONCEALBABYSWALL_Struct {
                                                int mem_size;
                                                int mem_index;
                                                struct TA_CDLCONCEALBABYSWALL_Data* memory;
                                                };


TA_LIB_API int TA_CDLCONCEALBABYSWALL_StateInit( struct TA_CDLCONCEALBABYSWALL_State* _state );


TA_LIB_API int TA_CDLCONCEALBABYSWALL_State( struct TA_CDLCONCEALBABYSWALL_State* _state,
                                                      const double inOpen,
                                                      const double inHigh,
                                                      const double inLow,
                                                      const double inClose,
                                                      int           &outInteger );

TA_LIB_API int TA_CDLCONCEALBABYSWALL_StateFree( struct TA_CDLCONCEALBABYSWALL_State* _state );


/*
 * TA_CDLCOUNTERATTACK - Counterattack
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLCOUNTERATTACK( int    startIdx,
                                           int    endIdx,
                                                      const double inOpen[],
                                                      const double inHigh[],
                                                      const double inLow[],
                                                      const double inClose[],
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLCOUNTERATTACK( int    startIdx,
                                             int    endIdx,
                                                        const float  inOpen[],
                                                        const float  inHigh[],
                                                        const float  inLow[],
                                                        const float  inClose[],
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API int TA_CDLCOUNTERATTACK_Lookback( void );


TA_LIB_API struct TA_CDLCOUNTERATTACK_Data {
                                                      const double inOpen;
                                                      const double inHigh;
                                                      const double inLow;
                                                      const double inClose;
                                                      };
TA_LIB_API struct TA_CDLCOUNTERATTACK_Struct {
                                             int mem_size;
                                             int mem_index;
                                             struct TA_CDLCOUNTERATTACK_Data* memory;
                                             };


TA_LIB_API int TA_CDLCOUNTERATTACK_StateInit( struct TA_CDLCOUNTERATTACK_State* _state );


TA_LIB_API int TA_CDLCOUNTERATTACK_State( struct TA_CDLCOUNTERATTACK_State* _state,
                                                   const double inOpen,
                                                   const double inHigh,
                                                   const double inLow,
                                                   const double inClose,
                                                   int           &outInteger );

TA_LIB_API int TA_CDLCOUNTERATTACK_StateFree( struct TA_CDLCOUNTERATTACK_State* _state );


/*
 * TA_CDLDARKCLOUDCOVER - Dark Cloud Cover
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_CDLDARKCLOUDCOVER( int    startIdx,
                                            int    endIdx,
                                                       const double inOpen[],
                                                       const double inHigh[],
                                                       const double inLow[],
                                                       const double inClose[],
                                                       double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLDARKCLOUDCOVER( int    startIdx,
                                              int    endIdx,
                                                         const float  inOpen[],
                                                         const float  inHigh[],
                                                         const float  inLow[],
                                                         const float  inClose[],
                                                         double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                         int          *outBegIdx,
                                                         int          *outNBElement,
                                                         int           outInteger[] );

TA_LIB_API int TA_CDLDARKCLOUDCOVER_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API struct TA_CDLDARKCLOUDCOVER_Data {
                                                       const double inOpen;
                                                       const double inHigh;
                                                       const double inLow;
                                                       const double inClose;
                                                       };
TA_LIB_API struct TA_CDLDARKCLOUDCOVER_Struct {
                                              int mem_size;
                                              int mem_index;
                                              struct TA_CDLDARKCLOUDCOVER_Data* memory;
                                              double        optInPenetration; /* From 0 to TA_REAL_MAX */
                                              };


TA_LIB_API int TA_CDLDARKCLOUDCOVER_StateInit( struct TA_CDLDARKCLOUDCOVER_State* _state,
                                                        double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API int TA_CDLDARKCLOUDCOVER_State( struct TA_CDLDARKCLOUDCOVER_State* _state,
                                                    const double inOpen,
                                                    const double inHigh,
                                                    const double inLow,
                                                    const double inClose,
                                                    double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                    int           &outInteger );

TA_LIB_API int TA_CDLDARKCLOUDCOVER_StateFree( struct TA_CDLDARKCLOUDCOVER_State* _state );


/*
 * TA_CDLDOJI - Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLDOJI( int    startIdx,
                                  int    endIdx,
                                             const double inOpen[],
                                             const double inHigh[],
                                             const double inLow[],
                                             const double inClose[],
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLDOJI( int    startIdx,
                                    int    endIdx,
                                               const float  inOpen[],
                                               const float  inHigh[],
                                               const float  inLow[],
                                               const float  inClose[],
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               int           outInteger[] );

TA_LIB_API int TA_CDLDOJI_Lookback( void );


TA_LIB_API struct TA_CDLDOJI_Data {
                                             const double inOpen;
                                             const double inHigh;
                                             const double inLow;
                                             const double inClose;
                                             };
TA_LIB_API struct TA_CDLDOJI_Struct {
                                    int mem_size;
                                    int mem_index;
                                    struct TA_CDLDOJI_Data* memory;
                                    };


TA_LIB_API int TA_CDLDOJI_StateInit( struct TA_CDLDOJI_State* _state );


TA_LIB_API int TA_CDLDOJI_State( struct TA_CDLDOJI_State* _state,
                                          const double inOpen,
                                          const double inHigh,
                                          const double inLow,
                                          const double inClose,
                                          int           &outInteger );

TA_LIB_API int TA_CDLDOJI_StateFree( struct TA_CDLDOJI_State* _state );


/*
 * TA_CDLDOJISTAR - Doji Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLDOJISTAR( int    startIdx,
                                      int    endIdx,
                                                 const double inOpen[],
                                                 const double inHigh[],
                                                 const double inLow[],
                                                 const double inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLDOJISTAR( int    startIdx,
                                        int    endIdx,
                                                   const float  inOpen[],
                                                   const float  inHigh[],
                                                   const float  inLow[],
                                                   const float  inClose[],
                                                   int          *outBegIdx,
                                                   int          *outNBElement,
                                                   int           outInteger[] );

TA_LIB_API int TA_CDLDOJISTAR_Lookback( void );


TA_LIB_API struct TA_CDLDOJISTAR_Data {
                                                 const double inOpen;
                                                 const double inHigh;
                                                 const double inLow;
                                                 const double inClose;
                                                 };
TA_LIB_API struct TA_CDLDOJISTAR_Struct {
                                        int mem_size;
                                        int mem_index;
                                        struct TA_CDLDOJISTAR_Data* memory;
                                        };


TA_LIB_API int TA_CDLDOJISTAR_StateInit( struct TA_CDLDOJISTAR_State* _state );


TA_LIB_API int TA_CDLDOJISTAR_State( struct TA_CDLDOJISTAR_State* _state,
                                              const double inOpen,
                                              const double inHigh,
                                              const double inLow,
                                              const double inClose,
                                              int           &outInteger );

TA_LIB_API int TA_CDLDOJISTAR_StateFree( struct TA_CDLDOJISTAR_State* _state );


/*
 * TA_CDLDRAGONFLYDOJI - Dragonfly Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLDRAGONFLYDOJI( int    startIdx,
                                           int    endIdx,
                                                      const double inOpen[],
                                                      const double inHigh[],
                                                      const double inLow[],
                                                      const double inClose[],
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLDRAGONFLYDOJI( int    startIdx,
                                             int    endIdx,
                                                        const float  inOpen[],
                                                        const float  inHigh[],
                                                        const float  inLow[],
                                                        const float  inClose[],
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API int TA_CDLDRAGONFLYDOJI_Lookback( void );


TA_LIB_API struct TA_CDLDRAGONFLYDOJI_Data {
                                                      const double inOpen;
                                                      const double inHigh;
                                                      const double inLow;
                                                      const double inClose;
                                                      };
TA_LIB_API struct TA_CDLDRAGONFLYDOJI_Struct {
                                             int mem_size;
                                             int mem_index;
                                             struct TA_CDLDRAGONFLYDOJI_Data* memory;
                                             };


TA_LIB_API int TA_CDLDRAGONFLYDOJI_StateInit( struct TA_CDLDRAGONFLYDOJI_State* _state );


TA_LIB_API int TA_CDLDRAGONFLYDOJI_State( struct TA_CDLDRAGONFLYDOJI_State* _state,
                                                   const double inOpen,
                                                   const double inHigh,
                                                   const double inLow,
                                                   const double inClose,
                                                   int           &outInteger );

TA_LIB_API int TA_CDLDRAGONFLYDOJI_StateFree( struct TA_CDLDRAGONFLYDOJI_State* _state );


/*
 * TA_CDLENGULFING - Engulfing Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLENGULFING( int    startIdx,
                                       int    endIdx,
                                                  const double inOpen[],
                                                  const double inHigh[],
                                                  const double inLow[],
                                                  const double inClose[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLENGULFING( int    startIdx,
                                         int    endIdx,
                                                    const float  inOpen[],
                                                    const float  inHigh[],
                                                    const float  inLow[],
                                                    const float  inClose[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API int TA_CDLENGULFING_Lookback( void );


TA_LIB_API struct TA_CDLENGULFING_Data {
                                                  const double inOpen;
                                                  const double inHigh;
                                                  const double inLow;
                                                  const double inClose;
                                                  };
TA_LIB_API struct TA_CDLENGULFING_Struct {
                                         int mem_size;
                                         int mem_index;
                                         struct TA_CDLENGULFING_Data* memory;
                                         };


TA_LIB_API int TA_CDLENGULFING_StateInit( struct TA_CDLENGULFING_State* _state );


TA_LIB_API int TA_CDLENGULFING_State( struct TA_CDLENGULFING_State* _state,
                                               const double inOpen,
                                               const double inHigh,
                                               const double inLow,
                                               const double inClose,
                                               int           &outInteger );

TA_LIB_API int TA_CDLENGULFING_StateFree( struct TA_CDLENGULFING_State* _state );


/*
 * TA_CDLEVENINGDOJISTAR - Evening Doji Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_CDLEVENINGDOJISTAR( int    startIdx,
                                             int    endIdx,
                                                        const double inOpen[],
                                                        const double inHigh[],
                                                        const double inLow[],
                                                        const double inClose[],
                                                        double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLEVENINGDOJISTAR( int    startIdx,
                                               int    endIdx,
                                                          const float  inOpen[],
                                                          const float  inHigh[],
                                                          const float  inLow[],
                                                          const float  inClose[],
                                                          double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                          int          *outBegIdx,
                                                          int          *outNBElement,
                                                          int           outInteger[] );

TA_LIB_API int TA_CDLEVENINGDOJISTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API struct TA_CDLEVENINGDOJISTAR_Data {
                                                        const double inOpen;
                                                        const double inHigh;
                                                        const double inLow;
                                                        const double inClose;
                                                        };
TA_LIB_API struct TA_CDLEVENINGDOJISTAR_Struct {
                                               int mem_size;
                                               int mem_index;
                                               struct TA_CDLEVENINGDOJISTAR_Data* memory;
                                               double        optInPenetration; /* From 0 to TA_REAL_MAX */
                                               };


TA_LIB_API int TA_CDLEVENINGDOJISTAR_StateInit( struct TA_CDLEVENINGDOJISTAR_State* _state,
                                                         double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API int TA_CDLEVENINGDOJISTAR_State( struct TA_CDLEVENINGDOJISTAR_State* _state,
                                                     const double inOpen,
                                                     const double inHigh,
                                                     const double inLow,
                                                     const double inClose,
                                                     double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                     int           &outInteger );

TA_LIB_API int TA_CDLEVENINGDOJISTAR_StateFree( struct TA_CDLEVENINGDOJISTAR_State* _state );


/*
 * TA_CDLEVENINGSTAR - Evening Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_CDLEVENINGSTAR( int    startIdx,
                                         int    endIdx,
                                                    const double inOpen[],
                                                    const double inHigh[],
                                                    const double inLow[],
                                                    const double inClose[],
                                                    double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLEVENINGSTAR( int    startIdx,
                                           int    endIdx,
                                                      const float  inOpen[],
                                                      const float  inHigh[],
                                                      const float  inLow[],
                                                      const float  inClose[],
                                                      double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API int TA_CDLEVENINGSTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API struct TA_CDLEVENINGSTAR_Data {
                                                    const double inOpen;
                                                    const double inHigh;
                                                    const double inLow;
                                                    const double inClose;
                                                    };
TA_LIB_API struct TA_CDLEVENINGSTAR_Struct {
                                           int mem_size;
                                           int mem_index;
                                           struct TA_CDLEVENINGSTAR_Data* memory;
                                           double        optInPenetration; /* From 0 to TA_REAL_MAX */
                                           };


TA_LIB_API int TA_CDLEVENINGSTAR_StateInit( struct TA_CDLEVENINGSTAR_State* _state,
                                                     double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API int TA_CDLEVENINGSTAR_State( struct TA_CDLEVENINGSTAR_State* _state,
                                                 const double inOpen,
                                                 const double inHigh,
                                                 const double inLow,
                                                 const double inClose,
                                                 double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                 int           &outInteger );

TA_LIB_API int TA_CDLEVENINGSTAR_StateFree( struct TA_CDLEVENINGSTAR_State* _state );


/*
 * TA_CDLGAPSIDESIDEWHITE - Up/Down-gap side-by-side white lines
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLGAPSIDESIDEWHITE( int    startIdx,
                                              int    endIdx,
                                                         const double inOpen[],
                                                         const double inHigh[],
                                                         const double inLow[],
                                                         const double inClose[],
                                                         int          *outBegIdx,
                                                         int          *outNBElement,
                                                         int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLGAPSIDESIDEWHITE( int    startIdx,
                                                int    endIdx,
                                                           const float  inOpen[],
                                                           const float  inHigh[],
                                                           const float  inLow[],
                                                           const float  inClose[],
                                                           int          *outBegIdx,
                                                           int          *outNBElement,
                                                           int           outInteger[] );

TA_LIB_API int TA_CDLGAPSIDESIDEWHITE_Lookback( void );


TA_LIB_API struct TA_CDLGAPSIDESIDEWHITE_Data {
                                                         const double inOpen;
                                                         const double inHigh;
                                                         const double inLow;
                                                         const double inClose;
                                                         };
TA_LIB_API struct TA_CDLGAPSIDESIDEWHITE_Struct {
                                                int mem_size;
                                                int mem_index;
                                                struct TA_CDLGAPSIDESIDEWHITE_Data* memory;
                                                };


TA_LIB_API int TA_CDLGAPSIDESIDEWHITE_StateInit( struct TA_CDLGAPSIDESIDEWHITE_State* _state );


TA_LIB_API int TA_CDLGAPSIDESIDEWHITE_State( struct TA_CDLGAPSIDESIDEWHITE_State* _state,
                                                      const double inOpen,
                                                      const double inHigh,
                                                      const double inLow,
                                                      const double inClose,
                                                      int           &outInteger );

TA_LIB_API int TA_CDLGAPSIDESIDEWHITE_StateFree( struct TA_CDLGAPSIDESIDEWHITE_State* _state );


/*
 * TA_CDLGRAVESTONEDOJI - Gravestone Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLGRAVESTONEDOJI( int    startIdx,
                                            int    endIdx,
                                                       const double inOpen[],
                                                       const double inHigh[],
                                                       const double inLow[],
                                                       const double inClose[],
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLGRAVESTONEDOJI( int    startIdx,
                                              int    endIdx,
                                                         const float  inOpen[],
                                                         const float  inHigh[],
                                                         const float  inLow[],
                                                         const float  inClose[],
                                                         int          *outBegIdx,
                                                         int          *outNBElement,
                                                         int           outInteger[] );

TA_LIB_API int TA_CDLGRAVESTONEDOJI_Lookback( void );


TA_LIB_API struct TA_CDLGRAVESTONEDOJI_Data {
                                                       const double inOpen;
                                                       const double inHigh;
                                                       const double inLow;
                                                       const double inClose;
                                                       };
TA_LIB_API struct TA_CDLGRAVESTONEDOJI_Struct {
                                              int mem_size;
                                              int mem_index;
                                              struct TA_CDLGRAVESTONEDOJI_Data* memory;
                                              };


TA_LIB_API int TA_CDLGRAVESTONEDOJI_StateInit( struct TA_CDLGRAVESTONEDOJI_State* _state );


TA_LIB_API int TA_CDLGRAVESTONEDOJI_State( struct TA_CDLGRAVESTONEDOJI_State* _state,
                                                    const double inOpen,
                                                    const double inHigh,
                                                    const double inLow,
                                                    const double inClose,
                                                    int           &outInteger );

TA_LIB_API int TA_CDLGRAVESTONEDOJI_StateFree( struct TA_CDLGRAVESTONEDOJI_State* _state );


/*
 * TA_CDLHAMMER - Hammer
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLHAMMER( int    startIdx,
                                    int    endIdx,
                                               const double inOpen[],
                                               const double inHigh[],
                                               const double inLow[],
                                               const double inClose[],
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLHAMMER( int    startIdx,
                                      int    endIdx,
                                                 const float  inOpen[],
                                                 const float  inHigh[],
                                                 const float  inLow[],
                                                 const float  inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API int TA_CDLHAMMER_Lookback( void );


TA_LIB_API struct TA_CDLHAMMER_Data {
                                               const double inOpen;
                                               const double inHigh;
                                               const double inLow;
                                               const double inClose;
                                               };
TA_LIB_API struct TA_CDLHAMMER_Struct {
                                      int mem_size;
                                      int mem_index;
                                      struct TA_CDLHAMMER_Data* memory;
                                      };


TA_LIB_API int TA_CDLHAMMER_StateInit( struct TA_CDLHAMMER_State* _state );


TA_LIB_API int TA_CDLHAMMER_State( struct TA_CDLHAMMER_State* _state,
                                            const double inOpen,
                                            const double inHigh,
                                            const double inLow,
                                            const double inClose,
                                            int           &outInteger );

TA_LIB_API int TA_CDLHAMMER_StateFree( struct TA_CDLHAMMER_State* _state );


/*
 * TA_CDLHANGINGMAN - Hanging Man
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLHANGINGMAN( int    startIdx,
                                        int    endIdx,
                                                   const double inOpen[],
                                                   const double inHigh[],
                                                   const double inLow[],
                                                   const double inClose[],
                                                   int          *outBegIdx,
                                                   int          *outNBElement,
                                                   int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLHANGINGMAN( int    startIdx,
                                          int    endIdx,
                                                     const float  inOpen[],
                                                     const float  inHigh[],
                                                     const float  inLow[],
                                                     const float  inClose[],
                                                     int          *outBegIdx,
                                                     int          *outNBElement,
                                                     int           outInteger[] );

TA_LIB_API int TA_CDLHANGINGMAN_Lookback( void );


TA_LIB_API struct TA_CDLHANGINGMAN_Data {
                                                   const double inOpen;
                                                   const double inHigh;
                                                   const double inLow;
                                                   const double inClose;
                                                   };
TA_LIB_API struct TA_CDLHANGINGMAN_Struct {
                                          int mem_size;
                                          int mem_index;
                                          struct TA_CDLHANGINGMAN_Data* memory;
                                          };


TA_LIB_API int TA_CDLHANGINGMAN_StateInit( struct TA_CDLHANGINGMAN_State* _state );


TA_LIB_API int TA_CDLHANGINGMAN_State( struct TA_CDLHANGINGMAN_State* _state,
                                                const double inOpen,
                                                const double inHigh,
                                                const double inLow,
                                                const double inClose,
                                                int           &outInteger );

TA_LIB_API int TA_CDLHANGINGMAN_StateFree( struct TA_CDLHANGINGMAN_State* _state );


/*
 * TA_CDLHARAMI - Harami Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLHARAMI( int    startIdx,
                                    int    endIdx,
                                               const double inOpen[],
                                               const double inHigh[],
                                               const double inLow[],
                                               const double inClose[],
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLHARAMI( int    startIdx,
                                      int    endIdx,
                                                 const float  inOpen[],
                                                 const float  inHigh[],
                                                 const float  inLow[],
                                                 const float  inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API int TA_CDLHARAMI_Lookback( void );


TA_LIB_API struct TA_CDLHARAMI_Data {
                                               const double inOpen;
                                               const double inHigh;
                                               const double inLow;
                                               const double inClose;
                                               };
TA_LIB_API struct TA_CDLHARAMI_Struct {
                                      int mem_size;
                                      int mem_index;
                                      struct TA_CDLHARAMI_Data* memory;
                                      };


TA_LIB_API int TA_CDLHARAMI_StateInit( struct TA_CDLHARAMI_State* _state );


TA_LIB_API int TA_CDLHARAMI_State( struct TA_CDLHARAMI_State* _state,
                                            const double inOpen,
                                            const double inHigh,
                                            const double inLow,
                                            const double inClose,
                                            int           &outInteger );

TA_LIB_API int TA_CDLHARAMI_StateFree( struct TA_CDLHARAMI_State* _state );


/*
 * TA_CDLHARAMICROSS - Harami Cross Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLHARAMICROSS( int    startIdx,
                                         int    endIdx,
                                                    const double inOpen[],
                                                    const double inHigh[],
                                                    const double inLow[],
                                                    const double inClose[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLHARAMICROSS( int    startIdx,
                                           int    endIdx,
                                                      const float  inOpen[],
                                                      const float  inHigh[],
                                                      const float  inLow[],
                                                      const float  inClose[],
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API int TA_CDLHARAMICROSS_Lookback( void );


TA_LIB_API struct TA_CDLHARAMICROSS_Data {
                                                    const double inOpen;
                                                    const double inHigh;
                                                    const double inLow;
                                                    const double inClose;
                                                    };
TA_LIB_API struct TA_CDLHARAMICROSS_Struct {
                                           int mem_size;
                                           int mem_index;
                                           struct TA_CDLHARAMICROSS_Data* memory;
                                           };


TA_LIB_API int TA_CDLHARAMICROSS_StateInit( struct TA_CDLHARAMICROSS_State* _state );


TA_LIB_API int TA_CDLHARAMICROSS_State( struct TA_CDLHARAMICROSS_State* _state,
                                                 const double inOpen,
                                                 const double inHigh,
                                                 const double inLow,
                                                 const double inClose,
                                                 int           &outInteger );

TA_LIB_API int TA_CDLHARAMICROSS_StateFree( struct TA_CDLHARAMICROSS_State* _state );


/*
 * TA_CDLHIGHWAVE - High-Wave Candle
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLHIGHWAVE( int    startIdx,
                                      int    endIdx,
                                                 const double inOpen[],
                                                 const double inHigh[],
                                                 const double inLow[],
                                                 const double inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLHIGHWAVE( int    startIdx,
                                        int    endIdx,
                                                   const float  inOpen[],
                                                   const float  inHigh[],
                                                   const float  inLow[],
                                                   const float  inClose[],
                                                   int          *outBegIdx,
                                                   int          *outNBElement,
                                                   int           outInteger[] );

TA_LIB_API int TA_CDLHIGHWAVE_Lookback( void );


TA_LIB_API struct TA_CDLHIGHWAVE_Data {
                                                 const double inOpen;
                                                 const double inHigh;
                                                 const double inLow;
                                                 const double inClose;
                                                 };
TA_LIB_API struct TA_CDLHIGHWAVE_Struct {
                                        int mem_size;
                                        int mem_index;
                                        struct TA_CDLHIGHWAVE_Data* memory;
                                        };


TA_LIB_API int TA_CDLHIGHWAVE_StateInit( struct TA_CDLHIGHWAVE_State* _state );


TA_LIB_API int TA_CDLHIGHWAVE_State( struct TA_CDLHIGHWAVE_State* _state,
                                              const double inOpen,
                                              const double inHigh,
                                              const double inLow,
                                              const double inClose,
                                              int           &outInteger );

TA_LIB_API int TA_CDLHIGHWAVE_StateFree( struct TA_CDLHIGHWAVE_State* _state );


/*
 * TA_CDLHIKKAKE - Hikkake Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLHIKKAKE( int    startIdx,
                                     int    endIdx,
                                                const double inOpen[],
                                                const double inHigh[],
                                                const double inLow[],
                                                const double inClose[],
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLHIKKAKE( int    startIdx,
                                       int    endIdx,
                                                  const float  inOpen[],
                                                  const float  inHigh[],
                                                  const float  inLow[],
                                                  const float  inClose[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  int           outInteger[] );

TA_LIB_API int TA_CDLHIKKAKE_Lookback( void );


TA_LIB_API struct TA_CDLHIKKAKE_Data {
                                                const double inOpen;
                                                const double inHigh;
                                                const double inLow;
                                                const double inClose;
                                                };
TA_LIB_API struct TA_CDLHIKKAKE_Struct {
                                       int mem_size;
                                       int mem_index;
                                       struct TA_CDLHIKKAKE_Data* memory;
                                       };


TA_LIB_API int TA_CDLHIKKAKE_StateInit( struct TA_CDLHIKKAKE_State* _state );


TA_LIB_API int TA_CDLHIKKAKE_State( struct TA_CDLHIKKAKE_State* _state,
                                             const double inOpen,
                                             const double inHigh,
                                             const double inLow,
                                             const double inClose,
                                             int           &outInteger );

TA_LIB_API int TA_CDLHIKKAKE_StateFree( struct TA_CDLHIKKAKE_State* _state );


/*
 * TA_CDLHIKKAKEMOD - Modified Hikkake Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLHIKKAKEMOD( int    startIdx,
                                        int    endIdx,
                                                   const double inOpen[],
                                                   const double inHigh[],
                                                   const double inLow[],
                                                   const double inClose[],
                                                   int          *outBegIdx,
                                                   int          *outNBElement,
                                                   int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLHIKKAKEMOD( int    startIdx,
                                          int    endIdx,
                                                     const float  inOpen[],
                                                     const float  inHigh[],
                                                     const float  inLow[],
                                                     const float  inClose[],
                                                     int          *outBegIdx,
                                                     int          *outNBElement,
                                                     int           outInteger[] );

TA_LIB_API int TA_CDLHIKKAKEMOD_Lookback( void );


TA_LIB_API struct TA_CDLHIKKAKEMOD_Data {
                                                   const double inOpen;
                                                   const double inHigh;
                                                   const double inLow;
                                                   const double inClose;
                                                   };
TA_LIB_API struct TA_CDLHIKKAKEMOD_Struct {
                                          int mem_size;
                                          int mem_index;
                                          struct TA_CDLHIKKAKEMOD_Data* memory;
                                          };


TA_LIB_API int TA_CDLHIKKAKEMOD_StateInit( struct TA_CDLHIKKAKEMOD_State* _state );


TA_LIB_API int TA_CDLHIKKAKEMOD_State( struct TA_CDLHIKKAKEMOD_State* _state,
                                                const double inOpen,
                                                const double inHigh,
                                                const double inLow,
                                                const double inClose,
                                                int           &outInteger );

TA_LIB_API int TA_CDLHIKKAKEMOD_StateFree( struct TA_CDLHIKKAKEMOD_State* _state );


/*
 * TA_CDLHOMINGPIGEON - Homing Pigeon
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLHOMINGPIGEON( int    startIdx,
                                          int    endIdx,
                                                     const double inOpen[],
                                                     const double inHigh[],
                                                     const double inLow[],
                                                     const double inClose[],
                                                     int          *outBegIdx,
                                                     int          *outNBElement,
                                                     int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLHOMINGPIGEON( int    startIdx,
                                            int    endIdx,
                                                       const float  inOpen[],
                                                       const float  inHigh[],
                                                       const float  inLow[],
                                                       const float  inClose[],
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       int           outInteger[] );

TA_LIB_API int TA_CDLHOMINGPIGEON_Lookback( void );


TA_LIB_API struct TA_CDLHOMINGPIGEON_Data {
                                                     const double inOpen;
                                                     const double inHigh;
                                                     const double inLow;
                                                     const double inClose;
                                                     };
TA_LIB_API struct TA_CDLHOMINGPIGEON_Struct {
                                            int mem_size;
                                            int mem_index;
                                            struct TA_CDLHOMINGPIGEON_Data* memory;
                                            };


TA_LIB_API int TA_CDLHOMINGPIGEON_StateInit( struct TA_CDLHOMINGPIGEON_State* _state );


TA_LIB_API int TA_CDLHOMINGPIGEON_State( struct TA_CDLHOMINGPIGEON_State* _state,
                                                  const double inOpen,
                                                  const double inHigh,
                                                  const double inLow,
                                                  const double inClose,
                                                  int           &outInteger );

TA_LIB_API int TA_CDLHOMINGPIGEON_StateFree( struct TA_CDLHOMINGPIGEON_State* _state );


/*
 * TA_CDLIDENTICAL3CROWS - Identical Three Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLIDENTICAL3CROWS( int    startIdx,
                                             int    endIdx,
                                                        const double inOpen[],
                                                        const double inHigh[],
                                                        const double inLow[],
                                                        const double inClose[],
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLIDENTICAL3CROWS( int    startIdx,
                                               int    endIdx,
                                                          const float  inOpen[],
                                                          const float  inHigh[],
                                                          const float  inLow[],
                                                          const float  inClose[],
                                                          int          *outBegIdx,
                                                          int          *outNBElement,
                                                          int           outInteger[] );

TA_LIB_API int TA_CDLIDENTICAL3CROWS_Lookback( void );


TA_LIB_API struct TA_CDLIDENTICAL3CROWS_Data {
                                                        const double inOpen;
                                                        const double inHigh;
                                                        const double inLow;
                                                        const double inClose;
                                                        };
TA_LIB_API struct TA_CDLIDENTICAL3CROWS_Struct {
                                               int mem_size;
                                               int mem_index;
                                               struct TA_CDLIDENTICAL3CROWS_Data* memory;
                                               };


TA_LIB_API int TA_CDLIDENTICAL3CROWS_StateInit( struct TA_CDLIDENTICAL3CROWS_State* _state );


TA_LIB_API int TA_CDLIDENTICAL3CROWS_State( struct TA_CDLIDENTICAL3CROWS_State* _state,
                                                     const double inOpen,
                                                     const double inHigh,
                                                     const double inLow,
                                                     const double inClose,
                                                     int           &outInteger );

TA_LIB_API int TA_CDLIDENTICAL3CROWS_StateFree( struct TA_CDLIDENTICAL3CROWS_State* _state );


/*
 * TA_CDLINNECK - In-Neck Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLINNECK( int    startIdx,
                                    int    endIdx,
                                               const double inOpen[],
                                               const double inHigh[],
                                               const double inLow[],
                                               const double inClose[],
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLINNECK( int    startIdx,
                                      int    endIdx,
                                                 const float  inOpen[],
                                                 const float  inHigh[],
                                                 const float  inLow[],
                                                 const float  inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API int TA_CDLINNECK_Lookback( void );


TA_LIB_API struct TA_CDLINNECK_Data {
                                               const double inOpen;
                                               const double inHigh;
                                               const double inLow;
                                               const double inClose;
                                               };
TA_LIB_API struct TA_CDLINNECK_Struct {
                                      int mem_size;
                                      int mem_index;
                                      struct TA_CDLINNECK_Data* memory;
                                      };


TA_LIB_API int TA_CDLINNECK_StateInit( struct TA_CDLINNECK_State* _state );


TA_LIB_API int TA_CDLINNECK_State( struct TA_CDLINNECK_State* _state,
                                            const double inOpen,
                                            const double inHigh,
                                            const double inLow,
                                            const double inClose,
                                            int           &outInteger );

TA_LIB_API int TA_CDLINNECK_StateFree( struct TA_CDLINNECK_State* _state );


/*
 * TA_CDLINVERTEDHAMMER - Inverted Hammer
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLINVERTEDHAMMER( int    startIdx,
                                            int    endIdx,
                                                       const double inOpen[],
                                                       const double inHigh[],
                                                       const double inLow[],
                                                       const double inClose[],
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLINVERTEDHAMMER( int    startIdx,
                                              int    endIdx,
                                                         const float  inOpen[],
                                                         const float  inHigh[],
                                                         const float  inLow[],
                                                         const float  inClose[],
                                                         int          *outBegIdx,
                                                         int          *outNBElement,
                                                         int           outInteger[] );

TA_LIB_API int TA_CDLINVERTEDHAMMER_Lookback( void );


TA_LIB_API struct TA_CDLINVERTEDHAMMER_Data {
                                                       const double inOpen;
                                                       const double inHigh;
                                                       const double inLow;
                                                       const double inClose;
                                                       };
TA_LIB_API struct TA_CDLINVERTEDHAMMER_Struct {
                                              int mem_size;
                                              int mem_index;
                                              struct TA_CDLINVERTEDHAMMER_Data* memory;
                                              };


TA_LIB_API int TA_CDLINVERTEDHAMMER_StateInit( struct TA_CDLINVERTEDHAMMER_State* _state );


TA_LIB_API int TA_CDLINVERTEDHAMMER_State( struct TA_CDLINVERTEDHAMMER_State* _state,
                                                    const double inOpen,
                                                    const double inHigh,
                                                    const double inLow,
                                                    const double inClose,
                                                    int           &outInteger );

TA_LIB_API int TA_CDLINVERTEDHAMMER_StateFree( struct TA_CDLINVERTEDHAMMER_State* _state );


/*
 * TA_CDLKICKING - Kicking
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLKICKING( int    startIdx,
                                     int    endIdx,
                                                const double inOpen[],
                                                const double inHigh[],
                                                const double inLow[],
                                                const double inClose[],
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLKICKING( int    startIdx,
                                       int    endIdx,
                                                  const float  inOpen[],
                                                  const float  inHigh[],
                                                  const float  inLow[],
                                                  const float  inClose[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  int           outInteger[] );

TA_LIB_API int TA_CDLKICKING_Lookback( void );


TA_LIB_API struct TA_CDLKICKING_Data {
                                                const double inOpen;
                                                const double inHigh;
                                                const double inLow;
                                                const double inClose;
                                                };
TA_LIB_API struct TA_CDLKICKING_Struct {
                                       int mem_size;
                                       int mem_index;
                                       struct TA_CDLKICKING_Data* memory;
                                       };


TA_LIB_API int TA_CDLKICKING_StateInit( struct TA_CDLKICKING_State* _state );


TA_LIB_API int TA_CDLKICKING_State( struct TA_CDLKICKING_State* _state,
                                             const double inOpen,
                                             const double inHigh,
                                             const double inLow,
                                             const double inClose,
                                             int           &outInteger );

TA_LIB_API int TA_CDLKICKING_StateFree( struct TA_CDLKICKING_State* _state );


/*
 * TA_CDLKICKINGBYLENGTH - Kicking - bull/bear determined by the longer marubozu
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLKICKINGBYLENGTH( int    startIdx,
                                             int    endIdx,
                                                        const double inOpen[],
                                                        const double inHigh[],
                                                        const double inLow[],
                                                        const double inClose[],
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLKICKINGBYLENGTH( int    startIdx,
                                               int    endIdx,
                                                          const float  inOpen[],
                                                          const float  inHigh[],
                                                          const float  inLow[],
                                                          const float  inClose[],
                                                          int          *outBegIdx,
                                                          int          *outNBElement,
                                                          int           outInteger[] );

TA_LIB_API int TA_CDLKICKINGBYLENGTH_Lookback( void );


TA_LIB_API struct TA_CDLKICKINGBYLENGTH_Data {
                                                        const double inOpen;
                                                        const double inHigh;
                                                        const double inLow;
                                                        const double inClose;
                                                        };
TA_LIB_API struct TA_CDLKICKINGBYLENGTH_Struct {
                                               int mem_size;
                                               int mem_index;
                                               struct TA_CDLKICKINGBYLENGTH_Data* memory;
                                               };


TA_LIB_API int TA_CDLKICKINGBYLENGTH_StateInit( struct TA_CDLKICKINGBYLENGTH_State* _state );


TA_LIB_API int TA_CDLKICKINGBYLENGTH_State( struct TA_CDLKICKINGBYLENGTH_State* _state,
                                                     const double inOpen,
                                                     const double inHigh,
                                                     const double inLow,
                                                     const double inClose,
                                                     int           &outInteger );

TA_LIB_API int TA_CDLKICKINGBYLENGTH_StateFree( struct TA_CDLKICKINGBYLENGTH_State* _state );


/*
 * TA_CDLLADDERBOTTOM - Ladder Bottom
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLLADDERBOTTOM( int    startIdx,
                                          int    endIdx,
                                                     const double inOpen[],
                                                     const double inHigh[],
                                                     const double inLow[],
                                                     const double inClose[],
                                                     int          *outBegIdx,
                                                     int          *outNBElement,
                                                     int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLLADDERBOTTOM( int    startIdx,
                                            int    endIdx,
                                                       const float  inOpen[],
                                                       const float  inHigh[],
                                                       const float  inLow[],
                                                       const float  inClose[],
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       int           outInteger[] );

TA_LIB_API int TA_CDLLADDERBOTTOM_Lookback( void );


TA_LIB_API struct TA_CDLLADDERBOTTOM_Data {
                                                     const double inOpen;
                                                     const double inHigh;
                                                     const double inLow;
                                                     const double inClose;
                                                     };
TA_LIB_API struct TA_CDLLADDERBOTTOM_Struct {
                                            int mem_size;
                                            int mem_index;
                                            struct TA_CDLLADDERBOTTOM_Data* memory;
                                            };


TA_LIB_API int TA_CDLLADDERBOTTOM_StateInit( struct TA_CDLLADDERBOTTOM_State* _state );


TA_LIB_API int TA_CDLLADDERBOTTOM_State( struct TA_CDLLADDERBOTTOM_State* _state,
                                                  const double inOpen,
                                                  const double inHigh,
                                                  const double inLow,
                                                  const double inClose,
                                                  int           &outInteger );

TA_LIB_API int TA_CDLLADDERBOTTOM_StateFree( struct TA_CDLLADDERBOTTOM_State* _state );


/*
 * TA_CDLLONGLEGGEDDOJI - Long Legged Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLLONGLEGGEDDOJI( int    startIdx,
                                            int    endIdx,
                                                       const double inOpen[],
                                                       const double inHigh[],
                                                       const double inLow[],
                                                       const double inClose[],
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLLONGLEGGEDDOJI( int    startIdx,
                                              int    endIdx,
                                                         const float  inOpen[],
                                                         const float  inHigh[],
                                                         const float  inLow[],
                                                         const float  inClose[],
                                                         int          *outBegIdx,
                                                         int          *outNBElement,
                                                         int           outInteger[] );

TA_LIB_API int TA_CDLLONGLEGGEDDOJI_Lookback( void );


TA_LIB_API struct TA_CDLLONGLEGGEDDOJI_Data {
                                                       const double inOpen;
                                                       const double inHigh;
                                                       const double inLow;
                                                       const double inClose;
                                                       };
TA_LIB_API struct TA_CDLLONGLEGGEDDOJI_Struct {
                                              int mem_size;
                                              int mem_index;
                                              struct TA_CDLLONGLEGGEDDOJI_Data* memory;
                                              };


TA_LIB_API int TA_CDLLONGLEGGEDDOJI_StateInit( struct TA_CDLLONGLEGGEDDOJI_State* _state );


TA_LIB_API int TA_CDLLONGLEGGEDDOJI_State( struct TA_CDLLONGLEGGEDDOJI_State* _state,
                                                    const double inOpen,
                                                    const double inHigh,
                                                    const double inLow,
                                                    const double inClose,
                                                    int           &outInteger );

TA_LIB_API int TA_CDLLONGLEGGEDDOJI_StateFree( struct TA_CDLLONGLEGGEDDOJI_State* _state );


/*
 * TA_CDLLONGLINE - Long Line Candle
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLLONGLINE( int    startIdx,
                                      int    endIdx,
                                                 const double inOpen[],
                                                 const double inHigh[],
                                                 const double inLow[],
                                                 const double inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLLONGLINE( int    startIdx,
                                        int    endIdx,
                                                   const float  inOpen[],
                                                   const float  inHigh[],
                                                   const float  inLow[],
                                                   const float  inClose[],
                                                   int          *outBegIdx,
                                                   int          *outNBElement,
                                                   int           outInteger[] );

TA_LIB_API int TA_CDLLONGLINE_Lookback( void );


TA_LIB_API struct TA_CDLLONGLINE_Data {
                                                 const double inOpen;
                                                 const double inHigh;
                                                 const double inLow;
                                                 const double inClose;
                                                 };
TA_LIB_API struct TA_CDLLONGLINE_Struct {
                                        int mem_size;
                                        int mem_index;
                                        struct TA_CDLLONGLINE_Data* memory;
                                        };


TA_LIB_API int TA_CDLLONGLINE_StateInit( struct TA_CDLLONGLINE_State* _state );


TA_LIB_API int TA_CDLLONGLINE_State( struct TA_CDLLONGLINE_State* _state,
                                              const double inOpen,
                                              const double inHigh,
                                              const double inLow,
                                              const double inClose,
                                              int           &outInteger );

TA_LIB_API int TA_CDLLONGLINE_StateFree( struct TA_CDLLONGLINE_State* _state );


/*
 * TA_CDLMARUBOZU - Marubozu
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLMARUBOZU( int    startIdx,
                                      int    endIdx,
                                                 const double inOpen[],
                                                 const double inHigh[],
                                                 const double inLow[],
                                                 const double inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLMARUBOZU( int    startIdx,
                                        int    endIdx,
                                                   const float  inOpen[],
                                                   const float  inHigh[],
                                                   const float  inLow[],
                                                   const float  inClose[],
                                                   int          *outBegIdx,
                                                   int          *outNBElement,
                                                   int           outInteger[] );

TA_LIB_API int TA_CDLMARUBOZU_Lookback( void );


TA_LIB_API struct TA_CDLMARUBOZU_Data {
                                                 const double inOpen;
                                                 const double inHigh;
                                                 const double inLow;
                                                 const double inClose;
                                                 };
TA_LIB_API struct TA_CDLMARUBOZU_Struct {
                                        int mem_size;
                                        int mem_index;
                                        struct TA_CDLMARUBOZU_Data* memory;
                                        };


TA_LIB_API int TA_CDLMARUBOZU_StateInit( struct TA_CDLMARUBOZU_State* _state );


TA_LIB_API int TA_CDLMARUBOZU_State( struct TA_CDLMARUBOZU_State* _state,
                                              const double inOpen,
                                              const double inHigh,
                                              const double inLow,
                                              const double inClose,
                                              int           &outInteger );

TA_LIB_API int TA_CDLMARUBOZU_StateFree( struct TA_CDLMARUBOZU_State* _state );


/*
 * TA_CDLMATCHINGLOW - Matching Low
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLMATCHINGLOW( int    startIdx,
                                         int    endIdx,
                                                    const double inOpen[],
                                                    const double inHigh[],
                                                    const double inLow[],
                                                    const double inClose[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLMATCHINGLOW( int    startIdx,
                                           int    endIdx,
                                                      const float  inOpen[],
                                                      const float  inHigh[],
                                                      const float  inLow[],
                                                      const float  inClose[],
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API int TA_CDLMATCHINGLOW_Lookback( void );


TA_LIB_API struct TA_CDLMATCHINGLOW_Data {
                                                    const double inOpen;
                                                    const double inHigh;
                                                    const double inLow;
                                                    const double inClose;
                                                    };
TA_LIB_API struct TA_CDLMATCHINGLOW_Struct {
                                           int mem_size;
                                           int mem_index;
                                           struct TA_CDLMATCHINGLOW_Data* memory;
                                           };


TA_LIB_API int TA_CDLMATCHINGLOW_StateInit( struct TA_CDLMATCHINGLOW_State* _state );


TA_LIB_API int TA_CDLMATCHINGLOW_State( struct TA_CDLMATCHINGLOW_State* _state,
                                                 const double inOpen,
                                                 const double inHigh,
                                                 const double inLow,
                                                 const double inClose,
                                                 int           &outInteger );

TA_LIB_API int TA_CDLMATCHINGLOW_StateFree( struct TA_CDLMATCHINGLOW_State* _state );


/*
 * TA_CDLMATHOLD - Mat Hold
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_CDLMATHOLD( int    startIdx,
                                     int    endIdx,
                                                const double inOpen[],
                                                const double inHigh[],
                                                const double inLow[],
                                                const double inClose[],
                                                double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLMATHOLD( int    startIdx,
                                       int    endIdx,
                                                  const float  inOpen[],
                                                  const float  inHigh[],
                                                  const float  inLow[],
                                                  const float  inClose[],
                                                  double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  int           outInteger[] );

TA_LIB_API int TA_CDLMATHOLD_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API struct TA_CDLMATHOLD_Data {
                                                const double inOpen;
                                                const double inHigh;
                                                const double inLow;
                                                const double inClose;
                                                };
TA_LIB_API struct TA_CDLMATHOLD_Struct {
                                       int mem_size;
                                       int mem_index;
                                       struct TA_CDLMATHOLD_Data* memory;
                                       double        optInPenetration; /* From 0 to TA_REAL_MAX */
                                       };


TA_LIB_API int TA_CDLMATHOLD_StateInit( struct TA_CDLMATHOLD_State* _state,
                                                 double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API int TA_CDLMATHOLD_State( struct TA_CDLMATHOLD_State* _state,
                                             const double inOpen,
                                             const double inHigh,
                                             const double inLow,
                                             const double inClose,
                                             double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                             int           &outInteger );

TA_LIB_API int TA_CDLMATHOLD_StateFree( struct TA_CDLMATHOLD_State* _state );


/*
 * TA_CDLMORNINGDOJISTAR - Morning Doji Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_CDLMORNINGDOJISTAR( int    startIdx,
                                             int    endIdx,
                                                        const double inOpen[],
                                                        const double inHigh[],
                                                        const double inLow[],
                                                        const double inClose[],
                                                        double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLMORNINGDOJISTAR( int    startIdx,
                                               int    endIdx,
                                                          const float  inOpen[],
                                                          const float  inHigh[],
                                                          const float  inLow[],
                                                          const float  inClose[],
                                                          double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                          int          *outBegIdx,
                                                          int          *outNBElement,
                                                          int           outInteger[] );

TA_LIB_API int TA_CDLMORNINGDOJISTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API struct TA_CDLMORNINGDOJISTAR_Data {
                                                        const double inOpen;
                                                        const double inHigh;
                                                        const double inLow;
                                                        const double inClose;
                                                        };
TA_LIB_API struct TA_CDLMORNINGDOJISTAR_Struct {
                                               int mem_size;
                                               int mem_index;
                                               struct TA_CDLMORNINGDOJISTAR_Data* memory;
                                               double        optInPenetration; /* From 0 to TA_REAL_MAX */
                                               };


TA_LIB_API int TA_CDLMORNINGDOJISTAR_StateInit( struct TA_CDLMORNINGDOJISTAR_State* _state,
                                                         double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API int TA_CDLMORNINGDOJISTAR_State( struct TA_CDLMORNINGDOJISTAR_State* _state,
                                                     const double inOpen,
                                                     const double inHigh,
                                                     const double inLow,
                                                     const double inClose,
                                                     double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                     int           &outInteger );

TA_LIB_API int TA_CDLMORNINGDOJISTAR_StateFree( struct TA_CDLMORNINGDOJISTAR_State* _state );


/*
 * TA_CDLMORNINGSTAR - Morning Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_CDLMORNINGSTAR( int    startIdx,
                                         int    endIdx,
                                                    const double inOpen[],
                                                    const double inHigh[],
                                                    const double inLow[],
                                                    const double inClose[],
                                                    double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLMORNINGSTAR( int    startIdx,
                                           int    endIdx,
                                                      const float  inOpen[],
                                                      const float  inHigh[],
                                                      const float  inLow[],
                                                      const float  inClose[],
                                                      double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API int TA_CDLMORNINGSTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API struct TA_CDLMORNINGSTAR_Data {
                                                    const double inOpen;
                                                    const double inHigh;
                                                    const double inLow;
                                                    const double inClose;
                                                    };
TA_LIB_API struct TA_CDLMORNINGSTAR_Struct {
                                           int mem_size;
                                           int mem_index;
                                           struct TA_CDLMORNINGSTAR_Data* memory;
                                           double        optInPenetration; /* From 0 to TA_REAL_MAX */
                                           };


TA_LIB_API int TA_CDLMORNINGSTAR_StateInit( struct TA_CDLMORNINGSTAR_State* _state,
                                                     double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_LIB_API int TA_CDLMORNINGSTAR_State( struct TA_CDLMORNINGSTAR_State* _state,
                                                 const double inOpen,
                                                 const double inHigh,
                                                 const double inLow,
                                                 const double inClose,
                                                 double        optInPenetration, /* From 0 to TA_REAL_MAX */
                                                 int           &outInteger );

TA_LIB_API int TA_CDLMORNINGSTAR_StateFree( struct TA_CDLMORNINGSTAR_State* _state );


/*
 * TA_CDLONNECK - On-Neck Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLONNECK( int    startIdx,
                                    int    endIdx,
                                               const double inOpen[],
                                               const double inHigh[],
                                               const double inLow[],
                                               const double inClose[],
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLONNECK( int    startIdx,
                                      int    endIdx,
                                                 const float  inOpen[],
                                                 const float  inHigh[],
                                                 const float  inLow[],
                                                 const float  inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API int TA_CDLONNECK_Lookback( void );


TA_LIB_API struct TA_CDLONNECK_Data {
                                               const double inOpen;
                                               const double inHigh;
                                               const double inLow;
                                               const double inClose;
                                               };
TA_LIB_API struct TA_CDLONNECK_Struct {
                                      int mem_size;
                                      int mem_index;
                                      struct TA_CDLONNECK_Data* memory;
                                      };


TA_LIB_API int TA_CDLONNECK_StateInit( struct TA_CDLONNECK_State* _state );


TA_LIB_API int TA_CDLONNECK_State( struct TA_CDLONNECK_State* _state,
                                            const double inOpen,
                                            const double inHigh,
                                            const double inLow,
                                            const double inClose,
                                            int           &outInteger );

TA_LIB_API int TA_CDLONNECK_StateFree( struct TA_CDLONNECK_State* _state );


/*
 * TA_CDLPIERCING - Piercing Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLPIERCING( int    startIdx,
                                      int    endIdx,
                                                 const double inOpen[],
                                                 const double inHigh[],
                                                 const double inLow[],
                                                 const double inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLPIERCING( int    startIdx,
                                        int    endIdx,
                                                   const float  inOpen[],
                                                   const float  inHigh[],
                                                   const float  inLow[],
                                                   const float  inClose[],
                                                   int          *outBegIdx,
                                                   int          *outNBElement,
                                                   int           outInteger[] );

TA_LIB_API int TA_CDLPIERCING_Lookback( void );


TA_LIB_API struct TA_CDLPIERCING_Data {
                                                 const double inOpen;
                                                 const double inHigh;
                                                 const double inLow;
                                                 const double inClose;
                                                 };
TA_LIB_API struct TA_CDLPIERCING_Struct {
                                        int mem_size;
                                        int mem_index;
                                        struct TA_CDLPIERCING_Data* memory;
                                        };


TA_LIB_API int TA_CDLPIERCING_StateInit( struct TA_CDLPIERCING_State* _state );


TA_LIB_API int TA_CDLPIERCING_State( struct TA_CDLPIERCING_State* _state,
                                              const double inOpen,
                                              const double inHigh,
                                              const double inLow,
                                              const double inClose,
                                              int           &outInteger );

TA_LIB_API int TA_CDLPIERCING_StateFree( struct TA_CDLPIERCING_State* _state );


/*
 * TA_CDLRICKSHAWMAN - Rickshaw Man
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLRICKSHAWMAN( int    startIdx,
                                         int    endIdx,
                                                    const double inOpen[],
                                                    const double inHigh[],
                                                    const double inLow[],
                                                    const double inClose[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLRICKSHAWMAN( int    startIdx,
                                           int    endIdx,
                                                      const float  inOpen[],
                                                      const float  inHigh[],
                                                      const float  inLow[],
                                                      const float  inClose[],
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API int TA_CDLRICKSHAWMAN_Lookback( void );


TA_LIB_API struct TA_CDLRICKSHAWMAN_Data {
                                                    const double inOpen;
                                                    const double inHigh;
                                                    const double inLow;
                                                    const double inClose;
                                                    };
TA_LIB_API struct TA_CDLRICKSHAWMAN_Struct {
                                           int mem_size;
                                           int mem_index;
                                           struct TA_CDLRICKSHAWMAN_Data* memory;
                                           };


TA_LIB_API int TA_CDLRICKSHAWMAN_StateInit( struct TA_CDLRICKSHAWMAN_State* _state );


TA_LIB_API int TA_CDLRICKSHAWMAN_State( struct TA_CDLRICKSHAWMAN_State* _state,
                                                 const double inOpen,
                                                 const double inHigh,
                                                 const double inLow,
                                                 const double inClose,
                                                 int           &outInteger );

TA_LIB_API int TA_CDLRICKSHAWMAN_StateFree( struct TA_CDLRICKSHAWMAN_State* _state );


/*
 * TA_CDLRISEFALL3METHODS - Rising/Falling Three Methods
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLRISEFALL3METHODS( int    startIdx,
                                              int    endIdx,
                                                         const double inOpen[],
                                                         const double inHigh[],
                                                         const double inLow[],
                                                         const double inClose[],
                                                         int          *outBegIdx,
                                                         int          *outNBElement,
                                                         int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLRISEFALL3METHODS( int    startIdx,
                                                int    endIdx,
                                                           const float  inOpen[],
                                                           const float  inHigh[],
                                                           const float  inLow[],
                                                           const float  inClose[],
                                                           int          *outBegIdx,
                                                           int          *outNBElement,
                                                           int           outInteger[] );

TA_LIB_API int TA_CDLRISEFALL3METHODS_Lookback( void );


TA_LIB_API struct TA_CDLRISEFALL3METHODS_Data {
                                                         const double inOpen;
                                                         const double inHigh;
                                                         const double inLow;
                                                         const double inClose;
                                                         };
TA_LIB_API struct TA_CDLRISEFALL3METHODS_Struct {
                                                int mem_size;
                                                int mem_index;
                                                struct TA_CDLRISEFALL3METHODS_Data* memory;
                                                };


TA_LIB_API int TA_CDLRISEFALL3METHODS_StateInit( struct TA_CDLRISEFALL3METHODS_State* _state );


TA_LIB_API int TA_CDLRISEFALL3METHODS_State( struct TA_CDLRISEFALL3METHODS_State* _state,
                                                      const double inOpen,
                                                      const double inHigh,
                                                      const double inLow,
                                                      const double inClose,
                                                      int           &outInteger );

TA_LIB_API int TA_CDLRISEFALL3METHODS_StateFree( struct TA_CDLRISEFALL3METHODS_State* _state );


/*
 * TA_CDLSEPARATINGLINES - Separating Lines
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLSEPARATINGLINES( int    startIdx,
                                             int    endIdx,
                                                        const double inOpen[],
                                                        const double inHigh[],
                                                        const double inLow[],
                                                        const double inClose[],
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLSEPARATINGLINES( int    startIdx,
                                               int    endIdx,
                                                          const float  inOpen[],
                                                          const float  inHigh[],
                                                          const float  inLow[],
                                                          const float  inClose[],
                                                          int          *outBegIdx,
                                                          int          *outNBElement,
                                                          int           outInteger[] );

TA_LIB_API int TA_CDLSEPARATINGLINES_Lookback( void );


TA_LIB_API struct TA_CDLSEPARATINGLINES_Data {
                                                        const double inOpen;
                                                        const double inHigh;
                                                        const double inLow;
                                                        const double inClose;
                                                        };
TA_LIB_API struct TA_CDLSEPARATINGLINES_Struct {
                                               int mem_size;
                                               int mem_index;
                                               struct TA_CDLSEPARATINGLINES_Data* memory;
                                               };


TA_LIB_API int TA_CDLSEPARATINGLINES_StateInit( struct TA_CDLSEPARATINGLINES_State* _state );


TA_LIB_API int TA_CDLSEPARATINGLINES_State( struct TA_CDLSEPARATINGLINES_State* _state,
                                                     const double inOpen,
                                                     const double inHigh,
                                                     const double inLow,
                                                     const double inClose,
                                                     int           &outInteger );

TA_LIB_API int TA_CDLSEPARATINGLINES_StateFree( struct TA_CDLSEPARATINGLINES_State* _state );


/*
 * TA_CDLSHOOTINGSTAR - Shooting Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLSHOOTINGSTAR( int    startIdx,
                                          int    endIdx,
                                                     const double inOpen[],
                                                     const double inHigh[],
                                                     const double inLow[],
                                                     const double inClose[],
                                                     int          *outBegIdx,
                                                     int          *outNBElement,
                                                     int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLSHOOTINGSTAR( int    startIdx,
                                            int    endIdx,
                                                       const float  inOpen[],
                                                       const float  inHigh[],
                                                       const float  inLow[],
                                                       const float  inClose[],
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       int           outInteger[] );

TA_LIB_API int TA_CDLSHOOTINGSTAR_Lookback( void );


TA_LIB_API struct TA_CDLSHOOTINGSTAR_Data {
                                                     const double inOpen;
                                                     const double inHigh;
                                                     const double inLow;
                                                     const double inClose;
                                                     };
TA_LIB_API struct TA_CDLSHOOTINGSTAR_Struct {
                                            int mem_size;
                                            int mem_index;
                                            struct TA_CDLSHOOTINGSTAR_Data* memory;
                                            };


TA_LIB_API int TA_CDLSHOOTINGSTAR_StateInit( struct TA_CDLSHOOTINGSTAR_State* _state );


TA_LIB_API int TA_CDLSHOOTINGSTAR_State( struct TA_CDLSHOOTINGSTAR_State* _state,
                                                  const double inOpen,
                                                  const double inHigh,
                                                  const double inLow,
                                                  const double inClose,
                                                  int           &outInteger );

TA_LIB_API int TA_CDLSHOOTINGSTAR_StateFree( struct TA_CDLSHOOTINGSTAR_State* _state );


/*
 * TA_CDLSHORTLINE - Short Line Candle
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLSHORTLINE( int    startIdx,
                                       int    endIdx,
                                                  const double inOpen[],
                                                  const double inHigh[],
                                                  const double inLow[],
                                                  const double inClose[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLSHORTLINE( int    startIdx,
                                         int    endIdx,
                                                    const float  inOpen[],
                                                    const float  inHigh[],
                                                    const float  inLow[],
                                                    const float  inClose[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API int TA_CDLSHORTLINE_Lookback( void );


TA_LIB_API struct TA_CDLSHORTLINE_Data {
                                                  const double inOpen;
                                                  const double inHigh;
                                                  const double inLow;
                                                  const double inClose;
                                                  };
TA_LIB_API struct TA_CDLSHORTLINE_Struct {
                                         int mem_size;
                                         int mem_index;
                                         struct TA_CDLSHORTLINE_Data* memory;
                                         };


TA_LIB_API int TA_CDLSHORTLINE_StateInit( struct TA_CDLSHORTLINE_State* _state );


TA_LIB_API int TA_CDLSHORTLINE_State( struct TA_CDLSHORTLINE_State* _state,
                                               const double inOpen,
                                               const double inHigh,
                                               const double inLow,
                                               const double inClose,
                                               int           &outInteger );

TA_LIB_API int TA_CDLSHORTLINE_StateFree( struct TA_CDLSHORTLINE_State* _state );


/*
 * TA_CDLSPINNINGTOP - Spinning Top
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLSPINNINGTOP( int    startIdx,
                                         int    endIdx,
                                                    const double inOpen[],
                                                    const double inHigh[],
                                                    const double inLow[],
                                                    const double inClose[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLSPINNINGTOP( int    startIdx,
                                           int    endIdx,
                                                      const float  inOpen[],
                                                      const float  inHigh[],
                                                      const float  inLow[],
                                                      const float  inClose[],
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API int TA_CDLSPINNINGTOP_Lookback( void );


TA_LIB_API struct TA_CDLSPINNINGTOP_Data {
                                                    const double inOpen;
                                                    const double inHigh;
                                                    const double inLow;
                                                    const double inClose;
                                                    };
TA_LIB_API struct TA_CDLSPINNINGTOP_Struct {
                                           int mem_size;
                                           int mem_index;
                                           struct TA_CDLSPINNINGTOP_Data* memory;
                                           };


TA_LIB_API int TA_CDLSPINNINGTOP_StateInit( struct TA_CDLSPINNINGTOP_State* _state );


TA_LIB_API int TA_CDLSPINNINGTOP_State( struct TA_CDLSPINNINGTOP_State* _state,
                                                 const double inOpen,
                                                 const double inHigh,
                                                 const double inLow,
                                                 const double inClose,
                                                 int           &outInteger );

TA_LIB_API int TA_CDLSPINNINGTOP_StateFree( struct TA_CDLSPINNINGTOP_State* _state );


/*
 * TA_CDLSTALLEDPATTERN - Stalled Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLSTALLEDPATTERN( int    startIdx,
                                            int    endIdx,
                                                       const double inOpen[],
                                                       const double inHigh[],
                                                       const double inLow[],
                                                       const double inClose[],
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLSTALLEDPATTERN( int    startIdx,
                                              int    endIdx,
                                                         const float  inOpen[],
                                                         const float  inHigh[],
                                                         const float  inLow[],
                                                         const float  inClose[],
                                                         int          *outBegIdx,
                                                         int          *outNBElement,
                                                         int           outInteger[] );

TA_LIB_API int TA_CDLSTALLEDPATTERN_Lookback( void );


TA_LIB_API struct TA_CDLSTALLEDPATTERN_Data {
                                                       const double inOpen;
                                                       const double inHigh;
                                                       const double inLow;
                                                       const double inClose;
                                                       };
TA_LIB_API struct TA_CDLSTALLEDPATTERN_Struct {
                                              int mem_size;
                                              int mem_index;
                                              struct TA_CDLSTALLEDPATTERN_Data* memory;
                                              };


TA_LIB_API int TA_CDLSTALLEDPATTERN_StateInit( struct TA_CDLSTALLEDPATTERN_State* _state );


TA_LIB_API int TA_CDLSTALLEDPATTERN_State( struct TA_CDLSTALLEDPATTERN_State* _state,
                                                    const double inOpen,
                                                    const double inHigh,
                                                    const double inLow,
                                                    const double inClose,
                                                    int           &outInteger );

TA_LIB_API int TA_CDLSTALLEDPATTERN_StateFree( struct TA_CDLSTALLEDPATTERN_State* _state );


/*
 * TA_CDLSTICKSANDWICH - Stick Sandwich
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLSTICKSANDWICH( int    startIdx,
                                           int    endIdx,
                                                      const double inOpen[],
                                                      const double inHigh[],
                                                      const double inLow[],
                                                      const double inClose[],
                                                      int          *outBegIdx,
                                                      int          *outNBElement,
                                                      int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLSTICKSANDWICH( int    startIdx,
                                             int    endIdx,
                                                        const float  inOpen[],
                                                        const float  inHigh[],
                                                        const float  inLow[],
                                                        const float  inClose[],
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API int TA_CDLSTICKSANDWICH_Lookback( void );


TA_LIB_API struct TA_CDLSTICKSANDWICH_Data {
                                                      const double inOpen;
                                                      const double inHigh;
                                                      const double inLow;
                                                      const double inClose;
                                                      };
TA_LIB_API struct TA_CDLSTICKSANDWICH_Struct {
                                             int mem_size;
                                             int mem_index;
                                             struct TA_CDLSTICKSANDWICH_Data* memory;
                                             };


TA_LIB_API int TA_CDLSTICKSANDWICH_StateInit( struct TA_CDLSTICKSANDWICH_State* _state );


TA_LIB_API int TA_CDLSTICKSANDWICH_State( struct TA_CDLSTICKSANDWICH_State* _state,
                                                   const double inOpen,
                                                   const double inHigh,
                                                   const double inLow,
                                                   const double inClose,
                                                   int           &outInteger );

TA_LIB_API int TA_CDLSTICKSANDWICH_StateFree( struct TA_CDLSTICKSANDWICH_State* _state );


/*
 * TA_CDLTAKURI - Takuri (Dragonfly Doji with very long lower shadow)
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLTAKURI( int    startIdx,
                                    int    endIdx,
                                               const double inOpen[],
                                               const double inHigh[],
                                               const double inLow[],
                                               const double inClose[],
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLTAKURI( int    startIdx,
                                      int    endIdx,
                                                 const float  inOpen[],
                                                 const float  inHigh[],
                                                 const float  inLow[],
                                                 const float  inClose[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outInteger[] );

TA_LIB_API int TA_CDLTAKURI_Lookback( void );


TA_LIB_API struct TA_CDLTAKURI_Data {
                                               const double inOpen;
                                               const double inHigh;
                                               const double inLow;
                                               const double inClose;
                                               };
TA_LIB_API struct TA_CDLTAKURI_Struct {
                                      int mem_size;
                                      int mem_index;
                                      struct TA_CDLTAKURI_Data* memory;
                                      };


TA_LIB_API int TA_CDLTAKURI_StateInit( struct TA_CDLTAKURI_State* _state );


TA_LIB_API int TA_CDLTAKURI_State( struct TA_CDLTAKURI_State* _state,
                                            const double inOpen,
                                            const double inHigh,
                                            const double inLow,
                                            const double inClose,
                                            int           &outInteger );

TA_LIB_API int TA_CDLTAKURI_StateFree( struct TA_CDLTAKURI_State* _state );


/*
 * TA_CDLTASUKIGAP - Tasuki Gap
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLTASUKIGAP( int    startIdx,
                                       int    endIdx,
                                                  const double inOpen[],
                                                  const double inHigh[],
                                                  const double inLow[],
                                                  const double inClose[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLTASUKIGAP( int    startIdx,
                                         int    endIdx,
                                                    const float  inOpen[],
                                                    const float  inHigh[],
                                                    const float  inLow[],
                                                    const float  inClose[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API int TA_CDLTASUKIGAP_Lookback( void );


TA_LIB_API struct TA_CDLTASUKIGAP_Data {
                                                  const double inOpen;
                                                  const double inHigh;
                                                  const double inLow;
                                                  const double inClose;
                                                  };
TA_LIB_API struct TA_CDLTASUKIGAP_Struct {
                                         int mem_size;
                                         int mem_index;
                                         struct TA_CDLTASUKIGAP_Data* memory;
                                         };


TA_LIB_API int TA_CDLTASUKIGAP_StateInit( struct TA_CDLTASUKIGAP_State* _state );


TA_LIB_API int TA_CDLTASUKIGAP_State( struct TA_CDLTASUKIGAP_State* _state,
                                               const double inOpen,
                                               const double inHigh,
                                               const double inLow,
                                               const double inClose,
                                               int           &outInteger );

TA_LIB_API int TA_CDLTASUKIGAP_StateFree( struct TA_CDLTASUKIGAP_State* _state );


/*
 * TA_CDLTHRUSTING - Thrusting Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLTHRUSTING( int    startIdx,
                                       int    endIdx,
                                                  const double inOpen[],
                                                  const double inHigh[],
                                                  const double inLow[],
                                                  const double inClose[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLTHRUSTING( int    startIdx,
                                         int    endIdx,
                                                    const float  inOpen[],
                                                    const float  inHigh[],
                                                    const float  inLow[],
                                                    const float  inClose[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API int TA_CDLTHRUSTING_Lookback( void );


TA_LIB_API struct TA_CDLTHRUSTING_Data {
                                                  const double inOpen;
                                                  const double inHigh;
                                                  const double inLow;
                                                  const double inClose;
                                                  };
TA_LIB_API struct TA_CDLTHRUSTING_Struct {
                                         int mem_size;
                                         int mem_index;
                                         struct TA_CDLTHRUSTING_Data* memory;
                                         };


TA_LIB_API int TA_CDLTHRUSTING_StateInit( struct TA_CDLTHRUSTING_State* _state );


TA_LIB_API int TA_CDLTHRUSTING_State( struct TA_CDLTHRUSTING_State* _state,
                                               const double inOpen,
                                               const double inHigh,
                                               const double inLow,
                                               const double inClose,
                                               int           &outInteger );

TA_LIB_API int TA_CDLTHRUSTING_StateFree( struct TA_CDLTHRUSTING_State* _state );


/*
 * TA_CDLTRISTAR - Tristar Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLTRISTAR( int    startIdx,
                                     int    endIdx,
                                                const double inOpen[],
                                                const double inHigh[],
                                                const double inLow[],
                                                const double inClose[],
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLTRISTAR( int    startIdx,
                                       int    endIdx,
                                                  const float  inOpen[],
                                                  const float  inHigh[],
                                                  const float  inLow[],
                                                  const float  inClose[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  int           outInteger[] );

TA_LIB_API int TA_CDLTRISTAR_Lookback( void );


TA_LIB_API struct TA_CDLTRISTAR_Data {
                                                const double inOpen;
                                                const double inHigh;
                                                const double inLow;
                                                const double inClose;
                                                };
TA_LIB_API struct TA_CDLTRISTAR_Struct {
                                       int mem_size;
                                       int mem_index;
                                       struct TA_CDLTRISTAR_Data* memory;
                                       };


TA_LIB_API int TA_CDLTRISTAR_StateInit( struct TA_CDLTRISTAR_State* _state );


TA_LIB_API int TA_CDLTRISTAR_State( struct TA_CDLTRISTAR_State* _state,
                                             const double inOpen,
                                             const double inHigh,
                                             const double inLow,
                                             const double inClose,
                                             int           &outInteger );

TA_LIB_API int TA_CDLTRISTAR_StateFree( struct TA_CDLTRISTAR_State* _state );


/*
 * TA_CDLUNIQUE3RIVER - Unique 3 River
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLUNIQUE3RIVER( int    startIdx,
                                          int    endIdx,
                                                     const double inOpen[],
                                                     const double inHigh[],
                                                     const double inLow[],
                                                     const double inClose[],
                                                     int          *outBegIdx,
                                                     int          *outNBElement,
                                                     int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLUNIQUE3RIVER( int    startIdx,
                                            int    endIdx,
                                                       const float  inOpen[],
                                                       const float  inHigh[],
                                                       const float  inLow[],
                                                       const float  inClose[],
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       int           outInteger[] );

TA_LIB_API int TA_CDLUNIQUE3RIVER_Lookback( void );


TA_LIB_API struct TA_CDLUNIQUE3RIVER_Data {
                                                     const double inOpen;
                                                     const double inHigh;
                                                     const double inLow;
                                                     const double inClose;
                                                     };
TA_LIB_API struct TA_CDLUNIQUE3RIVER_Struct {
                                            int mem_size;
                                            int mem_index;
                                            struct TA_CDLUNIQUE3RIVER_Data* memory;
                                            };


TA_LIB_API int TA_CDLUNIQUE3RIVER_StateInit( struct TA_CDLUNIQUE3RIVER_State* _state );


TA_LIB_API int TA_CDLUNIQUE3RIVER_State( struct TA_CDLUNIQUE3RIVER_State* _state,
                                                  const double inOpen,
                                                  const double inHigh,
                                                  const double inLow,
                                                  const double inClose,
                                                  int           &outInteger );

TA_LIB_API int TA_CDLUNIQUE3RIVER_StateFree( struct TA_CDLUNIQUE3RIVER_State* _state );


/*
 * TA_CDLUPSIDEGAP2CROWS - Upside Gap Two Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLUPSIDEGAP2CROWS( int    startIdx,
                                             int    endIdx,
                                                        const double inOpen[],
                                                        const double inHigh[],
                                                        const double inLow[],
                                                        const double inClose[],
                                                        int          *outBegIdx,
                                                        int          *outNBElement,
                                                        int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLUPSIDEGAP2CROWS( int    startIdx,
                                               int    endIdx,
                                                          const float  inOpen[],
                                                          const float  inHigh[],
                                                          const float  inLow[],
                                                          const float  inClose[],
                                                          int          *outBegIdx,
                                                          int          *outNBElement,
                                                          int           outInteger[] );

TA_LIB_API int TA_CDLUPSIDEGAP2CROWS_Lookback( void );


TA_LIB_API struct TA_CDLUPSIDEGAP2CROWS_Data {
                                                        const double inOpen;
                                                        const double inHigh;
                                                        const double inLow;
                                                        const double inClose;
                                                        };
TA_LIB_API struct TA_CDLUPSIDEGAP2CROWS_Struct {
                                               int mem_size;
                                               int mem_index;
                                               struct TA_CDLUPSIDEGAP2CROWS_Data* memory;
                                               };


TA_LIB_API int TA_CDLUPSIDEGAP2CROWS_StateInit( struct TA_CDLUPSIDEGAP2CROWS_State* _state );


TA_LIB_API int TA_CDLUPSIDEGAP2CROWS_State( struct TA_CDLUPSIDEGAP2CROWS_State* _state,
                                                     const double inOpen,
                                                     const double inHigh,
                                                     const double inLow,
                                                     const double inClose,
                                                     int           &outInteger );

TA_LIB_API int TA_CDLUPSIDEGAP2CROWS_StateFree( struct TA_CDLUPSIDEGAP2CROWS_State* _state );


/*
 * TA_CDLXSIDEGAP3METHODS - Upside/Downside Gap Three Methods
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_CDLXSIDEGAP3METHODS( int    startIdx,
                                              int    endIdx,
                                                         const double inOpen[],
                                                         const double inHigh[],
                                                         const double inLow[],
                                                         const double inClose[],
                                                         int          *outBegIdx,
                                                         int          *outNBElement,
                                                         int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_CDLXSIDEGAP3METHODS( int    startIdx,
                                                int    endIdx,
                                                           const float  inOpen[],
                                                           const float  inHigh[],
                                                           const float  inLow[],
                                                           const float  inClose[],
                                                           int          *outBegIdx,
                                                           int          *outNBElement,
                                                           int           outInteger[] );

TA_LIB_API int TA_CDLXSIDEGAP3METHODS_Lookback( void );


TA_LIB_API struct TA_CDLXSIDEGAP3METHODS_Data {
                                                         const double inOpen;
                                                         const double inHigh;
                                                         const double inLow;
                                                         const double inClose;
                                                         };
TA_LIB_API struct TA_CDLXSIDEGAP3METHODS_Struct {
                                                int mem_size;
                                                int mem_index;
                                                struct TA_CDLXSIDEGAP3METHODS_Data* memory;
                                                };


TA_LIB_API int TA_CDLXSIDEGAP3METHODS_StateInit( struct TA_CDLXSIDEGAP3METHODS_State* _state );


TA_LIB_API int TA_CDLXSIDEGAP3METHODS_State( struct TA_CDLXSIDEGAP3METHODS_State* _state,
                                                      const double inOpen,
                                                      const double inHigh,
                                                      const double inLow,
                                                      const double inClose,
                                                      int           &outInteger );

TA_LIB_API int TA_CDLXSIDEGAP3METHODS_StateFree( struct TA_CDLXSIDEGAP3METHODS_State* _state );


/*
 * TA_CEIL - Vector Ceil
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_CEIL( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_CEIL( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_CEIL_Lookback( void );


TA_LIB_API struct TA_CEIL_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_CEIL_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_CEIL_Data* memory;
                                 };


TA_LIB_API int TA_CEIL_StateInit( struct TA_CEIL_State* _state );


TA_LIB_API int TA_CEIL_State( struct TA_CEIL_State* _state,
                                       const double inReal,
                                       double        &outReal );

TA_LIB_API int TA_CEIL_StateFree( struct TA_CEIL_State* _state );


/*
 * TA_CMO - Chande Momentum Oscillator
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_CMO( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_CMO( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_CMO_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_CMO_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_CMO_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_CMO_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_CMO_StateInit( struct TA_CMO_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_CMO_State( struct TA_CMO_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_CMO_StateFree( struct TA_CMO_State* _state );


/*
 * TA_CORREL - Pearson's Correlation Coefficient (r)
 * 
 * Input  = double, double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_CORREL( int    startIdx,
                                 int    endIdx,
                                            const double inReal0[],
                                            const double inReal1[],
                                            int           optInTimePeriod, /* From 1 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API TA_RetCode TA_S_CORREL( int    startIdx,
                                   int    endIdx,
                                              const float  inReal0[],
                                              const float  inReal1[],
                                              int           optInTimePeriod, /* From 1 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API int TA_CORREL_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_CORREL_Data {
                                            const double inReal0;
                                            const double inReal1;
                                            };
TA_LIB_API struct TA_CORREL_Struct {
                                   int mem_size;
                                   int mem_index;
                                   struct TA_CORREL_Data* memory;
                                   int           optInTimePeriod; /* From 1 to 100000 */
                                   };


TA_LIB_API int TA_CORREL_StateInit( struct TA_CORREL_State* _state,
                                             int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_CORREL_State( struct TA_CORREL_State* _state,
                                         const double inReal0,
                                         const double inReal1,
                                         int           optInTimePeriod, /* From 1 to 100000 */
                                         double        &outReal );

TA_LIB_API int TA_CORREL_StateFree( struct TA_CORREL_State* _state );


/*
 * TA_COS - Vector Trigonometric Cos
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_COS( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_COS( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_COS_Lookback( void );


TA_LIB_API struct TA_COS_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_COS_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_COS_Data* memory;
                                };


TA_LIB_API int TA_COS_StateInit( struct TA_COS_State* _state );


TA_LIB_API int TA_COS_State( struct TA_COS_State* _state,
                                      const double inReal,
                                      double        &outReal );

TA_LIB_API int TA_COS_StateFree( struct TA_COS_State* _state );


/*
 * TA_COSH - Vector Trigonometric Cosh
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_COSH( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_COSH( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_COSH_Lookback( void );


TA_LIB_API struct TA_COSH_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_COSH_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_COSH_Data* memory;
                                 };


TA_LIB_API int TA_COSH_StateInit( struct TA_COSH_State* _state );


TA_LIB_API int TA_COSH_State( struct TA_COSH_State* _state,
                                       const double inReal,
                                       double        &outReal );

TA_LIB_API int TA_COSH_StateFree( struct TA_COSH_State* _state );


/*
 * TA_DEMA - Double Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_DEMA( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int           optInTimePeriod, /* From 2 to 100000 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_DEMA( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int           optInTimePeriod, /* From 2 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_DEMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_DEMA_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_DEMA_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_DEMA_Data* memory;
                                 int           optInTimePeriod; /* From 2 to 100000 */
                                 };


TA_LIB_API int TA_DEMA_StateInit( struct TA_DEMA_State* _state,
                                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_DEMA_State( struct TA_DEMA_State* _state,
                                       const double inReal,
                                       int           optInTimePeriod, /* From 2 to 100000 */
                                       double        &outReal );

TA_LIB_API int TA_DEMA_StateFree( struct TA_DEMA_State* _state );


/*
 * TA_DIV - Vector Arithmetic Div
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_DIV( int    startIdx,
                              int    endIdx,
                                         const double inReal0[],
                                         const double inReal1[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_DIV( int    startIdx,
                                int    endIdx,
                                           const float  inReal0[],
                                           const float  inReal1[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_DIV_Lookback( void );


TA_LIB_API struct TA_DIV_Data {
                                         const double inReal0;
                                         const double inReal1;
                                         };
TA_LIB_API struct TA_DIV_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_DIV_Data* memory;
                                };


TA_LIB_API int TA_DIV_StateInit( struct TA_DIV_State* _state );


TA_LIB_API int TA_DIV_State( struct TA_DIV_State* _state,
                                      const double inReal0,
                                      const double inReal1,
                                      double        &outReal );

TA_LIB_API int TA_DIV_StateFree( struct TA_DIV_State* _state );


/*
 * TA_DX - Directional Movement Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_DX( int    startIdx,
                             int    endIdx,
                                        const double inHigh[],
                                        const double inLow[],
                                        const double inClose[],
                                        int           optInTimePeriod, /* From 2 to 100000 */
                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        double        outReal[] );

TA_LIB_API TA_RetCode TA_S_DX( int    startIdx,
                               int    endIdx,
                                          const float  inHigh[],
                                          const float  inLow[],
                                          const float  inClose[],
                                          int           optInTimePeriod, /* From 2 to 100000 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API int TA_DX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_DX_Data {
                                        const double inHigh;
                                        const double inLow;
                                        const double inClose;
                                        };
TA_LIB_API struct TA_DX_Struct {
                               int mem_size;
                               int mem_index;
                               struct TA_DX_Data* memory;
                               int           optInTimePeriod; /* From 2 to 100000 */
                               };


TA_LIB_API int TA_DX_StateInit( struct TA_DX_State* _state,
                                         int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_DX_State( struct TA_DX_State* _state,
                                     const double inHigh,
                                     const double inLow,
                                     const double inClose,
                                     int           optInTimePeriod, /* From 2 to 100000 */
                                     double        &outReal );

TA_LIB_API int TA_DX_StateFree( struct TA_DX_State* _state );


/*
 * TA_EMA - Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_EMA( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_EMA( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_EMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_EMA_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_EMA_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_EMA_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_EMA_StateInit( struct TA_EMA_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_EMA_State( struct TA_EMA_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_EMA_StateFree( struct TA_EMA_State* _state );


/*
 * TA_EXP - Vector Arithmetic Exp
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_EXP( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_EXP( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_EXP_Lookback( void );


TA_LIB_API struct TA_EXP_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_EXP_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_EXP_Data* memory;
                                };


TA_LIB_API int TA_EXP_StateInit( struct TA_EXP_State* _state );


TA_LIB_API int TA_EXP_State( struct TA_EXP_State* _state,
                                      const double inReal,
                                      double        &outReal );

TA_LIB_API int TA_EXP_StateFree( struct TA_EXP_State* _state );


/*
 * TA_FLOOR - Vector Floor
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_FLOOR( int    startIdx,
                                int    endIdx,
                                           const double inReal[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API TA_RetCode TA_S_FLOOR( int    startIdx,
                                  int    endIdx,
                                             const float  inReal[],
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outReal[] );

TA_LIB_API int TA_FLOOR_Lookback( void );


TA_LIB_API struct TA_FLOOR_Data {
                                           const double inReal;
                                           };
TA_LIB_API struct TA_FLOOR_Struct {
                                  int mem_size;
                                  int mem_index;
                                  struct TA_FLOOR_Data* memory;
                                  };


TA_LIB_API int TA_FLOOR_StateInit( struct TA_FLOOR_State* _state );


TA_LIB_API int TA_FLOOR_State( struct TA_FLOOR_State* _state,
                                        const double inReal,
                                        double        &outReal );

TA_LIB_API int TA_FLOOR_StateFree( struct TA_FLOOR_State* _state );


/*
 * TA_HT_DCPERIOD - Hilbert Transform - Dominant Cycle Period
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_HT_DCPERIOD( int    startIdx,
                                      int    endIdx,
                                                 const double inReal[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 double        outReal[] );

TA_LIB_API TA_RetCode TA_S_HT_DCPERIOD( int    startIdx,
                                        int    endIdx,
                                                   const float  inReal[],
                                                   int          *outBegIdx,
                                                   int          *outNBElement,
                                                   double        outReal[] );

TA_LIB_API int TA_HT_DCPERIOD_Lookback( void );


TA_LIB_API struct TA_HT_DCPERIOD_Data {
                                                 const double inReal;
                                                 };
TA_LIB_API struct TA_HT_DCPERIOD_Struct {
                                        int mem_size;
                                        int mem_index;
                                        struct TA_HT_DCPERIOD_Data* memory;
                                        };


TA_LIB_API int TA_HT_DCPERIOD_StateInit( struct TA_HT_DCPERIOD_State* _state );


TA_LIB_API int TA_HT_DCPERIOD_State( struct TA_HT_DCPERIOD_State* _state,
                                              const double inReal,
                                              double        &outReal );

TA_LIB_API int TA_HT_DCPERIOD_StateFree( struct TA_HT_DCPERIOD_State* _state );


/*
 * TA_HT_DCPHASE - Hilbert Transform - Dominant Cycle Phase
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_HT_DCPHASE( int    startIdx,
                                     int    endIdx,
                                                const double inReal[],
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outReal[] );

TA_LIB_API TA_RetCode TA_S_HT_DCPHASE( int    startIdx,
                                       int    endIdx,
                                                  const float  inReal[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  double        outReal[] );

TA_LIB_API int TA_HT_DCPHASE_Lookback( void );


TA_LIB_API struct TA_HT_DCPHASE_Data {
                                                const double inReal;
                                                };
TA_LIB_API struct TA_HT_DCPHASE_Struct {
                                       int mem_size;
                                       int mem_index;
                                       struct TA_HT_DCPHASE_Data* memory;
                                       };


TA_LIB_API int TA_HT_DCPHASE_StateInit( struct TA_HT_DCPHASE_State* _state );


TA_LIB_API int TA_HT_DCPHASE_State( struct TA_HT_DCPHASE_State* _state,
                                             const double inReal,
                                             double        &outReal );

TA_LIB_API int TA_HT_DCPHASE_StateFree( struct TA_HT_DCPHASE_State* _state );


/*
 * TA_HT_PHASOR - Hilbert Transform - Phasor Components
 * 
 * Input  = double
 * Output = double, double
 * 
 */
TA_LIB_API TA_RetCode TA_HT_PHASOR( int    startIdx,
                                    int    endIdx,
                                               const double inReal[],
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               double        outInPhase[],
                                               double        outQuadrature[] );

TA_LIB_API TA_RetCode TA_S_HT_PHASOR( int    startIdx,
                                      int    endIdx,
                                                 const float  inReal[],
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 double        outInPhase[],
                                                 double        outQuadrature[] );

TA_LIB_API int TA_HT_PHASOR_Lookback( void );


TA_LIB_API struct TA_HT_PHASOR_Data {
                                               const double inReal;
                                               };
TA_LIB_API struct TA_HT_PHASOR_Struct {
                                      int mem_size;
                                      int mem_index;
                                      struct TA_HT_PHASOR_Data* memory;
                                      };


TA_LIB_API int TA_HT_PHASOR_StateInit( struct TA_HT_PHASOR_State* _state );


TA_LIB_API int TA_HT_PHASOR_State( struct TA_HT_PHASOR_State* _state,
                                            const double inReal,
                                            double        &outInPhase,
                                            double        &outQuadrature );

TA_LIB_API int TA_HT_PHASOR_StateFree( struct TA_HT_PHASOR_State* _state );


/*
 * TA_HT_SINE - Hilbert Transform - SineWave
 * 
 * Input  = double
 * Output = double, double
 * 
 */
TA_LIB_API TA_RetCode TA_HT_SINE( int    startIdx,
                                  int    endIdx,
                                             const double inReal[],
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outSine[],
                                             double        outLeadSine[] );

TA_LIB_API TA_RetCode TA_S_HT_SINE( int    startIdx,
                                    int    endIdx,
                                               const float  inReal[],
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               double        outSine[],
                                               double        outLeadSine[] );

TA_LIB_API int TA_HT_SINE_Lookback( void );


TA_LIB_API struct TA_HT_SINE_Data {
                                             const double inReal;
                                             };
TA_LIB_API struct TA_HT_SINE_Struct {
                                    int mem_size;
                                    int mem_index;
                                    struct TA_HT_SINE_Data* memory;
                                    };


TA_LIB_API int TA_HT_SINE_StateInit( struct TA_HT_SINE_State* _state );


TA_LIB_API int TA_HT_SINE_State( struct TA_HT_SINE_State* _state,
                                          const double inReal,
                                          double        &outSine,
                                          double        &outLeadSine );

TA_LIB_API int TA_HT_SINE_StateFree( struct TA_HT_SINE_State* _state );


/*
 * TA_HT_TRENDLINE - Hilbert Transform - Instantaneous Trendline
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_HT_TRENDLINE( int    startIdx,
                                       int    endIdx,
                                                  const double inReal[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  double        outReal[] );

TA_LIB_API TA_RetCode TA_S_HT_TRENDLINE( int    startIdx,
                                         int    endIdx,
                                                    const float  inReal[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    double        outReal[] );

TA_LIB_API int TA_HT_TRENDLINE_Lookback( void );


TA_LIB_API struct TA_HT_TRENDLINE_Data {
                                                  const double inReal;
                                                  };
TA_LIB_API struct TA_HT_TRENDLINE_Struct {
                                         int mem_size;
                                         int mem_index;
                                         struct TA_HT_TRENDLINE_Data* memory;
                                         };


TA_LIB_API int TA_HT_TRENDLINE_StateInit( struct TA_HT_TRENDLINE_State* _state );


TA_LIB_API int TA_HT_TRENDLINE_State( struct TA_HT_TRENDLINE_State* _state,
                                               const double inReal,
                                               double        &outReal );

TA_LIB_API int TA_HT_TRENDLINE_StateFree( struct TA_HT_TRENDLINE_State* _state );


/*
 * TA_HT_TRENDMODE - Hilbert Transform - Trend vs Cycle Mode
 * 
 * Input  = double
 * Output = int
 * 
 */
TA_LIB_API TA_RetCode TA_HT_TRENDMODE( int    startIdx,
                                       int    endIdx,
                                                  const double inReal[],
                                                  int          *outBegIdx,
                                                  int          *outNBElement,
                                                  int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_HT_TRENDMODE( int    startIdx,
                                         int    endIdx,
                                                    const float  inReal[],
                                                    int          *outBegIdx,
                                                    int          *outNBElement,
                                                    int           outInteger[] );

TA_LIB_API int TA_HT_TRENDMODE_Lookback( void );


TA_LIB_API struct TA_HT_TRENDMODE_Data {
                                                  const double inReal;
                                                  };
TA_LIB_API struct TA_HT_TRENDMODE_Struct {
                                         int mem_size;
                                         int mem_index;
                                         struct TA_HT_TRENDMODE_Data* memory;
                                         };


TA_LIB_API int TA_HT_TRENDMODE_StateInit( struct TA_HT_TRENDMODE_State* _state );


TA_LIB_API int TA_HT_TRENDMODE_State( struct TA_HT_TRENDMODE_State* _state,
                                               const double inReal,
                                               int           &outInteger );

TA_LIB_API int TA_HT_TRENDMODE_StateFree( struct TA_HT_TRENDMODE_State* _state );


/*
 * TA_IMI - Intraday Momentum Index
 * 
 * Input  = Open, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_IMI( int    startIdx,
                              int    endIdx,
                                         const double inOpen[],
                                         const double inClose[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_IMI( int    startIdx,
                                int    endIdx,
                                           const float  inOpen[],
                                           const float  inClose[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_IMI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_IMI_Data {
                                         const double inOpen;
                                         const double inClose;
                                         };
TA_LIB_API struct TA_IMI_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_IMI_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_IMI_StateInit( struct TA_IMI_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_IMI_State( struct TA_IMI_State* _state,
                                      const double inOpen,
                                      const double inClose,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_IMI_StateFree( struct TA_IMI_State* _state );


/*
 * TA_KAMA - Kaufman Adaptive Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_KAMA( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int           optInTimePeriod, /* From 2 to 100000 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_KAMA( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int           optInTimePeriod, /* From 2 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_KAMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_KAMA_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_KAMA_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_KAMA_Data* memory;
                                 int           optInTimePeriod; /* From 2 to 100000 */
                                 };


TA_LIB_API int TA_KAMA_StateInit( struct TA_KAMA_State* _state,
                                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_KAMA_State( struct TA_KAMA_State* _state,
                                       const double inReal,
                                       int           optInTimePeriod, /* From 2 to 100000 */
                                       double        &outReal );

TA_LIB_API int TA_KAMA_StateFree( struct TA_KAMA_State* _state );


/*
 * TA_LINEARREG - Linear Regression
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_LINEARREG( int    startIdx,
                                    int    endIdx,
                                               const double inReal[],
                                               int           optInTimePeriod, /* From 2 to 100000 */
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               double        outReal[] );

TA_LIB_API TA_RetCode TA_S_LINEARREG( int    startIdx,
                                      int    endIdx,
                                                 const float  inReal[],
                                                 int           optInTimePeriod, /* From 2 to 100000 */
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 double        outReal[] );

TA_LIB_API int TA_LINEARREG_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_LINEARREG_Data {
                                               const double inReal;
                                               };
TA_LIB_API struct TA_LINEARREG_Struct {
                                      int mem_size;
                                      int mem_index;
                                      struct TA_LINEARREG_Data* memory;
                                      int           optInTimePeriod; /* From 2 to 100000 */
                                      };


TA_LIB_API int TA_LINEARREG_StateInit( struct TA_LINEARREG_State* _state,
                                                int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_LINEARREG_State( struct TA_LINEARREG_State* _state,
                                            const double inReal,
                                            int           optInTimePeriod, /* From 2 to 100000 */
                                            double        &outReal );

TA_LIB_API int TA_LINEARREG_StateFree( struct TA_LINEARREG_State* _state );


/*
 * TA_LINEARREG_ANGLE - Linear Regression Angle
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_LINEARREG_ANGLE( int    startIdx,
                                          int    endIdx,
                                                     const double inReal[],
                                                     int           optInTimePeriod, /* From 2 to 100000 */
                                                     int          *outBegIdx,
                                                     int          *outNBElement,
                                                     double        outReal[] );

TA_LIB_API TA_RetCode TA_S_LINEARREG_ANGLE( int    startIdx,
                                            int    endIdx,
                                                       const float  inReal[],
                                                       int           optInTimePeriod, /* From 2 to 100000 */
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       double        outReal[] );

TA_LIB_API int TA_LINEARREG_ANGLE_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_LINEARREG_ANGLE_Data {
                                                     const double inReal;
                                                     };
TA_LIB_API struct TA_LINEARREG_ANGLE_Struct {
                                            int mem_size;
                                            int mem_index;
                                            struct TA_LINEARREG_ANGLE_Data* memory;
                                            int           optInTimePeriod; /* From 2 to 100000 */
                                            };


TA_LIB_API int TA_LINEARREG_ANGLE_StateInit( struct TA_LINEARREG_ANGLE_State* _state,
                                                      int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_LINEARREG_ANGLE_State( struct TA_LINEARREG_ANGLE_State* _state,
                                                  const double inReal,
                                                  int           optInTimePeriod, /* From 2 to 100000 */
                                                  double        &outReal );

TA_LIB_API int TA_LINEARREG_ANGLE_StateFree( struct TA_LINEARREG_ANGLE_State* _state );


/*
 * TA_LINEARREG_INTERCEPT - Linear Regression Intercept
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_LINEARREG_INTERCEPT( int    startIdx,
                                              int    endIdx,
                                                         const double inReal[],
                                                         int           optInTimePeriod, /* From 2 to 100000 */
                                                         int          *outBegIdx,
                                                         int          *outNBElement,
                                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_LINEARREG_INTERCEPT( int    startIdx,
                                                int    endIdx,
                                                           const float  inReal[],
                                                           int           optInTimePeriod, /* From 2 to 100000 */
                                                           int          *outBegIdx,
                                                           int          *outNBElement,
                                                           double        outReal[] );

TA_LIB_API int TA_LINEARREG_INTERCEPT_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_LINEARREG_INTERCEPT_Data {
                                                         const double inReal;
                                                         };
TA_LIB_API struct TA_LINEARREG_INTERCEPT_Struct {
                                                int mem_size;
                                                int mem_index;
                                                struct TA_LINEARREG_INTERCEPT_Data* memory;
                                                int           optInTimePeriod; /* From 2 to 100000 */
                                                };


TA_LIB_API int TA_LINEARREG_INTERCEPT_StateInit( struct TA_LINEARREG_INTERCEPT_State* _state,
                                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_LINEARREG_INTERCEPT_State( struct TA_LINEARREG_INTERCEPT_State* _state,
                                                      const double inReal,
                                                      int           optInTimePeriod, /* From 2 to 100000 */
                                                      double        &outReal );

TA_LIB_API int TA_LINEARREG_INTERCEPT_StateFree( struct TA_LINEARREG_INTERCEPT_State* _state );


/*
 * TA_LINEARREG_SLOPE - Linear Regression Slope
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_LINEARREG_SLOPE( int    startIdx,
                                          int    endIdx,
                                                     const double inReal[],
                                                     int           optInTimePeriod, /* From 2 to 100000 */
                                                     int          *outBegIdx,
                                                     int          *outNBElement,
                                                     double        outReal[] );

TA_LIB_API TA_RetCode TA_S_LINEARREG_SLOPE( int    startIdx,
                                            int    endIdx,
                                                       const float  inReal[],
                                                       int           optInTimePeriod, /* From 2 to 100000 */
                                                       int          *outBegIdx,
                                                       int          *outNBElement,
                                                       double        outReal[] );

TA_LIB_API int TA_LINEARREG_SLOPE_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_LINEARREG_SLOPE_Data {
                                                     const double inReal;
                                                     };
TA_LIB_API struct TA_LINEARREG_SLOPE_Struct {
                                            int mem_size;
                                            int mem_index;
                                            struct TA_LINEARREG_SLOPE_Data* memory;
                                            int           optInTimePeriod; /* From 2 to 100000 */
                                            };


TA_LIB_API int TA_LINEARREG_SLOPE_StateInit( struct TA_LINEARREG_SLOPE_State* _state,
                                                      int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_LINEARREG_SLOPE_State( struct TA_LINEARREG_SLOPE_State* _state,
                                                  const double inReal,
                                                  int           optInTimePeriod, /* From 2 to 100000 */
                                                  double        &outReal );

TA_LIB_API int TA_LINEARREG_SLOPE_StateFree( struct TA_LINEARREG_SLOPE_State* _state );


/*
 * TA_LN - Vector Log Natural
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_LN( int    startIdx,
                             int    endIdx,
                                        const double inReal[],
                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        double        outReal[] );

TA_LIB_API TA_RetCode TA_S_LN( int    startIdx,
                               int    endIdx,
                                          const float  inReal[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API int TA_LN_Lookback( void );


TA_LIB_API struct TA_LN_Data {
                                        const double inReal;
                                        };
TA_LIB_API struct TA_LN_Struct {
                               int mem_size;
                               int mem_index;
                               struct TA_LN_Data* memory;
                               };


TA_LIB_API int TA_LN_StateInit( struct TA_LN_State* _state );


TA_LIB_API int TA_LN_State( struct TA_LN_State* _state,
                                     const double inReal,
                                     double        &outReal );

TA_LIB_API int TA_LN_StateFree( struct TA_LN_State* _state );


/*
 * TA_LOG10 - Vector Log10
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_LOG10( int    startIdx,
                                int    endIdx,
                                           const double inReal[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API TA_RetCode TA_S_LOG10( int    startIdx,
                                  int    endIdx,
                                             const float  inReal[],
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outReal[] );

TA_LIB_API int TA_LOG10_Lookback( void );


TA_LIB_API struct TA_LOG10_Data {
                                           const double inReal;
                                           };
TA_LIB_API struct TA_LOG10_Struct {
                                  int mem_size;
                                  int mem_index;
                                  struct TA_LOG10_Data* memory;
                                  };


TA_LIB_API int TA_LOG10_StateInit( struct TA_LOG10_State* _state );


TA_LIB_API int TA_LOG10_State( struct TA_LOG10_State* _state,
                                        const double inReal,
                                        double        &outReal );

TA_LIB_API int TA_LOG10_StateFree( struct TA_LOG10_State* _state );


/*
 * TA_MA - Moving average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MA( int    startIdx,
                             int    endIdx,
                                        const double inReal[],
                                        int           optInTimePeriod, /* From 1 to 100000 */
                                        TA_MAType     optInMAType,                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MA( int    startIdx,
                               int    endIdx,
                                          const float  inReal[],
                                          int           optInTimePeriod, /* From 1 to 100000 */
                                          TA_MAType     optInMAType,                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API int TA_MA_Lookback( int           optInTimePeriod, /* From 1 to 100000 */
                                        TA_MAType     optInMAType ); 

TA_LIB_API struct TA_MA_Data {
                                        const double inReal;
                                        };
TA_LIB_API struct TA_MA_Struct {
                               int mem_size;
                               int mem_index;
                               struct TA_MA_Data* memory;
                               int           optInTimePeriod; /* From 1 to 100000 */
                               TA_MAType     optInMAType;                               };


TA_LIB_API int TA_MA_StateInit( struct TA_MA_State* _state,
                                         int           optInTimePeriod, /* From 1 to 100000 */
                                         TA_MAType     optInMAType ); 

TA_LIB_API int TA_MA_State( struct TA_MA_State* _state,
                                     const double inReal,
                                     int           optInTimePeriod, /* From 1 to 100000 */
                                     TA_MAType     optInMAType,                                     double        &outReal );

TA_LIB_API int TA_MA_StateFree( struct TA_MA_State* _state );


/*
 * TA_MACD - Moving Average Convergence/Divergence
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInSignalPeriod:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MACD( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int           optInFastPeriod, /* From 2 to 100000 */
                                          int           optInSlowPeriod, /* From 2 to 100000 */
                                          int           optInSignalPeriod, /* From 1 to 100000 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outMACD[],
                                          double        outMACDSignal[],
                                          double        outMACDHist[] );

TA_LIB_API TA_RetCode TA_S_MACD( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int           optInFastPeriod, /* From 2 to 100000 */
                                            int           optInSlowPeriod, /* From 2 to 100000 */
                                            int           optInSignalPeriod, /* From 1 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outMACD[],
                                            double        outMACDSignal[],
                                            double        outMACDHist[] );

TA_LIB_API int TA_MACD_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                                          int           optInSlowPeriod, /* From 2 to 100000 */
                                          int           optInSignalPeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_MACD_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_MACD_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_MACD_Data* memory;
                                 int           optInFastPeriod; /* From 2 to 100000 */
                                 int           optInSlowPeriod; /* From 2 to 100000 */
                                 int           optInSignalPeriod; /* From 1 to 100000 */
                                 };


TA_LIB_API int TA_MACD_StateInit( struct TA_MACD_State* _state,
                                           int           optInFastPeriod, /* From 2 to 100000 */
                                           int           optInSlowPeriod, /* From 2 to 100000 */
                                           int           optInSignalPeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_MACD_State( struct TA_MACD_State* _state,
                                       const double inReal,
                                       int           optInFastPeriod, /* From 2 to 100000 */
                                       int           optInSlowPeriod, /* From 2 to 100000 */
                                       int           optInSignalPeriod, /* From 1 to 100000 */
                                       double        &outMACD,
                                       double        &outMACDSignal,
                                       double        &outMACDHist );

TA_LIB_API int TA_MACD_StateFree( struct TA_MACD_State* _state );


/*
 * TA_MACDEXT - MACD with controllable MA type
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInFastMAType:
 *    Type of Moving Average for fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInSlowMAType:
 *    Type of Moving Average for slow MA
 * 
 * optInSignalPeriod:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * optInSignalMAType:
 *    Type of Moving Average for signal line
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MACDEXT( int    startIdx,
                                  int    endIdx,
                                             const double inReal[],
                                             int           optInFastPeriod, /* From 2 to 100000 */
                                             TA_MAType     optInFastMAType,                                             int           optInSlowPeriod, /* From 2 to 100000 */
                                             TA_MAType     optInSlowMAType,                                             int           optInSignalPeriod, /* From 1 to 100000 */
                                             TA_MAType     optInSignalMAType,                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outMACD[],
                                             double        outMACDSignal[],
                                             double        outMACDHist[] );

TA_LIB_API TA_RetCode TA_S_MACDEXT( int    startIdx,
                                    int    endIdx,
                                               const float  inReal[],
                                               int           optInFastPeriod, /* From 2 to 100000 */
                                               TA_MAType     optInFastMAType,                                               int           optInSlowPeriod, /* From 2 to 100000 */
                                               TA_MAType     optInSlowMAType,                                               int           optInSignalPeriod, /* From 1 to 100000 */
                                               TA_MAType     optInSignalMAType,                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               double        outMACD[],
                                               double        outMACDSignal[],
                                               double        outMACDHist[] );

TA_LIB_API int TA_MACDEXT_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                                             TA_MAType     optInFastMAType,                                             int           optInSlowPeriod, /* From 2 to 100000 */
                                             TA_MAType     optInSlowMAType,                                             int           optInSignalPeriod, /* From 1 to 100000 */
                                             TA_MAType     optInSignalMAType ); 

TA_LIB_API struct TA_MACDEXT_Data {
                                             const double inReal;
                                             };
TA_LIB_API struct TA_MACDEXT_Struct {
                                    int mem_size;
                                    int mem_index;
                                    struct TA_MACDEXT_Data* memory;
                                    int           optInFastPeriod; /* From 2 to 100000 */
                                    TA_MAType     optInFastMAType;                                    int           optInSlowPeriod; /* From 2 to 100000 */
                                    TA_MAType     optInSlowMAType;                                    int           optInSignalPeriod; /* From 1 to 100000 */
                                    TA_MAType     optInSignalMAType;                                    };


TA_LIB_API int TA_MACDEXT_StateInit( struct TA_MACDEXT_State* _state,
                                              int           optInFastPeriod, /* From 2 to 100000 */
                                              TA_MAType     optInFastMAType,                                              int           optInSlowPeriod, /* From 2 to 100000 */
                                              TA_MAType     optInSlowMAType,                                              int           optInSignalPeriod, /* From 1 to 100000 */
                                              TA_MAType     optInSignalMAType ); 

TA_LIB_API int TA_MACDEXT_State( struct TA_MACDEXT_State* _state,
                                          const double inReal,
                                          int           optInFastPeriod, /* From 2 to 100000 */
                                          TA_MAType     optInFastMAType,                                          int           optInSlowPeriod, /* From 2 to 100000 */
                                          TA_MAType     optInSlowMAType,                                          int           optInSignalPeriod, /* From 1 to 100000 */
                                          TA_MAType     optInSignalMAType,                                          double        &outMACD,
                                          double        &outMACDSignal,
                                          double        &outMACDHist );

TA_LIB_API int TA_MACDEXT_StateFree( struct TA_MACDEXT_State* _state );


/*
 * TA_MACDFIX - Moving Average Convergence/Divergence Fix 12/26
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInSignalPeriod:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MACDFIX( int    startIdx,
                                  int    endIdx,
                                             const double inReal[],
                                             int           optInSignalPeriod, /* From 1 to 100000 */
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outMACD[],
                                             double        outMACDSignal[],
                                             double        outMACDHist[] );

TA_LIB_API TA_RetCode TA_S_MACDFIX( int    startIdx,
                                    int    endIdx,
                                               const float  inReal[],
                                               int           optInSignalPeriod, /* From 1 to 100000 */
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               double        outMACD[],
                                               double        outMACDSignal[],
                                               double        outMACDHist[] );

TA_LIB_API int TA_MACDFIX_Lookback( int           optInSignalPeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_MACDFIX_Data {
                                             const double inReal;
                                             };
TA_LIB_API struct TA_MACDFIX_Struct {
                                    int mem_size;
                                    int mem_index;
                                    struct TA_MACDFIX_Data* memory;
                                    int           optInSignalPeriod; /* From 1 to 100000 */
                                    };


TA_LIB_API int TA_MACDFIX_StateInit( struct TA_MACDFIX_State* _state,
                                              int           optInSignalPeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_MACDFIX_State( struct TA_MACDFIX_State* _state,
                                          const double inReal,
                                          int           optInSignalPeriod, /* From 1 to 100000 */
                                          double        &outMACD,
                                          double        &outMACDSignal,
                                          double        &outMACDHist );

TA_LIB_API int TA_MACDFIX_StateFree( struct TA_MACDFIX_State* _state );


/*
 * TA_MAMA - MESA Adaptive Moving Average
 * 
 * Input  = double
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastLimit:(From 0.01 to 0.99)
 *    Upper limit use in the adaptive algorithm
 * 
 * optInSlowLimit:(From 0.01 to 0.99)
 *    Lower limit use in the adaptive algorithm
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MAMA( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          double        optInFastLimit, /* From 0.01 to 0.99 */
                                          double        optInSlowLimit, /* From 0.01 to 0.99 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outMAMA[],
                                          double        outFAMA[] );

TA_LIB_API TA_RetCode TA_S_MAMA( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            double        optInFastLimit, /* From 0.01 to 0.99 */
                                            double        optInSlowLimit, /* From 0.01 to 0.99 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outMAMA[],
                                            double        outFAMA[] );

TA_LIB_API int TA_MAMA_Lookback( double        optInFastLimit, /* From 0.01 to 0.99 */
                                          double        optInSlowLimit );  /* From 0.01 to 0.99 */


TA_LIB_API struct TA_MAMA_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_MAMA_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_MAMA_Data* memory;
                                 double        optInFastLimit; /* From 0.01 to 0.99 */
                                 double        optInSlowLimit; /* From 0.01 to 0.99 */
                                 };


TA_LIB_API int TA_MAMA_StateInit( struct TA_MAMA_State* _state,
                                           double        optInFastLimit, /* From 0.01 to 0.99 */
                                           double        optInSlowLimit );  /* From 0.01 to 0.99 */


TA_LIB_API int TA_MAMA_State( struct TA_MAMA_State* _state,
                                       const double inReal,
                                       double        optInFastLimit, /* From 0.01 to 0.99 */
                                       double        optInSlowLimit, /* From 0.01 to 0.99 */
                                       double        &outMAMA,
                                       double        &outFAMA );

TA_LIB_API int TA_MAMA_StateFree( struct TA_MAMA_State* _state );


/*
 * TA_MAVP - Moving average with variable period
 * 
 * Input  = double, double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInMinPeriod:(From 2 to 100000)
 *    Value less than minimum will be changed to Minimum period
 * 
 * optInMaxPeriod:(From 2 to 100000)
 *    Value higher than maximum will be changed to Maximum period
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MAVP( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          const double inPeriods[],
                                          int           optInMinPeriod, /* From 2 to 100000 */
                                          int           optInMaxPeriod, /* From 2 to 100000 */
                                          TA_MAType     optInMAType,                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MAVP( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            const float  inPeriods[],
                                            int           optInMinPeriod, /* From 2 to 100000 */
                                            int           optInMaxPeriod, /* From 2 to 100000 */
                                            TA_MAType     optInMAType,                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_MAVP_Lookback( int           optInMinPeriod, /* From 2 to 100000 */
                                          int           optInMaxPeriod, /* From 2 to 100000 */
                                          TA_MAType     optInMAType ); 

TA_LIB_API struct TA_MAVP_Data {
                                          const double inReal;
                                          const double inPeriods;
                                          };
TA_LIB_API struct TA_MAVP_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_MAVP_Data* memory;
                                 int           optInMinPeriod; /* From 2 to 100000 */
                                 int           optInMaxPeriod; /* From 2 to 100000 */
                                 TA_MAType     optInMAType;                                 };


TA_LIB_API int TA_MAVP_StateInit( struct TA_MAVP_State* _state,
                                           int           optInMinPeriod, /* From 2 to 100000 */
                                           int           optInMaxPeriod, /* From 2 to 100000 */
                                           TA_MAType     optInMAType ); 

TA_LIB_API int TA_MAVP_State( struct TA_MAVP_State* _state,
                                       const double inReal,
                                       const double inPeriods,
                                       int           optInMinPeriod, /* From 2 to 100000 */
                                       int           optInMaxPeriod, /* From 2 to 100000 */
                                       TA_MAType     optInMAType,                                       double        &outReal );

TA_LIB_API int TA_MAVP_StateFree( struct TA_MAVP_State* _state );


/*
 * TA_MAX - Highest value over a specified period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MAX( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MAX( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_MAX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_MAX_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_MAX_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_MAX_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_MAX_StateInit( struct TA_MAX_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_MAX_State( struct TA_MAX_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_MAX_StateFree( struct TA_MAX_State* _state );


/*
 * TA_MAXINDEX - Index of highest value over a specified period
 * 
 * Input  = double
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MAXINDEX( int    startIdx,
                                   int    endIdx,
                                              const double inReal[],
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_MAXINDEX( int    startIdx,
                                     int    endIdx,
                                                const float  inReal[],
                                                int           optInTimePeriod, /* From 2 to 100000 */
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                int           outInteger[] );

TA_LIB_API int TA_MAXINDEX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_MAXINDEX_Data {
                                              const double inReal;
                                              };
TA_LIB_API struct TA_MAXINDEX_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_MAXINDEX_Data* memory;
                                     int           optInTimePeriod; /* From 2 to 100000 */
                                     };


TA_LIB_API int TA_MAXINDEX_StateInit( struct TA_MAXINDEX_State* _state,
                                               int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_MAXINDEX_State( struct TA_MAXINDEX_State* _state,
                                           const double inReal,
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int           &outInteger );

TA_LIB_API int TA_MAXINDEX_StateFree( struct TA_MAXINDEX_State* _state );


/*
 * TA_MEDPRICE - Median Price
 * 
 * Input  = High, Low
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_MEDPRICE( int    startIdx,
                                   int    endIdx,
                                              const double inHigh[],
                                              const double inLow[],
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MEDPRICE( int    startIdx,
                                     int    endIdx,
                                                const float  inHigh[],
                                                const float  inLow[],
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outReal[] );

TA_LIB_API int TA_MEDPRICE_Lookback( void );


TA_LIB_API struct TA_MEDPRICE_Data {
                                              const double inHigh;
                                              const double inLow;
                                              };
TA_LIB_API struct TA_MEDPRICE_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_MEDPRICE_Data* memory;
                                     };


TA_LIB_API int TA_MEDPRICE_StateInit( struct TA_MEDPRICE_State* _state );


TA_LIB_API int TA_MEDPRICE_State( struct TA_MEDPRICE_State* _state,
                                           const double inHigh,
                                           const double inLow,
                                           double        &outReal );

TA_LIB_API int TA_MEDPRICE_StateFree( struct TA_MEDPRICE_State* _state );


/*
 * TA_MFI - Money Flow Index
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MFI( int    startIdx,
                              int    endIdx,
                                         const double inHigh[],
                                         const double inLow[],
                                         const double inClose[],
                                         const double inVolume[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MFI( int    startIdx,
                                int    endIdx,
                                           const float  inHigh[],
                                           const float  inLow[],
                                           const float  inClose[],
                                           const float  inVolume[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_MFI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_MFI_Data {
                                         const double inHigh;
                                         const double inLow;
                                         const double inClose;
                                         const double inVolume;
                                         };
TA_LIB_API struct TA_MFI_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_MFI_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_MFI_StateInit( struct TA_MFI_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_MFI_State( struct TA_MFI_State* _state,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      const double inVolume,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_MFI_StateFree( struct TA_MFI_State* _state );


/*
 * TA_MIDPOINT - MidPoint over period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MIDPOINT( int    startIdx,
                                   int    endIdx,
                                              const double inReal[],
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MIDPOINT( int    startIdx,
                                     int    endIdx,
                                                const float  inReal[],
                                                int           optInTimePeriod, /* From 2 to 100000 */
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outReal[] );

TA_LIB_API int TA_MIDPOINT_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_MIDPOINT_Data {
                                              const double inReal;
                                              };
TA_LIB_API struct TA_MIDPOINT_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_MIDPOINT_Data* memory;
                                     int           optInTimePeriod; /* From 2 to 100000 */
                                     };


TA_LIB_API int TA_MIDPOINT_StateInit( struct TA_MIDPOINT_State* _state,
                                               int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_MIDPOINT_State( struct TA_MIDPOINT_State* _state,
                                           const double inReal,
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           double        &outReal );

TA_LIB_API int TA_MIDPOINT_StateFree( struct TA_MIDPOINT_State* _state );


/*
 * TA_MIDPRICE - Midpoint Price over period
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MIDPRICE( int    startIdx,
                                   int    endIdx,
                                              const double inHigh[],
                                              const double inLow[],
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MIDPRICE( int    startIdx,
                                     int    endIdx,
                                                const float  inHigh[],
                                                const float  inLow[],
                                                int           optInTimePeriod, /* From 2 to 100000 */
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outReal[] );

TA_LIB_API int TA_MIDPRICE_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_MIDPRICE_Data {
                                              const double inHigh;
                                              const double inLow;
                                              };
TA_LIB_API struct TA_MIDPRICE_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_MIDPRICE_Data* memory;
                                     int           optInTimePeriod; /* From 2 to 100000 */
                                     };


TA_LIB_API int TA_MIDPRICE_StateInit( struct TA_MIDPRICE_State* _state,
                                               int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_MIDPRICE_State( struct TA_MIDPRICE_State* _state,
                                           const double inHigh,
                                           const double inLow,
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           double        &outReal );

TA_LIB_API int TA_MIDPRICE_StateFree( struct TA_MIDPRICE_State* _state );


/*
 * TA_MIN - Lowest value over a specified period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MIN( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MIN( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_MIN_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_MIN_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_MIN_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_MIN_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_MIN_StateInit( struct TA_MIN_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_MIN_State( struct TA_MIN_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_MIN_StateFree( struct TA_MIN_State* _state );


/*
 * TA_MININDEX - Index of lowest value over a specified period
 * 
 * Input  = double
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MININDEX( int    startIdx,
                                   int    endIdx,
                                              const double inReal[],
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              int           outInteger[] );

TA_LIB_API TA_RetCode TA_S_MININDEX( int    startIdx,
                                     int    endIdx,
                                                const float  inReal[],
                                                int           optInTimePeriod, /* From 2 to 100000 */
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                int           outInteger[] );

TA_LIB_API int TA_MININDEX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_MININDEX_Data {
                                              const double inReal;
                                              };
TA_LIB_API struct TA_MININDEX_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_MININDEX_Data* memory;
                                     int           optInTimePeriod; /* From 2 to 100000 */
                                     };


TA_LIB_API int TA_MININDEX_StateInit( struct TA_MININDEX_State* _state,
                                               int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_MININDEX_State( struct TA_MININDEX_State* _state,
                                           const double inReal,
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int           &outInteger );

TA_LIB_API int TA_MININDEX_StateFree( struct TA_MININDEX_State* _state );


/*
 * TA_MINMAX - Lowest and highest values over a specified period
 * 
 * Input  = double
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MINMAX( int    startIdx,
                                 int    endIdx,
                                            const double inReal[],
                                            int           optInTimePeriod, /* From 2 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outMin[],
                                            double        outMax[] );

TA_LIB_API TA_RetCode TA_S_MINMAX( int    startIdx,
                                   int    endIdx,
                                              const float  inReal[],
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outMin[],
                                              double        outMax[] );

TA_LIB_API int TA_MINMAX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_MINMAX_Data {
                                            const double inReal;
                                            };
TA_LIB_API struct TA_MINMAX_Struct {
                                   int mem_size;
                                   int mem_index;
                                   struct TA_MINMAX_Data* memory;
                                   int           optInTimePeriod; /* From 2 to 100000 */
                                   };


TA_LIB_API int TA_MINMAX_StateInit( struct TA_MINMAX_State* _state,
                                             int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_MINMAX_State( struct TA_MINMAX_State* _state,
                                         const double inReal,
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         double        &outMin,
                                         double        &outMax );

TA_LIB_API int TA_MINMAX_StateFree( struct TA_MINMAX_State* _state );


/*
 * TA_MINMAXINDEX - Indexes of lowest and highest values over a specified period
 * 
 * Input  = double
 * Output = int, int
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MINMAXINDEX( int    startIdx,
                                      int    endIdx,
                                                 const double inReal[],
                                                 int           optInTimePeriod, /* From 2 to 100000 */
                                                 int          *outBegIdx,
                                                 int          *outNBElement,
                                                 int           outMinIdx[],
                                                 int           outMaxIdx[] );

TA_LIB_API TA_RetCode TA_S_MINMAXINDEX( int    startIdx,
                                        int    endIdx,
                                                   const float  inReal[],
                                                   int           optInTimePeriod, /* From 2 to 100000 */
                                                   int          *outBegIdx,
                                                   int          *outNBElement,
                                                   int           outMinIdx[],
                                                   int           outMaxIdx[] );

TA_LIB_API int TA_MINMAXINDEX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_MINMAXINDEX_Data {
                                                 const double inReal;
                                                 };
TA_LIB_API struct TA_MINMAXINDEX_Struct {
                                        int mem_size;
                                        int mem_index;
                                        struct TA_MINMAXINDEX_Data* memory;
                                        int           optInTimePeriod; /* From 2 to 100000 */
                                        };


TA_LIB_API int TA_MINMAXINDEX_StateInit( struct TA_MINMAXINDEX_State* _state,
                                                  int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_MINMAXINDEX_State( struct TA_MINMAXINDEX_State* _state,
                                              const double inReal,
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              int           &outMinIdx,
                                              int           &outMaxIdx );

TA_LIB_API int TA_MINMAXINDEX_StateFree( struct TA_MINMAXINDEX_State* _state );


/*
 * TA_MINUS_DI - Minus Directional Indicator
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MINUS_DI( int    startIdx,
                                   int    endIdx,
                                              const double inHigh[],
                                              const double inLow[],
                                              const double inClose[],
                                              int           optInTimePeriod, /* From 1 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MINUS_DI( int    startIdx,
                                     int    endIdx,
                                                const float  inHigh[],
                                                const float  inLow[],
                                                const float  inClose[],
                                                int           optInTimePeriod, /* From 1 to 100000 */
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outReal[] );

TA_LIB_API int TA_MINUS_DI_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_MINUS_DI_Data {
                                              const double inHigh;
                                              const double inLow;
                                              const double inClose;
                                              };
TA_LIB_API struct TA_MINUS_DI_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_MINUS_DI_Data* memory;
                                     int           optInTimePeriod; /* From 1 to 100000 */
                                     };


TA_LIB_API int TA_MINUS_DI_StateInit( struct TA_MINUS_DI_State* _state,
                                               int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_MINUS_DI_State( struct TA_MINUS_DI_State* _state,
                                           const double inHigh,
                                           const double inLow,
                                           const double inClose,
                                           int           optInTimePeriod, /* From 1 to 100000 */
                                           double        &outReal );

TA_LIB_API int TA_MINUS_DI_StateFree( struct TA_MINUS_DI_State* _state );


/*
 * TA_MINUS_DM - Minus Directional Movement
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MINUS_DM( int    startIdx,
                                   int    endIdx,
                                              const double inHigh[],
                                              const double inLow[],
                                              int           optInTimePeriod, /* From 1 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MINUS_DM( int    startIdx,
                                     int    endIdx,
                                                const float  inHigh[],
                                                const float  inLow[],
                                                int           optInTimePeriod, /* From 1 to 100000 */
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outReal[] );

TA_LIB_API int TA_MINUS_DM_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_MINUS_DM_Data {
                                              const double inHigh;
                                              const double inLow;
                                              };
TA_LIB_API struct TA_MINUS_DM_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_MINUS_DM_Data* memory;
                                     int           optInTimePeriod; /* From 1 to 100000 */
                                     };


TA_LIB_API int TA_MINUS_DM_StateInit( struct TA_MINUS_DM_State* _state,
                                               int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_MINUS_DM_State( struct TA_MINUS_DM_State* _state,
                                           const double inHigh,
                                           const double inLow,
                                           int           optInTimePeriod, /* From 1 to 100000 */
                                           double        &outReal );

TA_LIB_API int TA_MINUS_DM_StateFree( struct TA_MINUS_DM_State* _state );


/*
 * TA_MOM - Momentum
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_MOM( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 1 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MOM( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 1 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_MOM_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_MOM_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_MOM_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_MOM_Data* memory;
                                int           optInTimePeriod; /* From 1 to 100000 */
                                };


TA_LIB_API int TA_MOM_StateInit( struct TA_MOM_State* _state,
                                          int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_MOM_State( struct TA_MOM_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 1 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_MOM_StateFree( struct TA_MOM_State* _state );


/*
 * TA_MULT - Vector Arithmetic Mult
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_MULT( int    startIdx,
                               int    endIdx,
                                          const double inReal0[],
                                          const double inReal1[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_MULT( int    startIdx,
                                 int    endIdx,
                                            const float  inReal0[],
                                            const float  inReal1[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_MULT_Lookback( void );


TA_LIB_API struct TA_MULT_Data {
                                          const double inReal0;
                                          const double inReal1;
                                          };
TA_LIB_API struct TA_MULT_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_MULT_Data* memory;
                                 };


TA_LIB_API int TA_MULT_StateInit( struct TA_MULT_State* _state );


TA_LIB_API int TA_MULT_State( struct TA_MULT_State* _state,
                                       const double inReal0,
                                       const double inReal1,
                                       double        &outReal );

TA_LIB_API int TA_MULT_StateFree( struct TA_MULT_State* _state );


/*
 * TA_NATR - Normalized Average True Range
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_NATR( int    startIdx,
                               int    endIdx,
                                          const double inHigh[],
                                          const double inLow[],
                                          const double inClose[],
                                          int           optInTimePeriod, /* From 1 to 100000 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_NATR( int    startIdx,
                                 int    endIdx,
                                            const float  inHigh[],
                                            const float  inLow[],
                                            const float  inClose[],
                                            int           optInTimePeriod, /* From 1 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_NATR_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_NATR_Data {
                                          const double inHigh;
                                          const double inLow;
                                          const double inClose;
                                          };
TA_LIB_API struct TA_NATR_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_NATR_Data* memory;
                                 int           optInTimePeriod; /* From 1 to 100000 */
                                 };


TA_LIB_API int TA_NATR_StateInit( struct TA_NATR_State* _state,
                                           int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_NATR_State( struct TA_NATR_State* _state,
                                       const double inHigh,
                                       const double inLow,
                                       const double inClose,
                                       int           optInTimePeriod, /* From 1 to 100000 */
                                       double        &outReal );

TA_LIB_API int TA_NATR_StateFree( struct TA_NATR_State* _state );


/*
 * TA_OBV - On Balance Volume
 * 
 * Input  = double, Volume
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_OBV( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         const double inVolume[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_OBV( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           const float  inVolume[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_OBV_Lookback( void );


TA_LIB_API struct TA_OBV_Data {
                                         const double inReal;
                                         const double inVolume;
                                         };
TA_LIB_API struct TA_OBV_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_OBV_Data* memory;
                                };


TA_LIB_API int TA_OBV_StateInit( struct TA_OBV_State* _state );


TA_LIB_API int TA_OBV_State( struct TA_OBV_State* _state,
                                      const double inReal,
                                      const double inVolume,
                                      double        &outReal );

TA_LIB_API int TA_OBV_StateFree( struct TA_OBV_State* _state );


/*
 * TA_PLUS_DI - Plus Directional Indicator
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_PLUS_DI( int    startIdx,
                                  int    endIdx,
                                             const double inHigh[],
                                             const double inLow[],
                                             const double inClose[],
                                             int           optInTimePeriod, /* From 1 to 100000 */
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outReal[] );

TA_LIB_API TA_RetCode TA_S_PLUS_DI( int    startIdx,
                                    int    endIdx,
                                               const float  inHigh[],
                                               const float  inLow[],
                                               const float  inClose[],
                                               int           optInTimePeriod, /* From 1 to 100000 */
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               double        outReal[] );

TA_LIB_API int TA_PLUS_DI_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_PLUS_DI_Data {
                                             const double inHigh;
                                             const double inLow;
                                             const double inClose;
                                             };
TA_LIB_API struct TA_PLUS_DI_Struct {
                                    int mem_size;
                                    int mem_index;
                                    struct TA_PLUS_DI_Data* memory;
                                    int           optInTimePeriod; /* From 1 to 100000 */
                                    };


TA_LIB_API int TA_PLUS_DI_StateInit( struct TA_PLUS_DI_State* _state,
                                              int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_PLUS_DI_State( struct TA_PLUS_DI_State* _state,
                                          const double inHigh,
                                          const double inLow,
                                          const double inClose,
                                          int           optInTimePeriod, /* From 1 to 100000 */
                                          double        &outReal );

TA_LIB_API int TA_PLUS_DI_StateFree( struct TA_PLUS_DI_State* _state );


/*
 * TA_PLUS_DM - Plus Directional Movement
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_PLUS_DM( int    startIdx,
                                  int    endIdx,
                                             const double inHigh[],
                                             const double inLow[],
                                             int           optInTimePeriod, /* From 1 to 100000 */
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outReal[] );

TA_LIB_API TA_RetCode TA_S_PLUS_DM( int    startIdx,
                                    int    endIdx,
                                               const float  inHigh[],
                                               const float  inLow[],
                                               int           optInTimePeriod, /* From 1 to 100000 */
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               double        outReal[] );

TA_LIB_API int TA_PLUS_DM_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_PLUS_DM_Data {
                                             const double inHigh;
                                             const double inLow;
                                             };
TA_LIB_API struct TA_PLUS_DM_Struct {
                                    int mem_size;
                                    int mem_index;
                                    struct TA_PLUS_DM_Data* memory;
                                    int           optInTimePeriod; /* From 1 to 100000 */
                                    };


TA_LIB_API int TA_PLUS_DM_StateInit( struct TA_PLUS_DM_State* _state,
                                              int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_PLUS_DM_State( struct TA_PLUS_DM_State* _state,
                                          const double inHigh,
                                          const double inLow,
                                          int           optInTimePeriod, /* From 1 to 100000 */
                                          double        &outReal );

TA_LIB_API int TA_PLUS_DM_StateFree( struct TA_PLUS_DM_State* _state );


/*
 * TA_PPO - Percentage Price Oscillator
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_PPO( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInFastPeriod, /* From 2 to 100000 */
                                         int           optInSlowPeriod, /* From 2 to 100000 */
                                         TA_MAType     optInMAType,                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_PPO( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInFastPeriod, /* From 2 to 100000 */
                                           int           optInSlowPeriod, /* From 2 to 100000 */
                                           TA_MAType     optInMAType,                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_PPO_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                                         int           optInSlowPeriod, /* From 2 to 100000 */
                                         TA_MAType     optInMAType ); 

TA_LIB_API struct TA_PPO_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_PPO_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_PPO_Data* memory;
                                int           optInFastPeriod; /* From 2 to 100000 */
                                int           optInSlowPeriod; /* From 2 to 100000 */
                                TA_MAType     optInMAType;                                };


TA_LIB_API int TA_PPO_StateInit( struct TA_PPO_State* _state,
                                          int           optInFastPeriod, /* From 2 to 100000 */
                                          int           optInSlowPeriod, /* From 2 to 100000 */
                                          TA_MAType     optInMAType ); 

TA_LIB_API int TA_PPO_State( struct TA_PPO_State* _state,
                                      const double inReal,
                                      int           optInFastPeriod, /* From 2 to 100000 */
                                      int           optInSlowPeriod, /* From 2 to 100000 */
                                      TA_MAType     optInMAType,                                      double        &outReal );

TA_LIB_API int TA_PPO_StateFree( struct TA_PPO_State* _state );


/*
 * TA_ROC - Rate of change : ((price/prevPrice)-1)*100
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_ROC( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 1 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ROC( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 1 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_ROC_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_ROC_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_ROC_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_ROC_Data* memory;
                                int           optInTimePeriod; /* From 1 to 100000 */
                                };


TA_LIB_API int TA_ROC_StateInit( struct TA_ROC_State* _state,
                                          int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_ROC_State( struct TA_ROC_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 1 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_ROC_StateFree( struct TA_ROC_State* _state );


/*
 * TA_ROCP - Rate of change Percentage: (price-prevPrice)/prevPrice
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_ROCP( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int           optInTimePeriod, /* From 1 to 100000 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ROCP( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int           optInTimePeriod, /* From 1 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_ROCP_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_ROCP_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_ROCP_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_ROCP_Data* memory;
                                 int           optInTimePeriod; /* From 1 to 100000 */
                                 };


TA_LIB_API int TA_ROCP_StateInit( struct TA_ROCP_State* _state,
                                           int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_ROCP_State( struct TA_ROCP_State* _state,
                                       const double inReal,
                                       int           optInTimePeriod, /* From 1 to 100000 */
                                       double        &outReal );

TA_LIB_API int TA_ROCP_StateFree( struct TA_ROCP_State* _state );


/*
 * TA_ROCR - Rate of change ratio: (price/prevPrice)
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_ROCR( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int           optInTimePeriod, /* From 1 to 100000 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ROCR( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int           optInTimePeriod, /* From 1 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_ROCR_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_ROCR_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_ROCR_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_ROCR_Data* memory;
                                 int           optInTimePeriod; /* From 1 to 100000 */
                                 };


TA_LIB_API int TA_ROCR_StateInit( struct TA_ROCR_State* _state,
                                           int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_ROCR_State( struct TA_ROCR_State* _state,
                                       const double inReal,
                                       int           optInTimePeriod, /* From 1 to 100000 */
                                       double        &outReal );

TA_LIB_API int TA_ROCR_StateFree( struct TA_ROCR_State* _state );


/*
 * TA_ROCR100 - Rate of change ratio 100 scale: (price/prevPrice)*100
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_ROCR100( int    startIdx,
                                  int    endIdx,
                                             const double inReal[],
                                             int           optInTimePeriod, /* From 1 to 100000 */
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ROCR100( int    startIdx,
                                    int    endIdx,
                                               const float  inReal[],
                                               int           optInTimePeriod, /* From 1 to 100000 */
                                               int          *outBegIdx,
                                               int          *outNBElement,
                                               double        outReal[] );

TA_LIB_API int TA_ROCR100_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_ROCR100_Data {
                                             const double inReal;
                                             };
TA_LIB_API struct TA_ROCR100_Struct {
                                    int mem_size;
                                    int mem_index;
                                    struct TA_ROCR100_Data* memory;
                                    int           optInTimePeriod; /* From 1 to 100000 */
                                    };


TA_LIB_API int TA_ROCR100_StateInit( struct TA_ROCR100_State* _state,
                                              int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_ROCR100_State( struct TA_ROCR100_State* _state,
                                          const double inReal,
                                          int           optInTimePeriod, /* From 1 to 100000 */
                                          double        &outReal );

TA_LIB_API int TA_ROCR100_StateFree( struct TA_ROCR100_State* _state );


/*
 * TA_RSI - Relative Strength Index
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_RSI( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_RSI( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_RSI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_RSI_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_RSI_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_RSI_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_RSI_StateInit( struct TA_RSI_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_RSI_State( struct TA_RSI_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_RSI_StateFree( struct TA_RSI_State* _state );


/*
 * TA_SAR - Parabolic SAR
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInAcceleration:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor used up to the Maximum value
 * 
 * optInMaximum:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor Maximum value
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_SAR( int    startIdx,
                              int    endIdx,
                                         const double inHigh[],
                                         const double inLow[],
                                         double        optInAcceleration, /* From 0 to TA_REAL_MAX */
                                         double        optInMaximum, /* From 0 to TA_REAL_MAX */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_SAR( int    startIdx,
                                int    endIdx,
                                           const float  inHigh[],
                                           const float  inLow[],
                                           double        optInAcceleration, /* From 0 to TA_REAL_MAX */
                                           double        optInMaximum, /* From 0 to TA_REAL_MAX */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_SAR_Lookback( double        optInAcceleration, /* From 0 to TA_REAL_MAX */
                                         double        optInMaximum );  /* From 0 to TA_REAL_MAX */


TA_LIB_API struct TA_SAR_Data {
                                         const double inHigh;
                                         const double inLow;
                                         };
TA_LIB_API struct TA_SAR_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_SAR_Data* memory;
                                double        optInAcceleration; /* From 0 to TA_REAL_MAX */
                                double        optInMaximum; /* From 0 to TA_REAL_MAX */
                                };


TA_LIB_API int TA_SAR_StateInit( struct TA_SAR_State* _state,
                                          double        optInAcceleration, /* From 0 to TA_REAL_MAX */
                                          double        optInMaximum );  /* From 0 to TA_REAL_MAX */


TA_LIB_API int TA_SAR_State( struct TA_SAR_State* _state,
                                      const double inHigh,
                                      const double inLow,
                                      double        optInAcceleration, /* From 0 to TA_REAL_MAX */
                                      double        optInMaximum, /* From 0 to TA_REAL_MAX */
                                      double        &outReal );

TA_LIB_API int TA_SAR_StateFree( struct TA_SAR_State* _state );


/*
 * TA_SAREXT - Parabolic SAR - Extended
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInStartValue:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Start value and direction. 0 for Auto, >0 for Long, <0 for Short
 * 
 * optInOffsetOnReverse:(From 0 to TA_REAL_MAX)
 *    Percent offset added/removed to initial stop on short/long reversal
 * 
 * optInAccelerationInitLong:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor initial value for the Long direction
 * 
 * optInAccelerationLong:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor for the Long direction
 * 
 * optInAccelerationMaxLong:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor maximum value for the Long direction
 * 
 * optInAccelerationInitShort:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor initial value for the Short direction
 * 
 * optInAccelerationShort:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor for the Short direction
 * 
 * optInAccelerationMaxShort:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor maximum value for the Short direction
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_SAREXT( int    startIdx,
                                 int    endIdx,
                                            const double inHigh[],
                                            const double inLow[],
                                            double        optInStartValue, /* From TA_REAL_MIN to TA_REAL_MAX */
                                            double        optInOffsetOnReverse, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationInitLong, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationLong, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationMaxLong, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationInitShort, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationShort, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationMaxShort, /* From 0 to TA_REAL_MAX */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API TA_RetCode TA_S_SAREXT( int    startIdx,
                                   int    endIdx,
                                              const float  inHigh[],
                                              const float  inLow[],
                                              double        optInStartValue, /* From TA_REAL_MIN to TA_REAL_MAX */
                                              double        optInOffsetOnReverse, /* From 0 to TA_REAL_MAX */
                                              double        optInAccelerationInitLong, /* From 0 to TA_REAL_MAX */
                                              double        optInAccelerationLong, /* From 0 to TA_REAL_MAX */
                                              double        optInAccelerationMaxLong, /* From 0 to TA_REAL_MAX */
                                              double        optInAccelerationInitShort, /* From 0 to TA_REAL_MAX */
                                              double        optInAccelerationShort, /* From 0 to TA_REAL_MAX */
                                              double        optInAccelerationMaxShort, /* From 0 to TA_REAL_MAX */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API int TA_SAREXT_Lookback( double        optInStartValue, /* From TA_REAL_MIN to TA_REAL_MAX */
                                            double        optInOffsetOnReverse, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationInitLong, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationLong, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationMaxLong, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationInitShort, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationShort, /* From 0 to TA_REAL_MAX */
                                            double        optInAccelerationMaxShort );  /* From 0 to TA_REAL_MAX */


TA_LIB_API struct TA_SAREXT_Data {
                                            const double inHigh;
                                            const double inLow;
                                            };
TA_LIB_API struct TA_SAREXT_Struct {
                                   int mem_size;
                                   int mem_index;
                                   struct TA_SAREXT_Data* memory;
                                   double        optInStartValue; /* From TA_REAL_MIN to TA_REAL_MAX */
                                   double        optInOffsetOnReverse; /* From 0 to TA_REAL_MAX */
                                   double        optInAccelerationInitLong; /* From 0 to TA_REAL_MAX */
                                   double        optInAccelerationLong; /* From 0 to TA_REAL_MAX */
                                   double        optInAccelerationMaxLong; /* From 0 to TA_REAL_MAX */
                                   double        optInAccelerationInitShort; /* From 0 to TA_REAL_MAX */
                                   double        optInAccelerationShort; /* From 0 to TA_REAL_MAX */
                                   double        optInAccelerationMaxShort; /* From 0 to TA_REAL_MAX */
                                   };


TA_LIB_API int TA_SAREXT_StateInit( struct TA_SAREXT_State* _state,
                                             double        optInStartValue, /* From TA_REAL_MIN to TA_REAL_MAX */
                                             double        optInOffsetOnReverse, /* From 0 to TA_REAL_MAX */
                                             double        optInAccelerationInitLong, /* From 0 to TA_REAL_MAX */
                                             double        optInAccelerationLong, /* From 0 to TA_REAL_MAX */
                                             double        optInAccelerationMaxLong, /* From 0 to TA_REAL_MAX */
                                             double        optInAccelerationInitShort, /* From 0 to TA_REAL_MAX */
                                             double        optInAccelerationShort, /* From 0 to TA_REAL_MAX */
                                             double        optInAccelerationMaxShort );  /* From 0 to TA_REAL_MAX */


TA_LIB_API int TA_SAREXT_State( struct TA_SAREXT_State* _state,
                                         const double inHigh,
                                         const double inLow,
                                         double        optInStartValue, /* From TA_REAL_MIN to TA_REAL_MAX */
                                         double        optInOffsetOnReverse, /* From 0 to TA_REAL_MAX */
                                         double        optInAccelerationInitLong, /* From 0 to TA_REAL_MAX */
                                         double        optInAccelerationLong, /* From 0 to TA_REAL_MAX */
                                         double        optInAccelerationMaxLong, /* From 0 to TA_REAL_MAX */
                                         double        optInAccelerationInitShort, /* From 0 to TA_REAL_MAX */
                                         double        optInAccelerationShort, /* From 0 to TA_REAL_MAX */
                                         double        optInAccelerationMaxShort, /* From 0 to TA_REAL_MAX */
                                         double        &outReal );

TA_LIB_API int TA_SAREXT_StateFree( struct TA_SAREXT_State* _state );


/*
 * TA_SIN - Vector Trigonometric Sin
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_SIN( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_SIN( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_SIN_Lookback( void );


TA_LIB_API struct TA_SIN_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_SIN_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_SIN_Data* memory;
                                };


TA_LIB_API int TA_SIN_StateInit( struct TA_SIN_State* _state );


TA_LIB_API int TA_SIN_State( struct TA_SIN_State* _state,
                                      const double inReal,
                                      double        &outReal );

TA_LIB_API int TA_SIN_StateFree( struct TA_SIN_State* _state );


/*
 * TA_SINH - Vector Trigonometric Sinh
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_SINH( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_SINH( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_SINH_Lookback( void );


TA_LIB_API struct TA_SINH_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_SINH_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_SINH_Data* memory;
                                 };


TA_LIB_API int TA_SINH_StateInit( struct TA_SINH_State* _state );


TA_LIB_API int TA_SINH_State( struct TA_SINH_State* _state,
                                       const double inReal,
                                       double        &outReal );

TA_LIB_API int TA_SINH_StateFree( struct TA_SINH_State* _state );


/*
 * TA_SMA - Simple Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_SMA( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_SMA( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_SMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_SMA_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_SMA_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_SMA_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_SMA_StateInit( struct TA_SMA_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_SMA_State( struct TA_SMA_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_SMA_StateFree( struct TA_SMA_State* _state );


/*
 * TA_SQRT - Vector Square Root
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_SQRT( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_SQRT( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_SQRT_Lookback( void );


TA_LIB_API struct TA_SQRT_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_SQRT_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_SQRT_Data* memory;
                                 };


TA_LIB_API int TA_SQRT_StateInit( struct TA_SQRT_State* _state );


TA_LIB_API int TA_SQRT_State( struct TA_SQRT_State* _state,
                                       const double inReal,
                                       double        &outReal );

TA_LIB_API int TA_SQRT_StateFree( struct TA_SQRT_State* _state );


/*
 * TA_STDDEV - Standard Deviation
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * optInNbDev:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Nb of deviations
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_STDDEV( int    startIdx,
                                 int    endIdx,
                                            const double inReal[],
                                            int           optInTimePeriod, /* From 2 to 100000 */
                                            double        optInNbDev, /* From TA_REAL_MIN to TA_REAL_MAX */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API TA_RetCode TA_S_STDDEV( int    startIdx,
                                   int    endIdx,
                                              const float  inReal[],
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              double        optInNbDev, /* From TA_REAL_MIN to TA_REAL_MAX */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API int TA_STDDEV_Lookback( int           optInTimePeriod, /* From 2 to 100000 */
                                            double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


TA_LIB_API struct TA_STDDEV_Data {
                                            const double inReal;
                                            };
TA_LIB_API struct TA_STDDEV_Struct {
                                   int mem_size;
                                   int mem_index;
                                   struct TA_STDDEV_Data* memory;
                                   int           optInTimePeriod; /* From 2 to 100000 */
                                   double        optInNbDev; /* From TA_REAL_MIN to TA_REAL_MAX */
                                   };


TA_LIB_API int TA_STDDEV_StateInit( struct TA_STDDEV_State* _state,
                                             int           optInTimePeriod, /* From 2 to 100000 */
                                             double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


TA_LIB_API int TA_STDDEV_State( struct TA_STDDEV_State* _state,
                                         const double inReal,
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         double        optInNbDev, /* From TA_REAL_MIN to TA_REAL_MAX */
                                         double        &outReal );

TA_LIB_API int TA_STDDEV_StateFree( struct TA_STDDEV_State* _state );


/*
 * TA_STOCH - Stochastic
 * 
 * Input  = High, Low, Close
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastK_Period:(From 1 to 100000)
 *    Time period for building the Fast-K line
 * 
 * optInSlowK_Period:(From 1 to 100000)
 *    Smoothing for making the Slow-K line. Usually set to 3
 * 
 * optInSlowK_MAType:
 *    Type of Moving Average for Slow-K
 * 
 * optInSlowD_Period:(From 1 to 100000)
 *    Smoothing for making the Slow-D line
 * 
 * optInSlowD_MAType:
 *    Type of Moving Average for Slow-D
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_STOCH( int    startIdx,
                                int    endIdx,
                                           const double inHigh[],
                                           const double inLow[],
                                           const double inClose[],
                                           int           optInFastK_Period, /* From 1 to 100000 */
                                           int           optInSlowK_Period, /* From 1 to 100000 */
                                           TA_MAType     optInSlowK_MAType,                                           int           optInSlowD_Period, /* From 1 to 100000 */
                                           TA_MAType     optInSlowD_MAType,                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outSlowK[],
                                           double        outSlowD[] );

TA_LIB_API TA_RetCode TA_S_STOCH( int    startIdx,
                                  int    endIdx,
                                             const float  inHigh[],
                                             const float  inLow[],
                                             const float  inClose[],
                                             int           optInFastK_Period, /* From 1 to 100000 */
                                             int           optInSlowK_Period, /* From 1 to 100000 */
                                             TA_MAType     optInSlowK_MAType,                                             int           optInSlowD_Period, /* From 1 to 100000 */
                                             TA_MAType     optInSlowD_MAType,                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outSlowK[],
                                             double        outSlowD[] );

TA_LIB_API int TA_STOCH_Lookback( int           optInFastK_Period, /* From 1 to 100000 */
                                           int           optInSlowK_Period, /* From 1 to 100000 */
                                           TA_MAType     optInSlowK_MAType,                                           int           optInSlowD_Period, /* From 1 to 100000 */
                                           TA_MAType     optInSlowD_MAType ); 

TA_LIB_API struct TA_STOCH_Data {
                                           const double inHigh;
                                           const double inLow;
                                           const double inClose;
                                           };
TA_LIB_API struct TA_STOCH_Struct {
                                  int mem_size;
                                  int mem_index;
                                  struct TA_STOCH_Data* memory;
                                  int           optInFastK_Period; /* From 1 to 100000 */
                                  int           optInSlowK_Period; /* From 1 to 100000 */
                                  TA_MAType     optInSlowK_MAType;                                  int           optInSlowD_Period; /* From 1 to 100000 */
                                  TA_MAType     optInSlowD_MAType;                                  };


TA_LIB_API int TA_STOCH_StateInit( struct TA_STOCH_State* _state,
                                            int           optInFastK_Period, /* From 1 to 100000 */
                                            int           optInSlowK_Period, /* From 1 to 100000 */
                                            TA_MAType     optInSlowK_MAType,                                            int           optInSlowD_Period, /* From 1 to 100000 */
                                            TA_MAType     optInSlowD_MAType ); 

TA_LIB_API int TA_STOCH_State( struct TA_STOCH_State* _state,
                                        const double inHigh,
                                        const double inLow,
                                        const double inClose,
                                        int           optInFastK_Period, /* From 1 to 100000 */
                                        int           optInSlowK_Period, /* From 1 to 100000 */
                                        TA_MAType     optInSlowK_MAType,                                        int           optInSlowD_Period, /* From 1 to 100000 */
                                        TA_MAType     optInSlowD_MAType,                                        double        &outSlowK,
                                        double        &outSlowD );

TA_LIB_API int TA_STOCH_StateFree( struct TA_STOCH_State* _state );


/*
 * TA_STOCHF - Stochastic Fast
 * 
 * Input  = High, Low, Close
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastK_Period:(From 1 to 100000)
 *    Time period for building the Fast-K line
 * 
 * optInFastD_Period:(From 1 to 100000)
 *    Smoothing for making the Fast-D line. Usually set to 3
 * 
 * optInFastD_MAType:
 *    Type of Moving Average for Fast-D
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_STOCHF( int    startIdx,
                                 int    endIdx,
                                            const double inHigh[],
                                            const double inLow[],
                                            const double inClose[],
                                            int           optInFastK_Period, /* From 1 to 100000 */
                                            int           optInFastD_Period, /* From 1 to 100000 */
                                            TA_MAType     optInFastD_MAType,                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outFastK[],
                                            double        outFastD[] );

TA_LIB_API TA_RetCode TA_S_STOCHF( int    startIdx,
                                   int    endIdx,
                                              const float  inHigh[],
                                              const float  inLow[],
                                              const float  inClose[],
                                              int           optInFastK_Period, /* From 1 to 100000 */
                                              int           optInFastD_Period, /* From 1 to 100000 */
                                              TA_MAType     optInFastD_MAType,                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outFastK[],
                                              double        outFastD[] );

TA_LIB_API int TA_STOCHF_Lookback( int           optInFastK_Period, /* From 1 to 100000 */
                                            int           optInFastD_Period, /* From 1 to 100000 */
                                            TA_MAType     optInFastD_MAType ); 

TA_LIB_API struct TA_STOCHF_Data {
                                            const double inHigh;
                                            const double inLow;
                                            const double inClose;
                                            };
TA_LIB_API struct TA_STOCHF_Struct {
                                   int mem_size;
                                   int mem_index;
                                   struct TA_STOCHF_Data* memory;
                                   int           optInFastK_Period; /* From 1 to 100000 */
                                   int           optInFastD_Period; /* From 1 to 100000 */
                                   TA_MAType     optInFastD_MAType;                                   };


TA_LIB_API int TA_STOCHF_StateInit( struct TA_STOCHF_State* _state,
                                             int           optInFastK_Period, /* From 1 to 100000 */
                                             int           optInFastD_Period, /* From 1 to 100000 */
                                             TA_MAType     optInFastD_MAType ); 

TA_LIB_API int TA_STOCHF_State( struct TA_STOCHF_State* _state,
                                         const double inHigh,
                                         const double inLow,
                                         const double inClose,
                                         int           optInFastK_Period, /* From 1 to 100000 */
                                         int           optInFastD_Period, /* From 1 to 100000 */
                                         TA_MAType     optInFastD_MAType,                                         double        &outFastK,
                                         double        &outFastD );

TA_LIB_API int TA_STOCHF_StateFree( struct TA_STOCHF_State* _state );


/*
 * TA_STOCHRSI - Stochastic Relative Strength Index
 * 
 * Input  = double
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * optInFastK_Period:(From 1 to 100000)
 *    Time period for building the Fast-K line
 * 
 * optInFastD_Period:(From 1 to 100000)
 *    Smoothing for making the Fast-D line. Usually set to 3
 * 
 * optInFastD_MAType:
 *    Type of Moving Average for Fast-D
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_STOCHRSI( int    startIdx,
                                   int    endIdx,
                                              const double inReal[],
                                              int           optInTimePeriod, /* From 2 to 100000 */
                                              int           optInFastK_Period, /* From 1 to 100000 */
                                              int           optInFastD_Period, /* From 1 to 100000 */
                                              TA_MAType     optInFastD_MAType,                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outFastK[],
                                              double        outFastD[] );

TA_LIB_API TA_RetCode TA_S_STOCHRSI( int    startIdx,
                                     int    endIdx,
                                                const float  inReal[],
                                                int           optInTimePeriod, /* From 2 to 100000 */
                                                int           optInFastK_Period, /* From 1 to 100000 */
                                                int           optInFastD_Period, /* From 1 to 100000 */
                                                TA_MAType     optInFastD_MAType,                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outFastK[],
                                                double        outFastD[] );

TA_LIB_API int TA_STOCHRSI_Lookback( int           optInTimePeriod, /* From 2 to 100000 */
                                              int           optInFastK_Period, /* From 1 to 100000 */
                                              int           optInFastD_Period, /* From 1 to 100000 */
                                              TA_MAType     optInFastD_MAType ); 

TA_LIB_API struct TA_STOCHRSI_Data {
                                              const double inReal;
                                              };
TA_LIB_API struct TA_STOCHRSI_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_STOCHRSI_Data* memory;
                                     int           optInTimePeriod; /* From 2 to 100000 */
                                     int           optInFastK_Period; /* From 1 to 100000 */
                                     int           optInFastD_Period; /* From 1 to 100000 */
                                     TA_MAType     optInFastD_MAType;                                     };


TA_LIB_API int TA_STOCHRSI_StateInit( struct TA_STOCHRSI_State* _state,
                                               int           optInTimePeriod, /* From 2 to 100000 */
                                               int           optInFastK_Period, /* From 1 to 100000 */
                                               int           optInFastD_Period, /* From 1 to 100000 */
                                               TA_MAType     optInFastD_MAType ); 

TA_LIB_API int TA_STOCHRSI_State( struct TA_STOCHRSI_State* _state,
                                           const double inReal,
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int           optInFastK_Period, /* From 1 to 100000 */
                                           int           optInFastD_Period, /* From 1 to 100000 */
                                           TA_MAType     optInFastD_MAType,                                           double        &outFastK,
                                           double        &outFastD );

TA_LIB_API int TA_STOCHRSI_StateFree( struct TA_STOCHRSI_State* _state );


/*
 * TA_SUB - Vector Arithmetic Substraction
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_SUB( int    startIdx,
                              int    endIdx,
                                         const double inReal0[],
                                         const double inReal1[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_SUB( int    startIdx,
                                int    endIdx,
                                           const float  inReal0[],
                                           const float  inReal1[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_SUB_Lookback( void );


TA_LIB_API struct TA_SUB_Data {
                                         const double inReal0;
                                         const double inReal1;
                                         };
TA_LIB_API struct TA_SUB_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_SUB_Data* memory;
                                };


TA_LIB_API int TA_SUB_StateInit( struct TA_SUB_State* _state );


TA_LIB_API int TA_SUB_State( struct TA_SUB_State* _state,
                                      const double inReal0,
                                      const double inReal1,
                                      double        &outReal );

TA_LIB_API int TA_SUB_StateFree( struct TA_SUB_State* _state );


/*
 * TA_SUM - Summation
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_SUM( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_SUM( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_SUM_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_SUM_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_SUM_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_SUM_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_SUM_StateInit( struct TA_SUM_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_SUM_State( struct TA_SUM_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_SUM_StateFree( struct TA_SUM_State* _state );


/*
 * TA_T3 - Triple Exponential Moving Average (T3)
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * optInVFactor:(From 0 to 1)
 *    Volume Factor
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_T3( int    startIdx,
                             int    endIdx,
                                        const double inReal[],
                                        int           optInTimePeriod, /* From 2 to 100000 */
                                        double        optInVFactor, /* From 0 to 1 */
                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        double        outReal[] );

TA_LIB_API TA_RetCode TA_S_T3( int    startIdx,
                               int    endIdx,
                                          const float  inReal[],
                                          int           optInTimePeriod, /* From 2 to 100000 */
                                          double        optInVFactor, /* From 0 to 1 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API int TA_T3_Lookback( int           optInTimePeriod, /* From 2 to 100000 */
                                        double        optInVFactor );  /* From 0 to 1 */


TA_LIB_API struct TA_T3_Data {
                                        const double inReal;
                                        };
TA_LIB_API struct TA_T3_Struct {
                               int mem_size;
                               int mem_index;
                               struct TA_T3_Data* memory;
                               int           optInTimePeriod; /* From 2 to 100000 */
                               double        optInVFactor; /* From 0 to 1 */
                               };


TA_LIB_API int TA_T3_StateInit( struct TA_T3_State* _state,
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         double        optInVFactor );  /* From 0 to 1 */


TA_LIB_API int TA_T3_State( struct TA_T3_State* _state,
                                     const double inReal,
                                     int           optInTimePeriod, /* From 2 to 100000 */
                                     double        optInVFactor, /* From 0 to 1 */
                                     double        &outReal );

TA_LIB_API int TA_T3_StateFree( struct TA_T3_State* _state );


/*
 * TA_TAN - Vector Trigonometric Tan
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_TAN( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_TAN( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_TAN_Lookback( void );


TA_LIB_API struct TA_TAN_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_TAN_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_TAN_Data* memory;
                                };


TA_LIB_API int TA_TAN_StateInit( struct TA_TAN_State* _state );


TA_LIB_API int TA_TAN_State( struct TA_TAN_State* _state,
                                      const double inReal,
                                      double        &outReal );

TA_LIB_API int TA_TAN_StateFree( struct TA_TAN_State* _state );


/*
 * TA_TANH - Vector Trigonometric Tanh
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_TANH( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_TANH( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_TANH_Lookback( void );


TA_LIB_API struct TA_TANH_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_TANH_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_TANH_Data* memory;
                                 };


TA_LIB_API int TA_TANH_StateInit( struct TA_TANH_State* _state );


TA_LIB_API int TA_TANH_State( struct TA_TANH_State* _state,
                                       const double inReal,
                                       double        &outReal );

TA_LIB_API int TA_TANH_StateFree( struct TA_TANH_State* _state );


/*
 * TA_TEMA - Triple Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_TEMA( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int           optInTimePeriod, /* From 2 to 100000 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_TEMA( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int           optInTimePeriod, /* From 2 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_TEMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_TEMA_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_TEMA_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_TEMA_Data* memory;
                                 int           optInTimePeriod; /* From 2 to 100000 */
                                 };


TA_LIB_API int TA_TEMA_StateInit( struct TA_TEMA_State* _state,
                                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_TEMA_State( struct TA_TEMA_State* _state,
                                       const double inReal,
                                       int           optInTimePeriod, /* From 2 to 100000 */
                                       double        &outReal );

TA_LIB_API int TA_TEMA_StateFree( struct TA_TEMA_State* _state );


/*
 * TA_TRANGE - True Range
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_TRANGE( int    startIdx,
                                 int    endIdx,
                                            const double inHigh[],
                                            const double inLow[],
                                            const double inClose[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API TA_RetCode TA_S_TRANGE( int    startIdx,
                                   int    endIdx,
                                              const float  inHigh[],
                                              const float  inLow[],
                                              const float  inClose[],
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API int TA_TRANGE_Lookback( void );


TA_LIB_API struct TA_TRANGE_Data {
                                            const double inHigh;
                                            const double inLow;
                                            const double inClose;
                                            };
TA_LIB_API struct TA_TRANGE_Struct {
                                   int mem_size;
                                   int mem_index;
                                   struct TA_TRANGE_Data* memory;
                                   };


TA_LIB_API int TA_TRANGE_StateInit( struct TA_TRANGE_State* _state );


TA_LIB_API int TA_TRANGE_State( struct TA_TRANGE_State* _state,
                                         const double inHigh,
                                         const double inLow,
                                         const double inClose,
                                         double        &outReal );

TA_LIB_API int TA_TRANGE_StateFree( struct TA_TRANGE_State* _state );


/*
 * TA_TRIMA - Triangular Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_TRIMA( int    startIdx,
                                int    endIdx,
                                           const double inReal[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API TA_RetCode TA_S_TRIMA( int    startIdx,
                                  int    endIdx,
                                             const float  inReal[],
                                             int           optInTimePeriod, /* From 2 to 100000 */
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outReal[] );

TA_LIB_API int TA_TRIMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_TRIMA_Data {
                                           const double inReal;
                                           };
TA_LIB_API struct TA_TRIMA_Struct {
                                  int mem_size;
                                  int mem_index;
                                  struct TA_TRIMA_Data* memory;
                                  int           optInTimePeriod; /* From 2 to 100000 */
                                  };


TA_LIB_API int TA_TRIMA_StateInit( struct TA_TRIMA_State* _state,
                                            int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_TRIMA_State( struct TA_TRIMA_State* _state,
                                        const double inReal,
                                        int           optInTimePeriod, /* From 2 to 100000 */
                                        double        &outReal );

TA_LIB_API int TA_TRIMA_StateFree( struct TA_TRIMA_State* _state );


/*
 * TA_TRIX - 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_TRIX( int    startIdx,
                               int    endIdx,
                                          const double inReal[],
                                          int           optInTimePeriod, /* From 1 to 100000 */
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          double        outReal[] );

TA_LIB_API TA_RetCode TA_S_TRIX( int    startIdx,
                                 int    endIdx,
                                            const float  inReal[],
                                            int           optInTimePeriod, /* From 1 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API int TA_TRIX_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API struct TA_TRIX_Data {
                                          const double inReal;
                                          };
TA_LIB_API struct TA_TRIX_Struct {
                                 int mem_size;
                                 int mem_index;
                                 struct TA_TRIX_Data* memory;
                                 int           optInTimePeriod; /* From 1 to 100000 */
                                 };


TA_LIB_API int TA_TRIX_StateInit( struct TA_TRIX_State* _state,
                                           int           optInTimePeriod );  /* From 1 to 100000 */


TA_LIB_API int TA_TRIX_State( struct TA_TRIX_State* _state,
                                       const double inReal,
                                       int           optInTimePeriod, /* From 1 to 100000 */
                                       double        &outReal );

TA_LIB_API int TA_TRIX_StateFree( struct TA_TRIX_State* _state );


/*
 * TA_TSF - Time Series Forecast
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_TSF( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_TSF( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_TSF_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_TSF_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_TSF_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_TSF_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_TSF_StateInit( struct TA_TSF_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_TSF_State( struct TA_TSF_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_TSF_StateFree( struct TA_TSF_State* _state );


/*
 * TA_TYPPRICE - Typical Price
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_TYPPRICE( int    startIdx,
                                   int    endIdx,
                                              const double inHigh[],
                                              const double inLow[],
                                              const double inClose[],
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API TA_RetCode TA_S_TYPPRICE( int    startIdx,
                                     int    endIdx,
                                                const float  inHigh[],
                                                const float  inLow[],
                                                const float  inClose[],
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outReal[] );

TA_LIB_API int TA_TYPPRICE_Lookback( void );


TA_LIB_API struct TA_TYPPRICE_Data {
                                              const double inHigh;
                                              const double inLow;
                                              const double inClose;
                                              };
TA_LIB_API struct TA_TYPPRICE_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_TYPPRICE_Data* memory;
                                     };


TA_LIB_API int TA_TYPPRICE_StateInit( struct TA_TYPPRICE_State* _state );


TA_LIB_API int TA_TYPPRICE_State( struct TA_TYPPRICE_State* _state,
                                           const double inHigh,
                                           const double inLow,
                                           const double inClose,
                                           double        &outReal );

TA_LIB_API int TA_TYPPRICE_StateFree( struct TA_TYPPRICE_State* _state );


/*
 * TA_ULTOSC - Ultimate Oscillator
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod1:(From 1 to 100000)
 *    Number of bars for 1st period.
 * 
 * optInTimePeriod2:(From 1 to 100000)
 *    Number of bars fro 2nd period
 * 
 * optInTimePeriod3:(From 1 to 100000)
 *    Number of bars for 3rd period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_ULTOSC( int    startIdx,
                                 int    endIdx,
                                            const double inHigh[],
                                            const double inLow[],
                                            const double inClose[],
                                            int           optInTimePeriod1, /* From 1 to 100000 */
                                            int           optInTimePeriod2, /* From 1 to 100000 */
                                            int           optInTimePeriod3, /* From 1 to 100000 */
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_LIB_API TA_RetCode TA_S_ULTOSC( int    startIdx,
                                   int    endIdx,
                                              const float  inHigh[],
                                              const float  inLow[],
                                              const float  inClose[],
                                              int           optInTimePeriod1, /* From 1 to 100000 */
                                              int           optInTimePeriod2, /* From 1 to 100000 */
                                              int           optInTimePeriod3, /* From 1 to 100000 */
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API int TA_ULTOSC_Lookback( int           optInTimePeriod1, /* From 1 to 100000 */
                                            int           optInTimePeriod2, /* From 1 to 100000 */
                                            int           optInTimePeriod3 );  /* From 1 to 100000 */


TA_LIB_API struct TA_ULTOSC_Data {
                                            const double inHigh;
                                            const double inLow;
                                            const double inClose;
                                            };
TA_LIB_API struct TA_ULTOSC_Struct {
                                   int mem_size;
                                   int mem_index;
                                   struct TA_ULTOSC_Data* memory;
                                   int           optInTimePeriod1; /* From 1 to 100000 */
                                   int           optInTimePeriod2; /* From 1 to 100000 */
                                   int           optInTimePeriod3; /* From 1 to 100000 */
                                   };


TA_LIB_API int TA_ULTOSC_StateInit( struct TA_ULTOSC_State* _state,
                                             int           optInTimePeriod1, /* From 1 to 100000 */
                                             int           optInTimePeriod2, /* From 1 to 100000 */
                                             int           optInTimePeriod3 );  /* From 1 to 100000 */


TA_LIB_API int TA_ULTOSC_State( struct TA_ULTOSC_State* _state,
                                         const double inHigh,
                                         const double inLow,
                                         const double inClose,
                                         int           optInTimePeriod1, /* From 1 to 100000 */
                                         int           optInTimePeriod2, /* From 1 to 100000 */
                                         int           optInTimePeriod3, /* From 1 to 100000 */
                                         double        &outReal );

TA_LIB_API int TA_ULTOSC_StateFree( struct TA_ULTOSC_State* _state );


/*
 * TA_VAR - Variance
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * optInNbDev:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Nb of deviations
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_VAR( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 1 to 100000 */
                                         double        optInNbDev, /* From TA_REAL_MIN to TA_REAL_MAX */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_VAR( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 1 to 100000 */
                                           double        optInNbDev, /* From TA_REAL_MIN to TA_REAL_MAX */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_VAR_Lookback( int           optInTimePeriod, /* From 1 to 100000 */
                                         double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


TA_LIB_API struct TA_VAR_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_VAR_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_VAR_Data* memory;
                                int           optInTimePeriod; /* From 1 to 100000 */
                                double        optInNbDev; /* From TA_REAL_MIN to TA_REAL_MAX */
                                };


TA_LIB_API int TA_VAR_StateInit( struct TA_VAR_State* _state,
                                          int           optInTimePeriod, /* From 1 to 100000 */
                                          double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


TA_LIB_API int TA_VAR_State( struct TA_VAR_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 1 to 100000 */
                                      double        optInNbDev, /* From TA_REAL_MIN to TA_REAL_MAX */
                                      double        &outReal );

TA_LIB_API int TA_VAR_StateFree( struct TA_VAR_State* _state );


/*
 * TA_WCLPRICE - Weighted Close Price
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_LIB_API TA_RetCode TA_WCLPRICE( int    startIdx,
                                   int    endIdx,
                                              const double inHigh[],
                                              const double inLow[],
                                              const double inClose[],
                                              int          *outBegIdx,
                                              int          *outNBElement,
                                              double        outReal[] );

TA_LIB_API TA_RetCode TA_S_WCLPRICE( int    startIdx,
                                     int    endIdx,
                                                const float  inHigh[],
                                                const float  inLow[],
                                                const float  inClose[],
                                                int          *outBegIdx,
                                                int          *outNBElement,
                                                double        outReal[] );

TA_LIB_API int TA_WCLPRICE_Lookback( void );


TA_LIB_API struct TA_WCLPRICE_Data {
                                              const double inHigh;
                                              const double inLow;
                                              const double inClose;
                                              };
TA_LIB_API struct TA_WCLPRICE_Struct {
                                     int mem_size;
                                     int mem_index;
                                     struct TA_WCLPRICE_Data* memory;
                                     };


TA_LIB_API int TA_WCLPRICE_StateInit( struct TA_WCLPRICE_State* _state );


TA_LIB_API int TA_WCLPRICE_State( struct TA_WCLPRICE_State* _state,
                                           const double inHigh,
                                           const double inLow,
                                           const double inClose,
                                           double        &outReal );

TA_LIB_API int TA_WCLPRICE_StateFree( struct TA_WCLPRICE_State* _state );


/*
 * TA_WILLR - Williams' %R
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_WILLR( int    startIdx,
                                int    endIdx,
                                           const double inHigh[],
                                           const double inLow[],
                                           const double inClose[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API TA_RetCode TA_S_WILLR( int    startIdx,
                                  int    endIdx,
                                             const float  inHigh[],
                                             const float  inLow[],
                                             const float  inClose[],
                                             int           optInTimePeriod, /* From 2 to 100000 */
                                             int          *outBegIdx,
                                             int          *outNBElement,
                                             double        outReal[] );

TA_LIB_API int TA_WILLR_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_WILLR_Data {
                                           const double inHigh;
                                           const double inLow;
                                           const double inClose;
                                           };
TA_LIB_API struct TA_WILLR_Struct {
                                  int mem_size;
                                  int mem_index;
                                  struct TA_WILLR_Data* memory;
                                  int           optInTimePeriod; /* From 2 to 100000 */
                                  };


TA_LIB_API int TA_WILLR_StateInit( struct TA_WILLR_State* _state,
                                            int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_WILLR_State( struct TA_WILLR_State* _state,
                                        const double inHigh,
                                        const double inLow,
                                        const double inClose,
                                        int           optInTimePeriod, /* From 2 to 100000 */
                                        double        &outReal );

TA_LIB_API int TA_WILLR_StateFree( struct TA_WILLR_State* _state );


/*
 * TA_WMA - Weighted Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_LIB_API TA_RetCode TA_WMA( int    startIdx,
                              int    endIdx,
                                         const double inReal[],
                                         int           optInTimePeriod, /* From 2 to 100000 */
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         double        outReal[] );

TA_LIB_API TA_RetCode TA_S_WMA( int    startIdx,
                                int    endIdx,
                                           const float  inReal[],
                                           int           optInTimePeriod, /* From 2 to 100000 */
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           double        outReal[] );

TA_LIB_API int TA_WMA_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API struct TA_WMA_Data {
                                         const double inReal;
                                         };
TA_LIB_API struct TA_WMA_Struct {
                                int mem_size;
                                int mem_index;
                                struct TA_WMA_Data* memory;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_LIB_API int TA_WMA_StateInit( struct TA_WMA_State* _state,
                                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_LIB_API int TA_WMA_State( struct TA_WMA_State* _state,
                                      const double inReal,
                                      int           optInTimePeriod, /* From 2 to 100000 */
                                      double        &outReal );

TA_LIB_API int TA_WMA_StateFree( struct TA_WMA_State* _state );


/* Some TA functions takes a certain amount of input data
 * before stabilizing and outputing meaningful data. This is
 * a behavior pertaining to the algo of some TA functions and
 * is not particular to the TA-Lib implementation.
 * TA-Lib allows you to automatically strip off these unstabl
 * data from your output and from any internal processing.
 * (See documentation for more info)
 *
 * Examples:
 *      TA_SetUnstablePeriod( TA_FUNC_UNST_EMA, 30 );
 *           Always strip off 30 price bar for the TA_EMA function.
 *
 *      TA_SetUnstablePeriod( TA_FUNC_UNST_ALL, 30 );
 *           Always strip off 30 price bar from ALL functions
 *           having an unstable period.
 *
 * See ta_defs.h for the enumeration TA_FuncUnstId
 */

TA_RetCode TA_SetUnstablePeriod( TA_FuncUnstId id,
                                 unsigned int  unstablePeriod );

unsigned int TA_GetUnstablePeriod( TA_FuncUnstId id );

/* You can change slightly the behavior of the TA functions
 * by requesting compatibiliy with some existing software.
 *
 * By default, the behavior is as close as the original 
 * author of the TA functions intend it to be.
 *
 * See ta_defs.h for the enumeration TA_Compatibility.
 */
TA_RetCode TA_SetCompatibility( TA_Compatibility value );
TA_Compatibility TA_GetCompatibility( void );

/* Candlesticks struct and functions
 * Because candlestick patterns are subjective, it is necessary 
 * to allow the user to specify what should be the meaning of 
 * 'long body', 'short shadows', etc.
 */

/* Call TA_SetCandleSettings to set that when comparing a candle 
 * basing on settingType it must be compared with the average 
 * of the last avgPeriod candles' rangeType multiplied by factor.
 * This setting is valid until TA_RestoreCandleDefaultSettings is called
 */
TA_RetCode TA_SetCandleSettings( TA_CandleSettingType settingType, 
                                 TA_RangeType rangeType, 
                                 int avgPeriod, 
                                 double factor );

/* Call TA_RestoreCandleDefaultSettings after using custom settings 
 * to restore the default settings for the specified settingType
 */
TA_RetCode TA_RestoreCandleDefaultSettings( TA_CandleSettingType settingType );

#ifdef __cplusplus
}
#endif

#endif

/***************/
/* End of File */
/***************/

